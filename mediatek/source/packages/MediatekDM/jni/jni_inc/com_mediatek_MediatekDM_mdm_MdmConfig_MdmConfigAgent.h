/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein is
 * confidential and proprietary to MediaTek Inc. and/or its licensors. Without
 * the prior written permission of MediaTek inc. and/or its licensors, any
 * reproduction, modification, use or disclosure of MediaTek Software, and
 * information contained herein, in whole or in part, shall be strictly
 * prohibited.
 * 
 * MediaTek Inc. (C) 2010. All rights reserved.
 * 
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER
 * ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
 * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR
 * NONINFRINGEMENT. NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH
 * RESPECT TO THE SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY,
 * INCORPORATED IN, OR SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES
 * TO LOOK ONLY TO SUCH THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO.
 * RECEIVER EXPRESSLY ACKNOWLEDGES THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO
 * OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES CONTAINED IN MEDIATEK
 * SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE
 * RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S
 * ENTIRE AND CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE
 * RELEASED HEREUNDER WILL BE, AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE
 * MEDIATEK SOFTWARE AT ISSUE, OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE
 * CHARGE PAID BY RECEIVER TO MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek
 * Software") have been modified by MediaTek Inc. All revisions are subject to
 * any receiver's applicable license agreements with MediaTek Inc.
 */

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_mediatek_MediatekDM_mdm_MdmConfig_MdmConfigAgent */

#ifndef _Included_com_mediatek_MediatekDM_mdm_MdmConfig_MdmConfigAgent
#define _Included_com_mediatek_MediatekDM_mdm_MdmConfig_MdmConfigAgent
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_mediatek_MediatekDM_mdm_MdmConfig_MdmConfigAgent
 * Method:    setWbxmlMsgEncoding
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_com_mediatek_MediatekDM_mdm_MdmConfig_00024MdmConfigAgent_setWbxmlMsgEncoding
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     com_mediatek_MediatekDM_mdm_MdmConfig_MdmConfigAgent
 * Method:    getWbxmlMsgEncoding
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_mediatek_MediatekDM_mdm_MdmConfig_00024MdmConfigAgent_getWbxmlMsgEncoding
  (JNIEnv *, jobject);

/*
 * Class:     com_mediatek_MediatekDM_mdm_MdmConfig_MdmConfigAgent
 * Method:    setDefaultClientAuthType
 * Signature: (Lcom/mediatek/MediatekDM/mdm/MdmConfig/HttpAuthLevel;)V
 */
JNIEXPORT void JNICALL Java_com_mediatek_MediatekDM_mdm_MdmConfig_00024MdmConfigAgent_setDefaultClientAuthType
  (JNIEnv *, jobject, jobject);

/*
 * Class:     com_mediatek_MediatekDM_mdm_MdmConfig_MdmConfigAgent
 * Method:    getDefaultClientAuthType
 * Signature: ()Lcom/mediatek/MediatekDM/mdm/MdmConfig/HttpAuthLevel;
 */
JNIEXPORT jobject JNICALL Java_com_mediatek_MediatekDM_mdm_MdmConfig_00024MdmConfigAgent_getDefaultClientAuthType
  (JNIEnv *, jobject);

/*
 * Class:     com_mediatek_MediatekDM_mdm_MdmConfig_MdmConfigAgent
 * Method:    setMinServerAuthType
 * Signature: (Lcom/mediatek/MediatekDM/mdm/MdmConfig/HttpAuthLevel;)V
 */
JNIEXPORT void JNICALL Java_com_mediatek_MediatekDM_mdm_MdmConfig_00024MdmConfigAgent_setMinServerAuthType
  (JNIEnv *, jobject, jobject);

/*
 * Class:     com_mediatek_MediatekDM_mdm_MdmConfig_MdmConfigAgent
 * Method:    getMinServerAuthType
 * Signature: ()Lcom/mediatek/MediatekDM/mdm/MdmConfig/HttpAuthLevel;
 */
JNIEXPORT jobject JNICALL Java_com_mediatek_MediatekDM_mdm_MdmConfig_00024MdmConfigAgent_getMinServerAuthType
  (JNIEnv *, jobject);

/*
 * Class:     com_mediatek_MediatekDM_mdm_MdmConfig_MdmConfigAgent
 * Method:    setMaxServerAuthType
 * Signature: (Lcom/mediatek/MediatekDM/mdm/MdmConfig/HttpAuthLevel;)V
 */
JNIEXPORT void JNICALL Java_com_mediatek_MediatekDM_mdm_MdmConfig_00024MdmConfigAgent_setMaxServerAuthType
  (JNIEnv *, jobject, jobject);

/*
 * Class:     com_mediatek_MediatekDM_mdm_MdmConfig_MdmConfigAgent
 * Method:    getMaxServerAuthType
 * Signature: ()Lcom/mediatek/MediatekDM/mdm/MdmConfig/HttpAuthLevel;
 */
JNIEXPORT jobject JNICALL Java_com_mediatek_MediatekDM_mdm_MdmConfig_00024MdmConfigAgent_getMaxServerAuthType
  (JNIEnv *, jobject);

/*
 * Class:     com_mediatek_MediatekDM_mdm_MdmConfig_MdmConfigAgent
 * Method:    setClientNoncePerMessage
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_com_mediatek_MediatekDM_mdm_MdmConfig_00024MdmConfigAgent_setClientNoncePerMessage
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     com_mediatek_MediatekDM_mdm_MdmConfig_MdmConfigAgent
 * Method:    getClientNoncePerMessage
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_mediatek_MediatekDM_mdm_MdmConfig_00024MdmConfigAgent_getClientNoncePerMessage
  (JNIEnv *, jobject);

/*
 * Class:     com_mediatek_MediatekDM_mdm_MdmConfig_MdmConfigAgent
 * Method:    setServerNoncePerMessage
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_com_mediatek_MediatekDM_mdm_MdmConfig_00024MdmConfigAgent_setServerNoncePerMessage
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     com_mediatek_MediatekDM_mdm_MdmConfig_MdmConfigAgent
 * Method:    getServerNoncePerMessage
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_mediatek_MediatekDM_mdm_MdmConfig_00024MdmConfigAgent_getServerNoncePerMessage
  (JNIEnv *, jobject);

/*
 * Class:     com_mediatek_MediatekDM_mdm_MdmConfig_MdmConfigAgent
 * Method:    setMaxMsgSize
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_mediatek_MediatekDM_mdm_MdmConfig_00024MdmConfigAgent_setMaxMsgSize
  (JNIEnv *, jobject, jint);

/*
 * Class:     com_mediatek_MediatekDM_mdm_MdmConfig_MdmConfigAgent
 * Method:    getMaxMsgSize
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_mediatek_MediatekDM_mdm_MdmConfig_00024MdmConfigAgent_getMaxMsgSize
  (JNIEnv *, jobject);

/*
 * Class:     com_mediatek_MediatekDM_mdm_MdmConfig_MdmConfigAgent
 * Method:    setMaxObjSize
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_mediatek_MediatekDM_mdm_MdmConfig_00024MdmConfigAgent_setMaxObjSize
  (JNIEnv *, jobject, jint);

/*
 * Class:     com_mediatek_MediatekDM_mdm_MdmConfig_MdmConfigAgent
 * Method:    getMaxObjSize
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_mediatek_MediatekDM_mdm_MdmConfig_00024MdmConfigAgent_getMaxObjSize
  (JNIEnv *, jobject);

/*
 * Class:     com_mediatek_MediatekDM_mdm_MdmConfig_MdmConfigAgent
 * Method:    setEnsurePackage1Sent
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_com_mediatek_MediatekDM_mdm_MdmConfig_00024MdmConfigAgent_setEnsurePackage1Sent
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     com_mediatek_MediatekDM_mdm_MdmConfig_MdmConfigAgent
 * Method:    getEnsurePackage1Sent
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_mediatek_MediatekDM_mdm_MdmConfig_00024MdmConfigAgent_getEnsurePackage1Sent
  (JNIEnv *, jobject);

/*
 * Class:     com_mediatek_MediatekDM_mdm_MdmConfig_MdmConfigAgent
 * Method:    setDmAccSingle
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_com_mediatek_MediatekDM_mdm_MdmConfig_00024MdmConfigAgent_setDmAccSingle
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     com_mediatek_MediatekDM_mdm_MdmConfig_MdmConfigAgent
 * Method:    getDmAccSingle
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_mediatek_MediatekDM_mdm_MdmConfig_00024MdmConfigAgent_getDmAccSingle
  (JNIEnv *, jobject);

/*
 * Class:     com_mediatek_MediatekDM_mdm_MdmConfig_MdmConfigAgent
 * Method:    setDmProxy
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_mediatek_MediatekDM_mdm_MdmConfig_00024MdmConfigAgent_setDmProxy
  (JNIEnv *, jobject, jstring);

/*
 * Class:     com_mediatek_MediatekDM_mdm_MdmConfig_MdmConfigAgent
 * Method:    getDmProxy
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_mediatek_MediatekDM_mdm_MdmConfig_00024MdmConfigAgent_getDmProxy
  (JNIEnv *, jobject);

/*
 * Class:     com_mediatek_MediatekDM_mdm_MdmConfig_MdmConfigAgent
 * Method:    setDmTreeRootElement
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_mediatek_MediatekDM_mdm_MdmConfig_00024MdmConfigAgent_setDmTreeRootElement
  (JNIEnv *, jobject, jstring);

/*
 * Class:     com_mediatek_MediatekDM_mdm_MdmConfig_MdmConfigAgent
 * Method:    getDmTreeRootElement
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_mediatek_MediatekDM_mdm_MdmConfig_00024MdmConfigAgent_getDmTreeRootElement
  (JNIEnv *, jobject);

/*
 * Class:     com_mediatek_MediatekDM_mdm_MdmConfig_MdmConfigAgent
 * Method:    setMaxNetRetries
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_mediatek_MediatekDM_mdm_MdmConfig_00024MdmConfigAgent_setMaxNetRetries
  (JNIEnv *, jobject, jint);

/*
 * Class:     com_mediatek_MediatekDM_mdm_MdmConfig_MdmConfigAgent
 * Method:    getMaxNetRetries
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_mediatek_MediatekDM_mdm_MdmConfig_00024MdmConfigAgent_getMaxNetRetries
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
