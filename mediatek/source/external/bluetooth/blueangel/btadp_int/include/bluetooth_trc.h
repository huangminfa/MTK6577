/*****************************************************************************
*  Copyright Statement:
*  --------------------
*  This software is protected by Copyright and the information contained
*  herein is confidential. The software may not be copied and the information
*  contained herein may not be used or disclosed except with the written
*  permission of MediaTek Inc. (C) 2005
*
*  BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
*  THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
*  RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
*  AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
*  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
*  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
*  NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
*  SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
*  SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
*  THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
*  NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
*  SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
*
*  BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
*  LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
*  AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
*  OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
*  MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE. 
*
*  THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
*  WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
*  LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
*  RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
*  THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
*
*****************************************************************************/

/*******************************************************************************
 * Filename:
 * ---------
 *   bluetooth_trc.h
 *
 * Project:
 * --------
 *   MAUI
 *
 * Description:
 * ------------
 *   This is trace map definition.
 *
 * Author:
 * -------
 *   Brad Chang
 *
 *==============================================================================
 * 				HISTORY
 * Below this line, this part is controlled by PVCS VM. DO NOT MODIFY!! 
 *------------------------------------------------------------------------------
 * $Revision: #1 $ 
 * $Modtime: $
 * $Log: $
 *
 * 04 25 2012 huirong.liao
 * [ALPS00270892] [BlueTooth][HFP]DUT Connected with PC "phone audio" will disconnected itself after a while "This issue also exist on MT6577"
 * .
 *
 * 07 07 2011 autumn.li
 * [ALPS00047476] [BT][MT6620 E4][IOT]After connect to mtkemp AP.Establish BT connection on MotoS805 earphone and play A2DP. Use BT FTP to download file from NB. A2DP voice will broken.
 * Add QoS mechanism for slave A2DP
 *
 * 11 17 2010 autumn.li
 * [ALPS00023120] [BT] Reset Link Policy after bonding
 * .
 *
 * 10 20 2010 autumn.li
 * [ALPS00221013] [GOEP] FTP client disconnects when HID request timeouts
 * Connect timeout may due to user irresponsiveness instead of link issue, so don't damage other channels
 *
 * 09 03 2010 sh.lai
 * [ALPS00003522] [BLUETOOTH] Android 2.2 BLUETOOTH porting
 * Integration Bluetooth solution.
 *
 * 09 01 2010 sh.lai
 * NULL
 * Integration change. into 1036OF
 *
 * Jul 10 2009 mtk02126
 * [MAUI_01717954] BT-BIP connect failed problem
 * 
 *
 * Jul 7 2009 mtk02126
 * [MAUI_01716246] BT power on fail modification
 * 
 *
 * Jun 30 2009 mtk80029
 * [MAUI_01873300] [1] Assert fail: 0 conmgr.c 919 - BT
 * 
 *
 * Jun 25 2009 mtk02126
 * [MAUI_01710133] Modify Virtual sniffer mechanism
 * 
 *
 * Jun 25 2009 mtk02126
 * [MAUI_01703270] Modify traces
 * 
 *
 * Jun 19 2009 mtk80029
 * [MAUI_01870220] [BT]Should not popup Done when send failed
 * 
 *
 * Jun 16 2009 mtk80029
 * [MAUI_01869480] [BT HFP] revise code related to audio connection request
 * 
 *
 * Jun 16 2009 mtk02126
 * [MAUI_01703270] Modify traces
 * 
 *
 * Jun 13 2009 mtk02126
 * [MAUI_01703270] Modify traces
 * 
 *
 * Jun 9 2009 mtk80029
 * [MAUI_01866671] [BT] OBEX, GOEP,PBAP,BIP,HFP: replace "Report" trace with kal_trace
 * 
 *
 * Jun 2 2009 mtk80029
 * [MAUI_01837169] [BT] remove kal_prompt_trace
 * 
 *
 * Apr 14 2009 mtk01411
 * [MAUI_01419818] [media player] audio cannot be output via A2DP
 * 
 *
 * Apr 6 2009 mtk02126
 * [MAUI_01661013] Modify RFCOMM trace "BT_RFCOMMM_DM_REPORT"
 * 
 *
 * Mar 27 2009 mtk02126
 * [MAUI_01649933] RFCOMM change
 * 
 *
 * Mar 22 2009 mtk02126
 * [MAUI_01646297] check in invalid DLCI
 * 
 *
 * Mar 18 2009 mtk02126
 * [MAUI_01649933] RFCOMM change
 * 
 *
 * Mar 10 2009 mtk02126
 * [MAUI_01642952] Add RFCOMM start timer traces
 * 
 *
 * Mar 7 2009 mtk02126
 * [MAUI_01642952] Add RFCOMM start timer traces
 * 
 *
 * Mar 6 2009 mtk02126
 * [MAUI_01642278] print the ongoing activity in BT_BTBM_PREVIOUS_ONGOING
 * 
 *
 * Mar 2 2009 mtk80029
 * [MAUI_01394940] [a8box] [1] Fatal error: 1=804 2=80 -BT
 * 
 *
 * Feb 27 2009 mtk80245
 * [MAUI_01401967] Add Trace for BPP ADP
 * 
 *
 * Feb 24 2009 mtk80245
 * [MAUI_01517152] MTK:Bluetooth_it the printing progress bar display abnormal
 * 
 *
 * Feb 16 2009 mtk01411
 * [MAUI_01551987] Fails to connect Headset profile.
 * 
 *
 * Feb 12 2009 mtk02126
 * [MAUI_01628484] check in Posh trace
 * 
 *
 * Feb 9 2009 mtk01411
 * [MAUI_01547217] Accept coonection request screen appears twice: IOT with Headset
 * 
 *
 * Feb 2 2009 mtk02126
 * [MAUI_01501028] MTK:Bluetooth_it can't connect BIP succeed any more
 * 
 *
 * Feb 1 2009 mtk01411
 * [MAUI_01363081] [BT]The behavior is abnormal (authentication design problem)
 * 
 *
 * Jan 4 2009 mtk01411
 * [MAUI_01359257] [1]Assert Fail:IsListCircular(head)utils.c 289-BT
 * 
 *
 * Dec 30 2008 mtk01411
 * [MAUI_01308057] [Bluetooth] Add TxPacketInfo in RFCOMM and AVTP Timeout Handler
 * 
 *
 * Dec 30 2008 mtk01411
 * [MAUI_01308057] [Bluetooth] Add TxPacketInfo in RFCOMM and AVTP Timeout Handler
 * 
 *
 * Dec 29 2008 mtk01411
 * [MAUI_01307518] [Bluetooth] Add trace for L2CAP and RFCOMM Send Cmd Rsp Pkt Handled
 * 
 *
 * Dec 29 2008 mtk01411
 * [MAUI_01307518] [Bluetooth] Add trace for L2CAP and RFCOMM Send Cmd Rsp Pkt Handled
 * 
 *
 * Dec 29 2008 mtk01411
 * [MAUI_01482962] Assert fail: utils.c 289 - BT
 * 
 *
 * Dec 29 2008 mtk02126
 * [MAUI_01306418] [BT]change trace format 20081229
 * 
 *
 * Dec 26 2008 mbj06038
 * [MAUI_01348800] [BT]When connect failed,the previous connection will disconnect
 * 
 *
 * Dec 26 2008 mtk02126
 * [MAUI_01300454] BT-WIFI coexistence
 * 
 *
 * Dec 22 2008 mtk02126
 * [MAUI_01301355] UART_DUMP
 * 
 *
 * Dec 20 2008 mtk02126
 * [MAUI_01301355] UART_DUMP
 * 
 *
 * Dec 12 2008 mtk01411
 * [MAUI_01531783] [1] Assert Fail: Handler->remDev !=0 conmgr.c 2734 - BT
 * 
 *
 * Dec 9 2008 mtk02126
 * [MAUI_01294006] Replace RFCOMM_SEND_PN_RESPONSE by RFCOMM_SEND_ACK_RESPONSE
 * 
 *
 * Dec 9 2008 MTK01411
 * [MAUI_01293810] [Bluetooth] Check BT Addr in CMGR_CreateDataLink if bdc link is connected
 * 
 *
 * Nov 26 2008 mbj06038
 * [MAUI_01342148] [New feature][SyncML] Device sync support
 * 
 *
 * Nov 6 2008 mtk02126
 * [MAUI_01269441] change trace format
 * 
 *
 * Nov 2 2008 mtk01411
 * [MAUI_01266952] [Bluetooth] Dump HCI Cmd Status Event parm values for debug
 * 
 *
 * Oct 14 2008 mtk01411
 * [MAUI_01211888] [1] Fatal Error (305, 88880056) - BT
 * 
 *
 * Oct 12 2008 mtk01411
 * [MAUI_01254027] [JSR82] Update JSR82 related codes
 * 
 *
 * Sep 24 2008 mtk02126
 * [MAUI_01243221] Correct BT log
 * 
 *
 * Sep 23 2008 mbj06032
 * [MAUI_00789020] BT-BIP problem
 * 
 *
 * Sep 23 2008 mbj06032
 * [MAUI_01116233] [BT] Check received DCFs: if no Rights info, delete it
 * 
 *
 * Sep 22 2008 mtk00560
 * [MAUI_01205714] MTK:Bluetooth_ HFP auto disconnect
 * 
 *
 * Sep 16 2008 mtk01411
 * [MAUI_01238141] [Bluetooth] Add debug info in name request result hdlr
 * 
 *
 * Sep 4 2008 MTK02126
 * [MAUI_01232553] RFCOMM multiple channel feature
 * 
 *
 * Sep 4 2008 MTK02126
 * [MAUI_01232553] RFCOMM multiple channel feature
 * 
 *
 * Sep 4 2008 MTK02126
 * [MAUI_01232553] RFCOMM multiple channel feature
 * 
 *
 * Aug 28 2008 mtk01411
 * [MAUI_01229156] [1] Assert fail: meif.c 1096 - BT
 * 
 *
 * Aug 26 2008 mtk01411
 * [MAUI_01226420] BT-device busy pop up
 * 
 *
 * Aug 7 2008 mtk01239
 * [MAUI_00817579] [1] Assert fail: hci_evnt.c 312 - BT
 * 
 *
 * Aug 6 2008 mtk01411
 * [MAUI_00816750] SAP-Handset pop up input passcode screen again then disappear
 * 
 *
 * Aug 6 2008 mtk01411
 * [MAUI_00816750] SAP-Handset pop up input passcode screen again then disappear
 * 
 *
 * Aug 5 2008 mtk01239
 * [MAUI_00790838] [Bluetooth] Revise BT code and format it.
 * 
 *
 * Aug 4 2008 mtk00560
 * [MAUI_01085729] [BT]Can't connect amber38 via HFP.
 * 
 *
 * Aug 4 2008 mtk00560
 * [MAUI_01085729] [BT]Can't connect amber38 via HFP.
 * 
 *
 * Jul 24 2008 MTK02126
 * [MAUI_01084421] [BT]Can connect HFP without pairing with handset..
 * 
 *
 * Jul 22 2008 MTK02126
 * [MAUI_01084421] [BT]Can connect HFP without pairing with handset..
 * 
 *
 * Jul 18 2008 mtk00560
 * [MAUI_00804575] [BT] to add sequence numer for opening HF virtual port and using SBC encoder
 * 
 *
 * Jul 15 2008 mtk01411
 * [MAUI_00804954] [Bluetooth] Support Read RSSI value request from MMI
 * 
 *
 * Jul 15 2008 mbj06032
 * [MAUI_01178462] MTK:Bluetooth FTP_handset always show "cancelling" screen
 * 
 *
 * Jul 11 2008 mtk01239
 * [MAUI_00790838] [Bluetooth] Revise BT code and format it.
 * 
 *
 * Jun 27 2008 mtk00560
 * [MAUI_01174860] MTK:Bluetooth HFP_[1] Fatal Error (804, 80) - L1
 * 
 *
 * Jun 25 2008 mbj06032
 * [MAUI_01072847] [BT OBEX] add trace info
 * 
 *
 * Jun 22 2008 mtk01411
 * [MAUI_00787780] [Bluetooth] SIMAP PTS EM Mode
 * 
 *
 * Jun 20 2008 mbj06038
 * [MAUI_01079127] [BT HID]Revise HID trace
 * 
 *
 * Jun 17 2008 mbj06032
 * [MAUI_01077981] [BT]Assert Fail: observer.c 1085 -BT
 * 
 *
 * Jun 17 2008 mbj06032
 * [MAUI_01077981] [BT]Assert Fail: observer.c 1085 -BT
 * 
 *
 * Jun 13 2008 mbj06032
 * [MAUI_01072101] [BT]Assert Fail: len>=3 observer.c 1864 -BT
 * 
 *
 * Jun 13 2008 mbj06032
 * [MAUI_01072847] [BT OBEX] add trace info
 * 
 *
 * Jun 6 2008 mbj07029
 * [MAUI_00783345] [MMI][CallLog][PBAP] Get Call Log data from memory
 * 
 *
 * Jun 6 2008 mbj06032
 * [MAUI_01063800] [BT]Long time display "Connecting" and connect failed.
 * 
 *
 * Jun 4 2008 mtk01411
 * [MAUI_01151155] MTK:Bluetooth BIP_[1] Assert fail: utils.c 187 - BT
 * 
 *
 * Jun 2 2008 mbj06032
 * [MAUI_00678189] [PBAP]Can't get the missed call wth Nokia BH-902
 * 
 *
 * May 27 2008 mtk00560
 * [MAUI_00778293] [MMI][BT] to handle the concurrent scenario of HFP and HSP.
 * 
 *
 * May 26 2008 mtk01239
 * [MAUI_00777619] [Bluetooth] Revise the BTBM code
 * 
 *
 * May 23 2008 mbj06032
 * [MAUI_01046086] [BT OBEX] modify OBEX timer: for RFCOMM packet
 * 
 *
 * May 19 2008 mtk00560
 * [MAUI_00771864] [Bluetooth] BT 2.1 new feature TW side
 * 
 *
 * May 18 2008 mtk01411
 * [MAUI_00774255] [Bluetoooth] Add trace for RF_OpenClientChnl
 * 
 *
 * May 14 2008 mtk01239
 * [MAUI_00771864] [Bluetooth] BT 2.1 new feature TW side
 * 
 *
 * May 13 2008 mbj06032
 * [MAUI_01038033] [BT]Can connect server when press button no on Server.
 * 
 *
 * May 13 2008 mbj06032
 * [MAUI_00093122] Screen always displays recieving X%, x/x.
 * 
 *
 * May 6 2008 mbj06032
 * [MAUI_00318047] MTK:Bluetooth_Assert Fail:OSC(resp)!=(OBRC_CONTINUEIOB_FINAL_observer.c 872-BT
 * 
 *
 * May 5 2008 mtk01411
 * [MAUI_00972483] MTK:Bluetooth_when handset with earphone connected ,the name show empty
 * 
 *
 * Apr 25 2008 mbj06032
 * [MAUI_00669575] [BT BIP]Revise BIP code and modify trace info
 * 
 *
 * Apr 19 2008 mbj07029
 * [MAUI_00664265] [Phonebook][PBAP] pbap profile new feature check in
 * 
 *
 * Apr 16 2008 mbj06032
 * [MAUI_00294851] MTK:Bluetooth BIP_should not popup "BIP disconnected" in webcam screen
 * 
 *
 * Apr 11 2008 mbj06032
 * [MAUI_00653702] [BT OBEX & GOEP ] add some trace info
 * 
 *
 * Apr 10 2008 mbj06032
 * [MAUI_00653223] [BT OBEX]modify trace info
 * 
 *
 * Apr 9 2008 mbj06032
 * [MAUI_00651340] [BT GOEP] Modify goep.c for PBAP server
 * 
 *
 * Apr 6 2008 mtk01411
 * [MAUI_00289416] [BPP]_handset always show "connecting" screen
 * 
 *
 * Mar 30 2008 mtk01411
 * [MAUI_00740866] [JSR82] Handle auth event with error in L2Cap to force delete paired reocrd and disc
 * 
 *
 * Mar 27 2008 mtk01411
 * [MAUI_00644078] [JSR82][1] Assert Fail: 0 btmmicm.c 1570 - MMI (src_module is set as MMI abnormally)
 * 
 *
 * Mar 25 2008 mtk01411
 * [MAUI_00737864] [JSR82] Check restore state in set_local_cod_result hdler and delay setup connection
 * 
 *
 * Mar 25 2008 mbj06032
 * [MAUI_00285864] the both popup message different
 * 
 *
 * Mar 24 2008 mtk01411
 * [MAUI_00284729] Call_can't send AT command any  more
 * 
 *
 * Mar 24 2008 mbj06032
 * [MAUI_00639839] [BT OBEX] modify trace info
 * 
 *
 * Mar 21 2008 mbj06032
 * [MAUI_00639839] [BT OBEX] modify trace info
 * 
 *
 * Mar 21 2008 mbj06032
 * [MAUI_00639839] [BT OBEX] modify trace info
 * 
 *
 * Mar 21 2008 mbj06032
 * [MAUI_00096220] BIP gets disconnected in the mentioned scenario.
 * 
 *
 * Mar 21 2008 mbj06032
 * [MAUI_00639478] [BT OBEX] Patch 07Bw0812MP
 * 
 *
 * Mar 20 2008 mbj06032
 * [MAUI_00096220] BIP gets disconnected in the mentioned scenario.
 * 
 *
 * Mar 20 2008 mbj06032
 * [MAUI_00096220] BIP gets disconnected in the mentioned scenario.
 * 
 *
 * Mar 20 2008 mbj06032
 * [MAUI_00282255] Assert Fail: cngrGabdker !=0 cibngr,c 740 - BT
 * 
 *
 * Mar 16 2008 mtk01239
 * [MAUI_00086093] Device busy response to the dongle goes very late.
 * 
 *
 * Mar 15 2008 mtk01411
 * [MAUI_00281663] Fatal Error (b03): Abnormal Reset (63f423) - BT
 * 
 *
 * Mar 14 2008 mbj06032
 * [MAUI_00636946] [BT OBEX ] Add trace
 * 
 *
 * Mar 14 2008 mtk01411
 * [MAUI_00731923] JSR82 _it can't load image
 * 
 *
 * Mar 11 2008 mbj06032
 * [MAUI_00634780] [1] Assert Fail: 0 == "Contact MTK BT owner,  follow BT debug SOP" bt_osapi.c 613 -
 * add obex trace
 *
 * Mar 9 2008 mbj06032
 * [MAUI_00093193] [1] Assert Fail: (status == BT_STATUS_PENDING)|| (obxbtstk.c 236 - BT
 * add OBEX trace
 *
 * Mar 2 2008 mtk01411
 * [MAUI_00278253] [JSR82]Java_always display " play wait "
 * 
 *
 * Feb 29 2008 mbj06032
 * [MAUI_00725495] BT-Always in "Sending" screen
 * add OBEX trace
 *
 * Feb 28 2008 mtk01411
 * [MAUI_00621026] [Bluetooth] Check in JSR82 codes
 * 
 *
 * Feb 25 2008 mtk01411
 * [MAUI_00621026] [Bluetooth] Check in JSR82 codes
 * 
 *
 * Feb 25 2008 mbj06032
 * [MAUI_00084141] Unable to delete JPEG files from Memory card.
 * add BIP trace info
 *
 * Feb 19 2008 mtk01411
 * [MAUI_00621026] [Bluetooth] Check in JSR82 codes
 * 
 *
 * Feb 19 2008 mtk01411
 * [MAUI_00621026] [Bluetooth] Check in JSR82 codes
 * 
 *
 * Feb 14 2008 mtk01411
 * [MAUI_00273665] MTK BT profile supported on MT6611_select paired device connect FTP or BIP handset p
 * 
 *
 * Feb 4 2008 mtk01411
 * [MAUI_00614891] [Bluetooth] Check in SIMAP PIN Code Length feature
 * 
 *
 * Feb 1 2008 mtk01411
 * [MAUI_00614891] [Bluetooth] Check in SIMAP PIN Code Length feature
 * 
 *
 * Jan 27 2008 mtk01411
 * [MAUI_00612606] [Bluetooth] Check in SPP with SCO feature and enable configurate sniif mode RSSI tim
 * 
 *
 * Jan 21 2008 mtk01239
 * [MAUI_00258405] MTK:Bluetooth HFP_ the sound can't from to earphone
 * 
 *
 * Jan 18 2008 mbj06053
 * [MAUI_00608373] [Simple push][1]Assert fail:(proj->total_remain = =0) bt_adp_bpp_sp.c 2348-BT
 * 
 *
 * Jan 14 2008 mtk01411
 * [MAUI_00606389] [Bluetooth] Modify BT codes
 * 
 *
 * Jan 9 2008 mbj06053
 * [MAUI_00068499] [Simple Push] Print failed pop up appears.
 * 
 *
 * Dec 31 2007 mtk01411
 * [MAUI_00598741] BT_SAP_MS won't pop up exchange PIN code screen when Car kit connect SAP profile wit
 * 
 *
 * Dec 17 2007 mtk00560
 * [MAUI_00503188] [BT]The handfree profile will disconnected automactically
 * 
 *
 * Dec 10 2007 mtk01239
 * [MAUI_00243296] MTK:Bluetooth BIP_[1] Assert fail: HCC(aclRxPacketsLeft) != 0 hci_proc.c 826 - BT
 * 
 *
 * Dec 1 2007 mtk01239
 * [MAUI_00585104] [Bluetooth]eSCO enabled
 * 
 *
 * Nov 27 2007 mtk01239
 * [MAUI_00241253] MTK:Bluetooth _wait a while handset popup 'Device busy"
 * 
 *
 * Nov 26 2007 mtk01239
 * [MAUI_00581868] [Bluetooth] Create SCO not do the role switch operation
 * 
 *
 * Nov 26 2007 mtk01239
 * [MAUI_00581868] [Bluetooth] Create SCO not do the role switch operation
 * 
 *
 * Oct 22 2007 mbj06053
 * [MAUI_00483580] Replace "Report" with "kal_trace"  in BPP adapter layer soure files
 * 
 *
 * Oct 15 2007 mtk01239
 * [MAUI_00238583] [BT] always display "device busy" when connect OPP
 * 
 *
 * Oct 10 2007 mbj06032
 * [MAUI_00479228] [BT BIP] while getting image, delete it from responder, then client is abnormal
 * add geop trace
 *
 * Oct 8 2007 mtk01239
 * [MAUI_00556508] [BT]Shrinking BT code size
 * 
 *
 * Oct 8 2007 mtk01239
 * [MAUI_00556508] [BT]Shrinking BT code size
 * 
 *
 * Oct 8 2007 mtk01239
 * [MAUI_00556508] [BT]Shrinking BT code size
 * 
 *
 * Oct 3 2007 mtk00560
 * [MAUI_00555431] [BT][GOEP] to fix W07.40 goep compile error
 * 
 *
 * Oct 1 2007 mtk01411
 * [MAUI_00554346] [Bluetooth SIMAP] Add kal trace for debug usage
 * 
 *
 * Oct 1 2007 mtk01411
 * [MAUI_00554346] [Bluetooth SIMAP] Add kal trace for debug usage
 * 
 *
 * Sep 29 2007 mbj06032
 * [MAUI_00474300] [1] Assert fail:client !=NULL goep_main.c 1221 - BT
 * add trace info
 *
 * Sep 27 2007 mbj06032
 * [MAUI_00474253] [BT OBEX] Replace "DebugPrint" with "kal_trace"
 * add GOEP & OBEX trace
 *
 * Sep 16 2007 mtk01411
 * [MAUI_00548801] [Bluetooth] Add Read RSSI value for SPP SCO feature
 * 
 *
 * Sep 14 2007 mtk00511
 * [MAUI_00469578] [BT] [BIP] ( For TW ) Check in
 * 
 *
 * Aug 27 2007 mbj06032
 * [MAUI_00461457] replace "Report" with "kal_trace" in GOEP & OBEX
 * add trace msg
 *
 * Jul 15 2007 mtk01411
 * [MAUI_00416972] [Bluetooth] SPP with SCO functionality
 * 
 *
 * May 11 2007 mbj06032
 * [MAUI_00427650] Need more GOEP and OBEX trace info
 * add some traces for goep and obex
 *
 * Apr 23 2007 mtk01411
 * [MAUI_00384849] [Bluetooth SPP Client] SPP Client and number of virtual ports modification
 * 
 *
 * Apr 16 2007 MTK01476
 * [MAUI_00381908] [New Feature]Bluetooth Basic Printing Profile check in
 * 
 *
 * Mar 26 2007 mtk01411
 * [MAUI_00375903] [Bluetooth SIMAP] Replace report function to kal_trace
 * 
 *
 * Mar 15 2007 mtk00560
 * [MAUI_00421706] [Bluetooth] Pop up "Disconnect Faild",but in fact MS have disconnected with HSK
 * 
 *
 * Mar 5 2007 mtk00560
 * [MAUI_00369338] [1]Assert fail:(hidda_cntx_p->num_intr_queue <=5) bt_adp_hidd.c 955-BT
 * 
 *
 * Feb 26 2007 mtk01411
 * [MAUI_00366101] FAX-The FAX profile disconnect by auto
 * 
 *
 * Feb 26 2007 mtk01239
 * [MAUI_00368036] [1] Assert Fail: 0 hci_proc.c 67 - BT
 * 
 *
 * Feb 11 2007 mtk01239
 * [MAUI_00364863] [1] Assert Fail: 0 hci_proc.c 67 - BT
 * 
 *
 * Feb 5 2007 mtk01393
 * [MAUI_00363834] [1] Assert fail: a2dp_wait_sco_disconnecting==KAL_FALSE bt_a2dp_hdlr.c 882 - BT
 * 
 *
 * Jan 10 2007 mtk00511
 * [MAUI_00357120] [1] Assert fail: len <= BTSTACK_MaxTxSize(con) obxbtstk.c 1090 - BT
 * 
 *
 * Jan 2 2007 mtk00560
 * [MAUI_00355463] [Bluetooth] to restructure bluetooth folders
 * created by clearfsimport
 *
 * Dec 3 2006 mtk01411
 * [MAUI_00347961] Add Bluetooth SIM Access Profile related codes
 * Add for SIM Access Profile
 *
 * Nov 27 2006 mtk01239
 * [MAUI_00346134] [1] Assert fail: 0 bt_adp_bm.c 1708 - BT
 * 
 *
 * Nov 4 2006 mtk01239
 * [MAUI_00340620] [Bluetooth] patch for Wifi coexistence turn AFH and PTA
 * 
 *
 * Oct 25 2006 mtk01239
 * [MAUI_00337494] [1] Assert fail: MTKBMC(bm_scan_opactivity) == BM_OP_NONE btbm.c 544 - BT
 * 
 *
 * Oct 23 2006 mtk01239
 * [MAUI_00337970] [Bluetooth] Update BT Code with new trace
 * 
 *
 * Oct 19 2006 mtk01239
 * [MAUI_00337212] [1] Assert fail: IsListCircular(&(remDev->handlers)) mecon.c 2350 - BT
 * 
 *
 * Oct 16 2006 mtk00511
 * [MAUI_00336405] [OBEX] Modification for BQB test and IOT issues
 * 
 *
 * Oct 12 2006 mtk01239
 * [MAUI_00335687] [Bluetooth] Fix complier error
 * 
 *
 * Oct 4 2006 mtk01239
 * [MAUI_00334713] [Bluetooth]Remove Report to kal_trace
 * 
 *
 * Oct 4 2006 mtk01239
 * [MAUI_00334713] [Bluetooth]Remove Report to kal_trace
 * 
 *
 * Oct 4 2006 mtk01239
 * [MAUI_00334713] [Bluetooth]Remove Report to kal_trace
 * 
 *
 * Oct 4 2006 mtk01239
 * [MAUI_00334713] [Bluetooth]Remove Report to kal_trace
 * 
 *
 * Oct 4 2006 mtk01239
 * [MAUI_00334713] [Bluetooth]Remove Report to kal_trace
 * 
 *
 * Oct 4 2006 mtk01239
 * [MAUI_00334713] [Bluetooth]Remove Report to kal_trace
 * 
 *
 * Oct 4 2006 mtk00798
 * [MAUI_00331575] [New Feature] MTK BT A2DP with MP3 and SBC streaming capabilities
 * 
 *
 * Sep 15 2006 mtk00798
 * [MAUI_00329881] Extra-"Initializing Bluetooth Now    Wait a Monent!" pop up ,and can't entry
 * 
 *
 * Aug 14 2006 mtk00560
 * [MAUI_00321283] BT-Assert Fail: 0 BTMMIHsp.c 430 -MMI
 * 
 *
 * Jul 31 2006 mtk01239
 * [MAUI_00214015] [BT] update BT code and add OPP, FTP SDP record
 * 
 *
 * Jul 17 2006 mtk00798
 * [MAUI_00211319] Add trace info to BT A2DP codes and Fix some bugs
 * 
 *
 * Jul 17 2006 MTK00758
 * [MAUI_00210638] [BT]IT check in
 * 
 *
 * Jul 17 2006 mtk00676
 * [MAUI_00210994] [AVRCP] Modification for ESI AVRCP
 * 
 *
 * Jul 16 2006 MTK00758
 * [MAUI_00210638] [BT]IT check in
 * 
 *
 * Jun 26 2006 mtk00560
 * [MAUI_00205490] [ESI]ESI HFP/HSP integration
 * 
 *
 * Jun 12 2006 mtk00560
 * [MAUI_00201895] [ESI]to integrate HSP/HFP FSM code
 * 
 *
 * Apr 3 2006 mtk00758
 * [MAUI_00184485] [New feature] Add task to simulate UART driver for unitest
 * 
 *
 * Mar 11 2006 MTK00303
 * [MAUI_00178684] [Bluetooth]ESI bluetooth protocol stack
 * add bluetooth files
 *
 *------------------------------------------------------------------------------
 * Upper this line, this part is controlled by PVCS VM. DO NOT MODIFY!! 
 *==============================================================================
 *******************************************************************************/

#ifndef _BLUETOOTH_TRC_H
#define _BLUETOOTH_TRC_H
#ifdef BTMTK_ON_WISE
#ifndef GEN_FOR_PC
   #ifndef _STACK_CONFIG_H
   #error "stack_config.h should be included before tst_config.h"
   #endif

#else
   #include "kal_trace.h"
#endif /* GEN_FOR_PC */


#ifndef _KAL_TRACE_H
   #error "kal_trace.h should be included before tst_trace.h"
#endif

#else /* BTMTK_ON_WISE */
#include "bt_adp_log.h"
#endif  /* BTMTK_ON_WISE */

#define BT_TRACE_FUNC TRACE_FUNC  
#define BT_TRACE_STATE TRACE_STATE
#define BT_TRACE_INFO TRACE_INFO                /* */
#define BT_TRACE_WARNING TRACE_WARNING          /* */
#define BT_TRACE_ERROR 	 TRACE_ERROR            /* FAULT ERROR */
#define BT_TRACE_G1_PROTOCOL TRACE_GROUP_1      /* L2CAP/SDP/RFCOMM */
#define BT_TRACE_G2_PROFILES TRACE_GROUP_2      /* HID/DI/PAN */
#define BT_TRACE_G3_TRAN TRACE_GROUP_3          /* Transport layer */
#define BT_TRACE_G4_SPP TRACE_GROUP_4           /* SPP/DUN */
#define BT_TRACE_G5_HF TRACE_GROUP_5            /* HF/HS */
#define BT_TRACE_G6_OBEX TRACE_GROUP_6          /* OBEX/OPP/FTP */
#define BT_TRACE_G7_A2DP TRACE_GROUP_7          /* A2DP */
#define BT_TRACE_G7_GAVDP TRACE_GROUP_7        /* GAVDP */      
#define BT_TRACE_G8_AVRCP TRACE_GROUP_8         /* AVRCP */
#define BT_TRACE_G9_BPP TRACE_GROUP_9  	        /* BIP/BPP/PBAP/MAP */
#define BT_TRACE_G10_RESERVED TRACE_GROUP_10    
#define BT_TRACE_JSR82_GROUP   TRACE_GROUP_10   /* JSR82 */ 

/* FUNC */
#define BT_FUNC_ENTRY_LOG(TAG)                kal_trace(TRACE_FUNC, TAG)
#define BT_FUNC_ENTRY_LOG1(TAG, ARG1)         kal_trace(TRACE_FUNC, TAG, (ARG1))
#define BT_FUNC_ENTRY_LOG2(TAG, ARG1, ARG2)   kal_trace(TRACE_FUNC, TAG, (ARG1), (ARG2))

/* STATE */
#define BT_STATE_LOG(state)            			kal_trace(TRACE_STATE, BT_CM_STATE_STATE, (state))
#define BT_REGISTER_STATE_LOG(state)          kal_trace(TRACE_STATE, BT_REGISTER_STATE, (state))

/* INFO */
#define BT_INFO_LOG(TAG)                      kal_trace(TRACE_INFO, TAG)

/* WARNNING */
#define BT_WARNING_LOG(TAG)                   kal_trace(TRACE_WARNING, TAG)
#define BT_WARNING_LOG1(TAG, ARG1)            kal_trace(TRACE_WARNING, TAG, (ARG1))
#define BT_WARNING_LOG2(TAG, ARG1,ARG2)       kal_trace(TRACE_WARNING, TAG, (ARG1),(ARG2))
#define BT_WARNING_LOG3(TAG, ARG1,ARG2,ARG3)  kal_trace(TRACE_WARNING, TAG, (ARG1),(ARG2),(ARG3))
                       
/* ERROR */
#define BT_ERROR_LOG(TAG)                     kal_trace(TRACE_ERROR, TAG)
#define BT_ERROR_LOG1(TAG,ARG1)               kal_trace(TRACE_ERROR, TAG, (ARG1))
#define BT_ERROR_LOG2(TAG,ARG1,ARG2)          kal_trace(TRACE_ERROR, TAG, (ARG1), (ARG2))

/* general */
#define BT_TRACE(args) kal_lib_trace args

/* BIP*/
#define BT_BIP_FUNC_ENTRY(TAG)    kal_trace(BT_TRACE_G6_OBEX, TAG)
#define BT_BIP_FUNC_ENTRY1(TAG, ARG1)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1))
#define BT_BIP_FUNC_ENTRY2(TAG, ARG1, ARG2)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1), (ARG2))
#define BT_BIP_FUNC_ENTRY3(TAG, ARG1, ARG2, ARG3)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1), (ARG2), (ARG3))
#define BT_BIP_FUNC_ENTRY4(TAG, ARG1, ARG2, ARG3, ARG4)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1), (ARG2), (ARG3), (ARG4))
#define BT_BIP_FUNC_ENTRY5(TAG, ARG1, ARG2, ARG3, ARG4, ARG5)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1), (ARG2), (ARG3), (ARG4), (ARG5))
#define BT_BIP_FUNC_ENTRY6(TAG, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1), (ARG2), (ARG3), (ARG4), (ARG5), (ARG6))
#define BT_BIP_I_STATE(ARG1)    kal_trace(BT_TRACE_G6_OBEX, BT_BIP_PRINT_I_STATE, (ARG1))
#define BT_BIP_I_STATE_TRANS(ARG1, ARG2) kal_trace(BT_TRACE_G6_OBEX, BT_BIP_PRINT_I_STATE_TRANS, (ARG1), (ARG2))
#define BT_BIP_R_STATE(ARG1)    kal_trace(BT_TRACE_G6_OBEX, BT_BIP_PRINT_R_STATE, (ARG1))
#define BT_BIP_R_STATE_TRANS(ARG1, ARG2) kal_trace(BT_TRACE_G6_OBEX, BT_BIP_PRINT_R_STATE_TRANS, (ARG1), (ARG2))
#define BT_BIP_LOG(TAG) kal_trace(BT_TRACE_G6_OBEX, TAG)
#define BT_BIP_LOG1(TAG, ARG1) kal_trace(BT_TRACE_G6_OBEX, TAG, ARG1)
#define BT_BIP_LOG2(TAG, ARG1, ARG2) kal_trace(BT_TRACE_G6_OBEX, TAG, ARG1, ARG2)
#define BT_BIP_LOG3(TAG, ARG1, ARG2, ARG3) kal_trace(BT_TRACE_G6_OBEX, TAG, ARG1, ARG2, ARG3)


/* CSJ_PBAP */
#define BT_PBAP_LOG(TAG)    kal_trace(BT_TRACE_G6_OBEX, TAG)
#define BT_PBAP_LOG1(TAG, ARG1)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1))
#define BT_PBAP_LOG2(TAG, ARG1, ARG2)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1), (ARG2))
#define BT_PBAP_LOG3(TAG, ARG1, ARG2, ARG3)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1), (ARG2), (ARG3))
#define BT_PBAP_LOG4(TAG, ARG1, ARG2, ARG3, ARG4)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1), (ARG2), (ARG3), (ARG4))
#define BT_PBAP_LOG5(TAG, ARG1, ARG2, ARG3, ARG4, ARG5)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1), (ARG2), (ARG3), (ARG4), (ARG5))
#define BT_PBAP_LOG6(TAG, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6)    kal_trace(BT_TRACE_G6_OBEX, TAG, (ARG1), (ARG2), (ARG3), (ARG4), (ARG5), (ARG6))
#define BT_PBAP_STATE_LOG(ARG1)    kal_trace(BT_TRACE_G6_OBEX, BT_PBAP_SERVER_STATE_LOG, (ARG1))
#define BT_PBAP_STATE_TRANS_LOG(ARG1, ARG2) kal_trace(BT_TRACE_G6_OBEX, BT_PBAP_SERVER_STATE_TRANS_LOG, (ARG1), (ARG2))

/* BPP*/
#define BT_BPP_FUNC_ENTRY(TAG)    kal_trace(BT_TRACE_G9_BPP, TAG)
#define BT_BPP_FUNC_ENTRY1(TAG, ARG1)    kal_trace(BT_TRACE_G9_BPP, TAG, (ARG1))
#define BT_BPP_FUNC_ENTRY2(TAG, ARG1, ARG2)    kal_trace(BT_TRACE_G9_BPP, TAG, (ARG1), (ARG2))
#define BT_BPP_FUNC_ENTRY3(TAG, ARG1, ARG2, ARG3)    kal_trace(BT_TRACE_G9_BPP, TAG, (ARG1), (ARG2), (ARG3))
#define BT_BPP_FUNC_ENTRY4(TAG, ARG1, ARG2, ARG3, ARG4)    kal_trace(BT_TRACE_G9_BPP, TAG, (ARG1), (ARG2), (ARG3), (ARG4))
#define BT_BPP_FUNC_ENTRY5(TAG, ARG1, ARG2, ARG3, ARG4, ARG5)    kal_trace(BT_TRACE_G9_BPP, TAG, (ARG1), (ARG2), (ARG3), (ARG4), (ARG5))
#define BT_BPP_FUNC_ENTRY6(TAG, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6)    kal_trace(BT_TRACE_G9_BPP, TAG, (ARG1), (ARG2), (ARG3), (ARG4), (ARG5), (ARG6))
#define BT_BPP_STATE(ARG1)    kal_trace(BT_TRACE_G9_BPP, BT_BPP_PRINT_STATE, (ARG1))
#define BT_BPP_STATE_TRANS(ARG1, ARG2) kal_trace(BT_TRACE_G9_BPP, BT_BPP_PRINT_STATE_TRANS, (ARG1), (ARG2))
#define BPP_TRACE_ERROR         BT_TRACE_ERROR
#define BPP_TRACE_WARNING       BT_TRACE_WARNING
#define BPP_TRACE_INFO          BT_TRACE_INFO

#define BT_BPP_TRACE_ERROR(TAG)                     kal_trace(BT_TRACE_G9_BPP, TAG)
#define BT_BPP_TRACE_ERROR_ARG1(TAG,ARG1)           kal_trace(BT_TRACE_G9_BPP, TAG,(ARG1))
#define BT_BPP_TRACE_ERROR_ARG2(TAG,ARG1,ARG2)      kal_trace(BT_TRACE_G9_BPP, TAG,(ARG1),(ARG2))     

#define BT_BPP_TRACE_WARNING(TAG)                   kal_trace(BT_TRACE_G9_BPP, TAG)
#define BT_BPP_TRACE_WARNING_ARG1(TAG,ARG1)         kal_trace(BT_TRACE_G9_BPP, TAG,(ARG1))

#define BT_BPP_TRACE_INFO(TAG)                      kal_trace(BT_TRACE_G9_BPP, TAG)
#define BT_BPP_TRACE_INFO_ARG1(TAG,ARG1)            kal_trace(BT_TRACE_G9_BPP, TAG,(ARG1))
#define BT_BPP_TRACE_INFO_ARG2(TAG,ARG1,ARG2)       kal_trace(BT_TRACE_G9_BPP, TAG,(ARG1),(ARG2))  
#define BT_BPP_TRACE_INFO_ARG3(TAG,ARG1,ARG2,ARG3)       kal_trace(BT_TRACE_G9_BPP, TAG,(ARG1),(ARG2),(ARG3))     
#define BT_BPP_TRACE_INFO_ARG4(TAG,ARG1,ARG2,ARG3,ARG4)       kal_trace(BT_TRACE_G9_BPP, TAG,(ARG1),(ARG2),(ARG3),(ARG4))     

/* A2DP */
#define BT_A2DP_FUNC_ENTRY(TAG)    kal_trace(BT_TRACE_G7_A2DP, TAG)
#define BT_A2DP_FUNC_ENTRY1(TAG, ARG1)    kal_trace(BT_TRACE_G7_A2DP, TAG, (ARG1))
#define BT_A2DP_FUNC_ENTRY2(TAG, ARG1, ARG2)    kal_trace(BT_TRACE_G7_A2DP, TAG, (ARG1), (ARG2))
#define BT_A2DP_FUNC_ENTRY3(TAG, ARG1, ARG2, ARG3)    kal_trace(BT_TRACE_G7_A2DP, TAG, (ARG1), (ARG2), (ARG3))
#define BT_A2DP_FUNC_ENTRY4(TAG, ARG1, ARG2, ARG3, ARG4)    kal_trace(BT_TRACE_G7_A2DP, TAG, (ARG1), (ARG2), (ARG3), (ARG4))
#define BT_A2DP_FUNC_ENTRY5(TAG, ARG1, ARG2, ARG3, ARG4, ARG5)    kal_trace(BT_TRACE_G7_A2DP, TAG, (ARG1), (ARG2), (ARG3), (ARG4), (ARG5))
#define BT_A2DP_FUNC_ENTRY6(TAG, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6)    kal_trace(BT_TRACE_G7_A2DP, TAG, (ARG1), (ARG2), (ARG3), (ARG4), (ARG5), (ARG6))

#define BT_A2DP_STATE_TRACE(ARG1)    kal_trace(BT_TRACE_G7_A2DP, BT_A2DP_PRINT_STATE, (ARG1))

#define BT_A2DP_VAL_TRACE1(ARG1)    kal_trace(BT_TRACE_G7_A2DP, BT_A2DP_PRINT_VALUE1, (ARG1))
#define BT_A2DP_VAL_TRACE2(ARG1, ARG2)    kal_trace(BT_TRACE_G7_A2DP, BT_A2DP_PRINT_VALUE2, (ARG1), (ARG2))
#define BT_A2DP_VAL_TRACE3(ARG1, ARG2, ARG3)    kal_trace(BT_TRACE_G7_A2DP, BT_A2DP_PRINT_VALUE3, (ARG1), (ARG2), (ARG3))
#define BT_A2DP_VAL_TRACE4(ARG1, ARG2, ARG3, ARG4)    kal_trace(BT_TRACE_G7_A2DP, BT_A2DP_PRINT_VALUE4, (ARG1), (ARG2), (ARG3), (ARG4))
#define BT_A2DP_VAL_TRACE5(ARG1, ARG2, ARG3, ARG4, ARG5)    kal_trace(BT_TRACE_G7_A2DP, BT_A2DP_PRINT_VALUE5, (ARG1), (ARG2), (ARG3), (ARG4), (ARG5))
#define BT_A2DP_VAL_TRACE6(ARG1, ARG2, ARG3, ARG4, ARG5, ARG6)    kal_trace(BT_TRACE_G7_A2DP, BT_A2DP_PRINT_VALUE6, (ARG1), (ARG2), (ARG3), (ARG4), (ARG5), (ARG6))

#define BT_A2DP_ENTER_STATE(_s_) BT_A2DP_STATE_TRACE(_s_);\
                  (bt_a2dp_ctx.state = _s_)



BEGIN_TRACE_MAP(MOD_BT)

   /* 
    * TRACE_FUNC trace class 
    */
/* STACK TRACE START */
    TRC_MSG(BT_SEC_ACCESS_REQ_FIND_ONE,"BT_LOG_SEC_Access_Req Find a matched security record")
    TRC_MSG(BT_LOG_SEC_ACCESS_REQ_TOKEN_LEVEL,"BT_LOG_SEC_Access_Req: case=0x%02x tok_level=0x%02x")
    TRC_MSG(BT_LOG_BTBM_AUTH_CFM_DEL_DEV_RECORD_STATUS,"BtbmAuthenticatedCfm():Delete Device Record status=%d")
    /* AVTP */
    TRC_MSG( BT_AVTP_TX_TIMEOUT, "AVTP:  TX Timeout and aclTxPacketsLeft=%d" )     
    /* DDB4W */
    TRC_MSG( BT_DDB4W_DB_NOT_EXIST, "DeviceDB: Device Database file does not exist" )     
    TRC_MSG( BT_DDB4W_DB_OPENED, "DeviceDB: Device database file opened" )     
    TRC_MSG( BT_DDB4W_DB_NUMBER, "DeviceDB: Database contains %d records" )     
    TRC_MSG( BT_DDB4W_DB_FLUSHED, "DeviceDB: DDB FLUSH" )     
    TRC_MSG( BT_DDB4W_DB_NUMBER_WRITE, "DeviceDB: Database write %d records" )     
    TRC_MSG( BT_DDB4W_DB_SAVEING_ERROR, "DeviceDB: DDB Saving error:%d" )     
    TRC_MSG( BT_DDB4W_DB_FIND_RECORD, "DeviceDB: DDB find record:%02x,%02x,%02x" )     
    TRC_MSG( BT_DDB4W_DB_STORED_RECORD, "DeviceDB: DDB stored record:%02x,%02x,%02x" )
    TRC_MSG( BT_DDB4W_DB_LINK_KEY, "DeviceDB: DDB link key:%02x,%02x,%02x,%02x,  %02x,%02x,%02x,%02x,  %02x,%02x,%02x,%02x,  %02x,%02x,%02x,%02x" )         
    TRC_MSG( BT_DDB4W_COD_NOT_EXIST, "DeviceDB: Device Database file does not exist" )     
    TRC_MSG( BT_DDB4W_COD_OPENED, "DeviceDB: COD database file opened" )     
    TRC_MSG( BT_DDB4W_COD_NUMBER, "DeviceDB: COD contains %d records" )     
    TRC_MSG( BT_DDB4W_COD_FLUSHED, "DeviceDB: DDB COD FLUSH" )     
    TRC_MSG( BT_DDB4W_COD_FLUSHED_ERROR, "DeviceDB: DDB COD FLUSH Error" )     
    TRC_MSG( BT_DDB4W_COD_NUMBER_WRITE, "DeviceDB: COD write %d records" )     
    TRC_MSG( BT_DDB4W_COD_SAVEING_ERROR, "DeviceDB: DDB COD Saving error:%d" )     
    TRC_MSG( BT_DDB4W_COD_FIND_RECORD, "DeviceDB: DDB COD find record:%02x,%02x,%02x,%02x" )     
    TRC_MSG( BT_DDB4W_COD_STORED_RECORD, "DeviceDB: DDB COD stored record:%02x,%02x,%02x,%02x" )       
    /* BTBM */
    TRC_MSG( BT_BTBM_ENTER_REJECT_HANDLER, "BTBM Message enter reject handler" )       
    TRC_MSG( BT_BTBM_ERROR_MESSAGE, "BMA Error Message!" )           
    TRC_MSG( BT_BTBM_DISCOVERY_COMPLETE, "Discovery complete with total_num:%02x" )       
    TRC_MSG( BT_BTBM_DISCOVERY_CANCEL, "Discovery cancel with total_num:%02x" )       
    TRC_MSG( BT_BTBM_DISCOVERY_COD, "Discovery result with cod:%08x" )       
    TRC_MSG( BT_BTBM_DISCOVERY_NAME_LEN, "Discovery result with name len:%d" )       
    TRC_MSG( BT_BTBM_DISCOVERY_BDADDR, "Discovery result with bdaddr:%08x, %02x, %08x" )           
    TRC_MSG( BT_BTBM_POWEROFF, "BTBM Send Power Off msg" )    
    TRC_MSG( BT_BTBM_TIMEOUT, "BTBMTimerHandler timeout" )           
    TRC_MSG( BT_BTBM_TIMESTART, "BTBMTimerStart" )           
    TRC_MSG( BT_BTBM_TIMECANCEL, "BTBMTimerCancel" )    
    TRC_MSG( BT_BTBM_PREVIOUS_ONGOING, "Prevous operation is ongoing, activity is 0x%02x" ) 
    TRC_MSG( BT_BTBM_DEVICE_MOTO820, "Remote Device MOTO820" ) 
    TRC_MSG( BT_BTBM_DEVICE_WI_REVO, "Remote Device WI_REVO" ) 
    TRC_MSG( BT_BTBM_DEVICE_HP, "Remote Device HP" ) 
    TRC_MSG( BT_BTBM_DEVICE_GENERAL, "Remote Device General" ) 
    TRC_MSG( BT_BTBM_INQUIRY_CMD, "Inq cmd cod:%08x, type:%08x,number:%08x" ) 
    TRC_MSG( BT_BTBM_NAMEREQ_BDADDR, "Name Req bdaddr:%02x, %02x, %02x" )           
    TRC_MSG( BT_BTBM_RESTORE_ERROR, "Restore setting error" ) 
    TRC_MSG( BT_BTBM_DISCONNECT_ALL_LINK, "BTBM will disconnect all link" ) 
    TRC_MSG( BT_BTBM_SHOW_BDADDR, "Bdaddr:%02x, %02x, %02x" )           
    TRC_MSG( BT_BTBM_CON_ALLOCATED_RELEASE, "BTBM Conn Allocated. release it!" ) 
    TRC_MSG( BT_BTBM_CON_NOT_ALLOCATED_RELEASE, "BTBM Conn not Allocated,can not release" ) 
    TRC_MSG( BT_BTBM_CON_RELEASE_VALUE_LARGE, "BTBM Conn Release index larger than max value" ) 
    TRC_MSG( BT_BTBM_DUMMY_LINK_CONN_REQ, "DummyLinkCallback BTEVENT_LINK_CONNECT_REQ" ) 
    TRC_MSG( BT_BTBM_LINK_CONN_REQ, "BTEVENT_LINK_CONNECT_REQ" )     
    TRC_MSG( BT_BTBM_RUN_MULTIPLE_NAME_QUERY, "btbmMultipleNameQuery" )         
    TRC_MSG( BT_BTBM_NAME_REQ, "btbmUtilNameReq: token=%d" )
    TRC_MSG( BTLOG_DEVICE_IN_CONNECTING_MOD, "Device in connecting mode, ignore the name req" )         
    TRC_MSG( BT_BTBM_UNABLE_TO_GET_NAME, "Unable to get the name for device" )          
    TRC_MSG( BT_BTBM_NAME_SEARCH_COMPLETED, "name search completed" )              
    TRC_MSG( BT_BTBM_NAME_SEARCH_CANCELED, "name search canceled" )
    TRC_MSG( BT_BTBM_PSI_INFO_NOT_IN_DDB, "PSI information not in DB" )
    TRC_MSG( BT_BTBM_NOT_AUTH_NAME_FAILED, "Search remote name failed in btbmHandlerRemoteNameQueryAtNoAuthEnabled" )
    TRC_MSG( BT_BTBM_REMOTE_NAME, "Name in char:%c" )
    TRC_MSG( BT_BTBM_LINK_EXISTS_CONFIRM, "link exists, WriteConfirm" )
    TRC_MSG( BT_BTBM_MATCH_COD,"btbmMatchCoD: filter=0x%x, cod=0x%x" )
    TRC_MSG( BT_BTBM_INQ_RESULT_TOO_MUCH, "MTK BTBM Inquiry result number larger than MMI assigned number" )
    TRC_MSG( BT_BTBM_ADD_INQUIRED_DEVICE, "btbmUtilAddInquiredDevice")
    TRC_MSG( BT_BTBM_ADD_INQUIRED_DEVICE_DUPLICATE, "btbmUtilAddInquiredDevice: duplicate device")
    TRC_MSG( BT_BTBM_INQ_RESULT_DDB_FULL, "MTK BTBM Inquiry result with DB %d full. return" )
    TRC_MSG( BT_BTBM_INQ_COMPLETED, "MTKBTBM Inquiry complete" )
    TRC_MSG( BT_BTBM_INQ_NO_TIME_NAME_QUERY, "We don't still have time to do the name discovery" )
    TRC_MSG( BT_BTBM_LINK_DEVICE_TABLE_FULL, "DevRemNameTbl is full in BTBMGetFreeEntryFromDevRemoteNameTbl()" )
    TRC_MSG( BT_BTBM_LINK_FREE_TABLE_ENTRY, "Free an entry from DevRemNameTbl" )
    TRC_MSG( BT_BTBM_EVENT_CONNECT_IND, "MTKBTBM BTEVENT_LINK_CONNECT_IND" )
    TRC_MSG( BT_BTBM_EVENT_CONNECT_IND_LEVEL3, "MTKBTBM BTEVENT_LINK_CONNECT_IND BSM_SEC_LEVEL_3" )
    TRC_MSG( BT_BTBM_FORCE_DISCONNECT, "MTKBTBM Force Disconnect" )
    TRC_MSG( BT_BTBM_CONNECT_FAILED, "Connect Failed" )
    TRC_MSG( BT_BTBM_EVENT_CONNECT_CNF, "MTKBTBM BTEVENT_LINK_CONNECT_CNF" )
    TRC_MSG( BT_BTBM_CHANGE_NAME_SUCCESS, "Local Name change success" )
    TRC_MSG( BT_BTBM_PIN_CODE_REQ, "MTKBTBM BTEVENT_PIN_REQ:%02x" )
    TRC_MSG( BT_BTBM_BONDING_PIN_REQ, "MTKBTBM BM_BONDING_PINCODE_REQ" )
    TRC_MSG( BT_BTBM_BDC_IS_ZERO, "(bdc ==0)" )
    TRC_MSG( BT_BTBM_PIN_REJECT, "MTKBTBM Pin Reject" )
    TRC_MSG( BT_BTBM_OP_NONE_REJECT_BMOPACTIVITY, "MTKBTBM BM_OP_NONE Pin Reject bm_opactivity=0x%02x" )
    TRC_MSG( BT_BTBM_REMOTE_PIN_REQ, "MTK BTBM remote device Pin request" )
    TRC_MSG( BT_BTBM_EVENT_PAIRING_COMPLETED, "MTKBTBM BTEVENT_PAIRING_COMPLETE %08x,%08x,%02x,%02x," )
    TRC_MSG( BT_BTBM_PAIRING_WRONG_TIME, "MTKBTBM PAIRING in wrong timing, delete the stored link key" )
    TRC_MSG( BT_BTBM_EVENT_AUTHENTICATION_CNF, "MTKBTBM BTEVENT_AUTHENTICATE_CNF" )
    TRC_MSG( BT_BTBM_BONDING_CANCELED, "No link exists, BM_BONDING_CANCELED" )    
    TRC_MSG( BT_BTBM_EVENT_INQ_CANCELED, "MTKBTBM BTEVENT_INQUIRY_CANCELED" )    
    TRC_MSG( BT_BTBM_LINK_AS_MASTER, "MTKBTBM Put link as master" )    
    TRC_MSG( BT_BTBM_START_NAMETOKEN, "Start anothe NameTok2 req" )    
    TRC_MSG( BT_BTBM_FREE_NAME_ENTRY_FAILED, "Entry not on list, free failed" )    
    TRC_MSG( BT_BTBM_DISCONNECT_LINK, "Try to disconnect" )    
    /* GAP TESTER */    
    TRC_MSG( BT_GAPTS_INIT, "GAP tester Init" )        
    TRC_MSG( BT_GAPTS_NONDISCOVERY, "GAP tester Nondiscovery" )   
    TRC_MSG( BT_GAPTS_LIMITEDDISCOVERY, "GAP tester Limited discovery" )   
    TRC_MSG( BT_GAPTS_GENERALDISCOVERY, "GAP tester General discovery" ) 
    TRC_MSG( BT_GAPTS_NONCONNECTABLE, "GAP tester Non Connected" ) 
    TRC_MSG( BT_GAPTS_NONPAIRED, "GAP tester Non Paired" )    
    TRC_MSG( BT_GAPTS_PAIRED, "GAP tester Paired" )    
    TRC_MSG( BT_GAPTS_SECLEVEL1, "GAP tester Sec Level1" )   
    TRC_MSG( BT_GAPTS_SECLEVEL2, "GAP tester Sec Level2" )   
    TRC_MSG( BT_GAPTS_SECLEVEL3, "GAP tester Sec Level3" )       
    TRC_MSG( BT_GAPTS_LIMITEDINQUIRY, "GAP tester Limited inquiry" )   
    TRC_MSG( BT_GAPTS_GENERALINQUIRY, "GAP tester General inquiry" ) 
    TRC_MSG( BT_GAPTS_DEVICEDISCOVERY, "GAP tester Device discovery" )     
    TRC_MSG( BT_GAPTS_BONDING, "GAP tester Device bonding" )     
    TRC_MSG( BT_GAPTS_DELETEKEY, "GAP tester Delete link key" ) 
    TRC_MSG( BT_GAPTS_CREATELINK, "GAP tester create link" )     
    TRC_MSG( BT_GAPTS_CREATECHNL, "GAP tester create channel" )     
    TRC_MSG( BT_GAPTS_NAME_LEN, "Name len:%d" )       
    TRC_MSG( BT_GAPTS_DISCOVERY_BDADDR, "Discovery result with bdaddr:%08x, %02x, %08x, cod:%08x" )           
    TRC_MSG( BT_GAPTS_DISCOVERY_COMPLETE, "Discovery complete result:%02x with total_num:%02x" )       
    TRC_MSG( BT_GAPTS_DISCOVERY_CANCEL, "Discovery cancel result:%02x with total_num:%02x" )       
    TRC_MSG( BT_GAPTS_WRITE_LOCAL_NAME, "Write Local Name result:%02x" )       
    TRC_MSG( BT_GAPTS_BDADDR, "Bdaddr:%08x, %02x, %08x" )           
    TRC_MSG( BT_GAPTS_DISCOVERY_RESULT_NAME_LEN, "Discovery result :%02x with name len:%d" )   
    TRC_MSG( BT_GAPTS_DISCOVERY_NAME_CHAR, "Name char :%02x" )   
    TRC_MSG( BT_GAPTS_BONDING_CNF_RESULT, "Bonding cfm result:%02x" )   
    TRC_MSG( BT_GAPTS_BONDING_RESULT_IND, "Bonding result ind:%02x, cod:%08x" )   
    TRC_MSG( BT_GAPTS_READ_WRITESCAN_RESULT, "Read WriteScan result:%02x, modeA:%02x, modeB:%02x" )   
    TRC_MSG( BT_GAPTS_SET_WRITESCAN_RESULT, "Set WriteScan result:%02x" )   
    TRC_MSG( BT_GAPTS_SAVE_SETTING_RESULT, "Save Setting cnf result:%02x" )   
    TRC_MSG( BT_GAPTS_RESTORE_SETTING_RESULT, "Restore Setting cnf result:%02x" )   
    TRC_MSG( BT_GAPTS_DELETE_TRUST_RESULT, "Delete Trust List cnf result:%02x" )   
    TRC_MSG( BT_GAPTS_BONDING_CANCEL_RESULT, "Bonding cancel result:%02x" )   
    TRC_MSG( BT_GAPTS_PAIRING_CANCEL_RESULT, "Pairing cancel result:%02x" )   
    TRC_MSG( BT_GAPTS_SUPPORTED_UUID, "Supported UUID:%04x" )   
    TRC_MSG( BT_GAPTS_SEARCHED_COMPLETE_RESULT, "SDP service search result:%02x, number:%02x" )   
    TRC_MSG( BT_GAPTS_READ_LOCAL_COD_RESULT, "Read Local COD result:%02x, cod:%08x" )   
    TRC_MSG( BT_GAPTS_SET_AUTHENTICATION_RESULT, "Set enter authentication result:%02x" )   
    TRC_MSG( BT_GAPTS_READ_LOCAL_ADDR_RESULT, "Read local addr result:%02x" )       
    TRC_MSG(GAP_TESTER_SET_TO_GENERAL_INQUIRY,"gap tester set to general inquiry")
    /* ME*/
    TRC_MSG( BT_ME_CREATELINK_CASE,"BT_LOG_ME_CreateLink_case=%d")
    TRC_MSG( BT_ME_EVENT, "ME rx event :%02x" ) 
    TRC_MSG( BT_ME_NO_EVENT_HDL, "ME: HCI Handle event with no task handler, event = %02x" ) 
    TRC_MSG( BT_ME_INQUIRY_COMPLETE, "ME Report Inquiry Completed" ) 
    TRC_MSG( BT_ME_INQUIRY_CANCELED, "ME Report Inquiry Canceled" )     
    TRC_MSG( BT_ME_READ_ADDR, "MeCon: Automatic Read BD_ADDR command" )     
    TRC_MSG( BT_ME_OPEN_DDB_FAILED, "ME: DDB_Open failed" )  
    TRC_MSG( BT_ME_WRITE_PAGE_TIMEOUT, "ME: RadioParms wrote page timeout" )  
    TRC_MSG( BT_ME_STORE_PAGE_TIMEOUT, "ME: RadioParms store page timeout:%08x" )  
    TRC_MSG( BT_ME_READ_VERSION_INFO, "ME: Received Bluetooth version info" )  
    TRC_MSG( BT_ME_RECEIVED_FEATURE_INFO, "ME: Received Bluetooth features info" )  
    TRC_MSG( BT_ME_STORING_ADDR, "ME: RadioParms storing BD_ADDR." )  
    TRC_MSG( BT_ME_ERROR_CODE, "ME: RadioParms error opcode = %02x, errCode = %02x" )  
    TRC_MSG( BT_ME_WAIT_PENDING_CMD, "ME: Waiting for pending commands" )  

    TRC_MSG(IN_TEST_MODE_RFEVENT_OPEN_CALL_MECHANGEPACKETTYPE,"In test mode RFEVENT_OPEN: call MeChangePacketType()")
    TRC_MSG(SEND_GROUP_DATA,"Send Group Data")
    TRC_MSG(RADIOMGR_TRANSPORT_INITIALIZED,"RADIOMGR:  Transport initialized")
    TRC_MSG(MESEC_RECEIVED_PIN_CODE_REQUEST_EVENT,"MeSec: Received Pin Code Request Event")
    TRC_MSG(MESCO_SCO_CONNECTION_COMPLETE_HCIHANDLE__xX,"MeSco: SCO Connection Complete hciHandle=0x%x")
    TRC_MSG(MEACC_INQSCANACTIVITY_COMPLETE,"MeAcc: InqScanActivity complete")
    TRC_MSG(RADIOMGR_RADIO_INITIALIZED,"RADIOMGR:  Radio initialized")
    TRC_MSG(MESEC_KEY_EXISTS__SENDING_LINK_KEY_REQUEST_REPLY_COMMAND,"MeSec: Key exists - sending Link Key Request Reply command")
    TRC_MSG(RADIOMGR_TRANSPORT_IS_DOWN,"RADIOMGR:  Transport is down")
    TRC_MSG(MESEC_SENDING_ENCYRPTION_MODE_COMMAND,"MeSec: Sending encyrption mode command")
    TRC_MSG(ME_START_OPERATION_BUSY, "MeStartOperation() HCI command busy")
    TRC_MSG(ME_START_OPERATION, "MeStartOperation(): curOp = 0x%x")
    TRC_MSG(ME_START_OPERATION_FAIL_STATE, "MeStartOperation() busy, stackState = %d, curOp = 0x%x")
    TRC_MSG(ME_INQUIRY_OPERATION_COMPLETED_WITH_ERROR__xX,"ME: Inquiry operation completed with error=0x%x")
    TRC_MSG(MECON_SETTING_ERROR_FOR_LINK_REJECT_OLD_ERROR__0XxX,"MeCon: Setting error for link reject. Old error = 0x%x")
    TRC_MSG(MESEC_REMOTE_DEVICE_PERFORMING_AUTHENTICATION,"MeSec: remote device performing authentication")
    TRC_MSG(SCO_CONNECTION_RSULT_BT_DEBUGx02X,"SCO connection result:%02x")
    TRC_MSG(MESEC_ENABLING_AUTHENTICATION_FOR_ALL_CONNECTIONS,"MeSec: Enabling Authentication for all connections")
    TRC_MSG(SNIFF_END,"sniff end")
    TRC_MSG(MESEC_HANDLESECURITYCOMMANDCOMPLETE_OPCODE_MISMATCHOPCODE__xX_CURTASK__xX,"MeSec: HandleSecurityCommandComplete opcode mismatchopcode=0x%x, curTask=0x%x")
    TRC_MSG(EVENT_0XFCC1,"event 0xFCC1")
    TRC_MSG(ME_SET_HCI_EVENT_MASK_COMPLETED_STATUS__xX,"ME: Set Hci Event Mask completed status=0x%x")
    TRC_MSG(MESEC_CREATING_OPERATION_FOR_LINK_KEY_RESPONSE,"MeSec: Creating operation for link key response")
    TRC_MSG(MECON_ACL_CONNECT_COMPLETE_INTERNAL_REJECT,"MeCon: ACL Connect Complete internal reject")
    TRC_MSG(RADIOMGR_RMGRHCICALLBACK_VALID_EVENT,"RADIOMGR:  RmgrHciCallback: valid event.")
    TRC_MSG(MESEC_SENDING_AUTHENTICATION_ENABLE_COMMAND,"MeSec: Sending Authentication enable command")
    TRC_MSG(ME_MEHANDLECOMPLETETASK_OPCODE_MISMATCH_OPCODE__xX_CURTASK__xX,"ME: MeHandleCompleteTask opcode mismatch opcode=0x%x, curTask=0x%x")
    TRC_MSG(SNIFF_REQ,"sniff req")
    TRC_MSG(MESCO_VOICESETTINGS_DONE_STATUS_xX,"MeSco: VoiceSettings done. Status=0x%x")
    TRC_MSG(RADIOMGR_BEGINNING_INITIALIZATION,"RADIOMGR:  Beginning Initialization")
    TRC_MSG(FLUSH_OCCURED,"flush occured")
    TRC_MSG(RADIOMGR_RESET_FAILED,"RADIOMGR:  Reset failed")
    TRC_MSG(MESEC_NUM_LINK_KEYS__xD_BDADDR_xX_xX_xX_xX_xX_xX,"MeSec: num link keys =%d, bdaddr=0x%x %x %x %x %x %x")
    TRC_MSG(MESEC_ACCESS_REQUEST_NEEDS_ENCRYPTION,"MeSec: Access request needs encryption")
    TRC_MSG(STARTING_RTXBT_DEBUGx04X,"Starting RTX(%04x)")
    TRC_MSG(BOP_SWITCH_ROLE_IS_REPORTED_AS_ROLExD,"BOP_SWITCH_ROLE is reported as role=%d")
    TRC_MSG(MESEC_SECURITY_TOKEN_LIST_IS_EMPTY,"MeSec: Security token list is empty")
    TRC_MSG(FORCEDISCONNECT,"!forceDisconnect")
    TRC_MSG(MESEC_STARTING_AUTHENTICATION_REQUESTED_COMMAND,"MeSec: Starting Authentication_Requested command")
    TRC_MSG(MECON_EXIT_PARK_MODE_TO_HCIHANDLE_xX,"MeCon: Exit Park mode to hciHandle=0x%x")
    TRC_MSG(MESEC_DISABLING_AUTHENTICATION_FOR_ALL_CONNECTIONS,"MeSec: Disabling Authentication for all connections")
    TRC_MSG(POWER_OFF_REJECT_IT,"Power off, reject it")
    TRC_MSG(MESEC_RECEIVED_AUTHENTICATE_COMPLETE_EVENT_ERR__xD,"MeSec: Received Authenticate Complete event. err = 0x%02x")
    TRC_MSG(MECON_RECEIVED_SCO_CONNECT_REQUEST,"MeCon: Received SCO Connect Request")
    TRC_MSG(MESEC_RECEIVED_ENCRYPTION_CHANGE_ERR__xD,"MeSec: Received encryption change err = 0x%02x")
    TRC_MSG(ME_EXIT_SNIFF_MODE_OPERATION_ERROR_STATUS__xX,"ME: Exit Sniff mode operation error. Status=0x%x")
    TRC_MSG(MECONLINKREJECTERROR__xX,"MeCon:LinkRejectError=0x%x")
    TRC_MSG(MECON_STARTING_LOCAL_NAME_CHANGE_COMMAND_LEN__xD,"MeCon: Starting Local name change command, len = %d")
    TRC_MSG(MEACC_AUTO_ACCESS_MODE_SWITCH_ON_FIRST_CONNECT__NO_OP_ON_QUEUE,"MeAcc: Auto access mode switch on first connect - no op on queue")
    TRC_MSG(MECON_STARTING_DISCONNECT_TO_HCIHANDLE_xX,"MeCon: Starting disconnect to hciHandle=0x%x")
    TRC_MSG(ME_HCI_INIT_COMPLETE_STATUS_xD,"ME: HCI Init complete status: %d")
    TRC_MSG(RXBUFF_INVALID_BUFFER_TYPE_ON_FREE,"RXBUFF:  Invalid buffer type on free")
    TRC_MSG(RADIOMGR_INITIALIZING_TRANSPORT,"RADIOMGR:  Initializing Transport")
    TRC_MSG(WRITESCANxD,"WriteScan:%d")
    TRC_MSG(MECON_DISCONNECT_COMPLETE_EVENT_FOR_HCIHANDLE__xD,"MeCon: Disconnect complete event for hciHandle = %d")
    TRC_MSG(MELINKREADYTOSEND_START_TIMER,"MeLinkReadyToSend Start Timer")
    TRC_MSG(RADIOMGR_TRANSPORT_INIT_FAILED_GIVING_UP,"RADIOMGR:  Transport init failed (giving up)")
    TRC_MSG(MECON_INTERNAL_LINK_REJECT__xX,"MeCon: Internal link reject=0x%x")
    TRC_MSG(MECONLINKACCEPTERROR__xX,"MeCon:LinkAcceptError=0x%x")
    TRC_MSG(MESCO_LINKREJECTERROR__xX,"MeSco: LinkRejectError=0x%x")
    TRC_MSG(MEACC_AUTO_ACCESS_MODE_SWITCH_ON_FIRST_CONNECT__UP_OP_ON_QUEUE,"MeAcc: Auto access mode switch on first connect - up op on queue")
    TRC_MSG(SCO_SENDDATABT_DEBUGx04X_SENT_xD_BYTE_DATA_PACKET,"SCO: SendData(%04x) Sent %d byte Data Packet.")
    TRC_MSG(MESEC_NO_AUTHORIZATION_HANDLE_OR_PREVIOUS_ATTEMPT_FAILED,"MeSec: No authorization handle or previous attempt failed")
    TRC_MSG(ME_LOCAL_NAME_CHANGE_OPERATION_COMPLETED_STATUS__0XxX,"ME: Local Name Change operation completed. Status = 0x%x")
    TRC_MSG(MESEC_DISABLING_ENCRYPTION_FOR_ALL_CONNECTIONS,"MeSec: Disabling Encryption for all connections")
    TRC_MSG(MESEC_NO_PAIRING_HANDLER,"MeSec: No pairing handler")
    TRC_MSG(MECON_MEHANDLELINKDISCONNECTOP_TASK_END_ERRCODE__xX,"MeCon: MeHandleLinkDisconnectOp task End errcode = 0x%x")
    TRC_MSG(MESCO_SETTING_ERROR_FOR_LINK_REJECT_OLD_ERROR__0XxX,"MeSco: Setting error for link reject. Old error = 0x%x")
    TRC_MSG(MESEC_SENDING_PIN_CODE_REQUEST_REPLY_COMMAND,"MeSec: Sending Pin Code Request Reply command")
    TRC_MSG(IN_TEST_MODE_CHANGE_DATA_PKT_TYPE_TO_BAPT_DH3,"In test mode, change data pkt type to BAPT_DH3")
    TRC_MSG(MECON_RECEIVED_ACL_CONNECT_REQUEST,"MeCon: Received ACL Connect Request")
    TRC_MSG(MECON_STARTING_REMOTE_NAME_REQUEST_COMMAND_CLOCK_OFFSET_SR_MODE,"MeCon: Starting Remote name request command, clock offset=0x%02x%02x, SR mode=0x%02x")
    TRC_MSG(MEACC_AUTO_ACCESS_MODE_SWITCH_ON_FIRST_CONNECT__DOWN_OP_ON_QUEUE,"MeAcc: Auto access mode switch on first connect - down op on queue")
    TRC_MSG(MESEC_LINK_KEY_IS_SAVED_DEVICE_TRUSTED,"MeSec: Link key is saved. Device trusted")
    TRC_MSG(STOP5,"stop5")
    TRC_MSG(ME_MEHANDLEDISCOVERROLETASK_OPCODE_MISMATCH_OPCODE__xX_CURTASK__xX,"ME: MeHandleDiscoverRoleTask opcode mismatch opcode=0x%x, curTask=0x%x")
    TRC_MSG(MESCO_ESCO_CONNECTION_CHANGED_HCIHANDLE__xX,"MeSco: eSCO Connection Changed hciHandle=0x%x")
    TRC_MSG(ME_GET_REMOTE_DEVICE_NAME_CANCEL_OPERATION_COMPLETE_STATUS__xX,"ME: Get Remote Device Name Cancel operation complete. Status=0x%x")
    TRC_MSG(ME_WRITE_DEFAULT_LINK_POLICY_OPERATION_COMPLETED_ERROR__0XxX,"ME: Write Default Link Policy operation completed error = 0x%x")
    TRC_MSG(MEACC_STARTING_WRITE_SCAN_ACTIVITY_COMMAND,"MeAcc: Starting Write Scan Activity command")
    TRC_MSG(ME_FORCEDISCONNECTLINKWITHREASONxD,"ME_ForceDisconnectLinkWithReason:%d")
    TRC_MSG(ME_CREATE_LINK_CANCEL_OPERATION_COMPLETE_STATUS__xX,"ME: Create Link Cancel operation complete. Status=0x%x")
    TRC_MSG(MESEC_ADDING_CANCEL_AUTHENTICATION_OPERATION_TO_QUEUE,"MeSec: Adding cancel authentication operation to queue")
    TRC_MSG(ME_SWITCH_ROLE_OPERATION_ERROR_STATUS__xX,"ME: Switch Role operation error. Status=0x%x")
    TRC_MSG(MECON_CHANGE_PACKET_TYPE_TO_HCIHANDLE_xX,"MeCon: Change Packet Type to  hciHandle=0x%x")
    TRC_MSG(ME_HOLD_MODE_OPERATION_ERROR_STATUS__xX,"ME: Hold mode operation error. Status=0x%x")
    TRC_MSG(EVENT_0XFCC0,"event 0xFCC0")
    TRC_MSG(MECACCMODENC_BT_DEBUGx04X,"MEC(accModeNC) :%04X")
    TRC_MSG(MECON_PARK_MODE_TO_HCIHANDLE_xX,"MeCon: Park mode to hciHandle=0x%x")
    TRC_MSG(RADIOMGR_TRANSPORT_SHUTTING_DOWN,"RADIOMGR:  Transport shutting down")
    TRC_MSG(MESEC_ADDING_AUTHORIZE_OPERATION_TO_QUEUE,"MeSec: Adding authorize operation to queue")
    TRC_MSG(MESEC_ADDING_AUTHENTICATE_OPERATION_TO_QUEUE,"MeSec: Adding authenticate operation to queue")
    TRC_MSG(SERIOUS_ERROR,"Serious Error")
    TRC_MSG(COD_NOT_MATCH,"Cod not match")
    TRC_MSG(SET_ME_SETACCESSIBLEMODENCBT_DEBUGx02X,"Set ME_SetAccessibleModeNC:%02x")
    TRC_MSG(MEACC_AUTO_ACCESS_MODE_SWITCH_ON_LAST_DISCONNECT__EXISTING_OP_ON_QUEUE,"MeAcc: Auto access mode switch on last disconnect - existing op on queue")
    TRC_MSG(RADIOMGR_RMGRTRANCALLBACK_xX,"RADIOMGR:  RmgrTranCallback: %#x")
    TRC_MSG(MESEC_SENDING_LINK_KEY_REQUEST_NEGATIVE_REPLY_COMMAND,"MeSec: Sending Link Key Request Negative Reply command")
    TRC_MSG(MESEC_SECPROCESSALLSECURITYTOKENS_REMOVING_TOKEN,"MeSec: SecProcessAllSecurityTokens: removing token")
    TRC_MSG(MESCO_ESCO_CONNECTION_CHANGED_EVENT,"MeSco: eSCO Connection Changed event")
    TRC_MSG(MECON_STARTING_CREATE_LINK_CANCEL_COMMAND,"MeCon: Starting Create Link Cancel command")
    TRC_MSG(MEINQUIRY_RESULT_CLOCKOFFSET__xX,"ME:Inquiry result clockOffset=0x%x")
    TRC_MSG(REMDEV_0,"remDev ==0")
    TRC_MSG(BDCLINKSTATEBT_DEBUGx02X,"bdc->link->state:%02x")
    TRC_MSG(MESEC_REMOTE_DEVICE_PERFORMING_PAIRING,"MeSec: Remote device performing pairing")
    TRC_MSG(MESCO_STARTING_SCO_LINK_TO_ACL_LINK_xX,"MeSco: Starting SCO link to ACL link=0x%x")
    TRC_MSG(MESEC_NO_AUTHORIZATION_HANDLER,"MeSec: No authorization handler")
    TRC_MSG(RADIOMGR_INTIALIZING_RADIO,"RADIOMGR:  Intializing Radio")
    TRC_MSG(MESCO_STARTING_DISCONNECT_TO_SCO_HCIHANDLE_xX,"MeSco: Starting disconnect to SCO hciHandle=0x%x")
    TRC_MSG(RADIOMGR_INITIALIZING_HCI,"RADIOMGR:  Initializing HCI")
    TRC_MSG(MESEC_SECURITY_COMMAND_STATUS_EVENT_RECEIVED_ERR__xX,"MeSec: Security Command status event received. Err=0x%x")
    TRC_MSG(MESEC_SENDING_PIN_CODE_REQUEST_NEGATIVE_REPLY_COMMAND,"MeSec: Sending Pin Code Request Negative Reply command")
    TRC_MSG(MESEC_ACCESS_REQUEST_NEEDS_AUTHENTICATION,"MeSec: Access Request needs authentication")
    TRC_MSG(ISNODEONLISTREMDEVHANDLERS_HANDLERNODE,"IsNodeOnList(&(remDev->handlers), &(handler->node))")
    TRC_MSG(CALLANDREMOVEHANDLERS_1,"CallAndRemoveHandlers 1")
    TRC_MSG(MEACC_PAGESCANACTIVITY_COMPLETE,"MeAcc: PageScanActivity complete")
    TRC_MSG(MEACC_PAGESCANACTIVITY_EVENT,"MeAcc: PageScanActivity event:%02x")
    TRC_MSG(MEACC_PAGESCANACTIVITY_ACTIVITY,"MeAcc: PageScanActivity operation index:%02x")
    TRC_MSG(RADIOMGR_RMGR_RADIOINIT,"RADIOMGR:  RMGR_RadioInit")
    TRC_MSG(MESEC_ENABLING_ENCRYPTION_FOR_ALL_CONNECTIONS,"MeSec: Enabling Encryption for all connections")
    TRC_MSG(MESEC_ERROR_SAVING_LINK_KEY,"MeSec: Error saving link key")
    TRC_MSG(BT_MEIF_SEC_PASSKEYENTRY, "SEC_PasskeyEntry(): accept=%d, passkey=%d")
    TRC_MSG(MODE_CHANGE,"mode change")
    TRC_MSG(CALLANDREMOVEHANDLERS,"CallAndRemoveHandlers")
    TRC_MSG(MESEC_CALLING_PAIRING_HANDLER_INDICATING_PAIRING_COMPLETE,"MeSec: Calling pairing handler indicating pairing complete")
    TRC_MSG(DS_ADDDEVICE_NO_RESOURCE,"DS_AddDevice no resource")
    TRC_MSG(ME_INQUIRY_CANCEL_OPERATION_COMPLETED_ERROR__xX,"ME: Inquiry cancel operation completed error=0x%x")
    TRC_MSG(RELEASE_PREVIOUS_ONE,"Release previous one.")
    TRC_MSG(MEACC_STARTING_WRITE_CURRENT_IAC_LAP,"MeAcc: Starting Write_Current_IAC_LAP")
    TRC_MSG(MEACC_WRITE_SCAN_OP__xD_INT__xD_WIN__xD,"MeAcc: Write Scan op = %d, int = %d, win = %d")
    TRC_MSG(MECON_CONNECTION_COMPLETE_EVENT_STATUS__0XxX,"MeCon: Connection complete event. Status = 0x%x")
    TRC_MSG(MESCO_SCO_DISCONNECT_COMPLETE_EVENT_FOR_HCIHANDLE__xD,"MeSco: SCO Disconnect complete event for hciHandle = %d")
    TRC_MSG(MESCO_SCOHANDLELINKDISCONNECTOP_TASK_END_ERRCODE__xX,"MeSco: ScoHandleLinkDisconnectOp task End errcode=0x%x")
    TRC_MSG(MECREATELINK_INSERT_HANDLER_2,"MeCreateLink insert handler 2")
    TRC_MSG(RADIOMGR_RMGR_RADIOSHUTDOWN,"RADIOMGR:  RMGR_RadioShutdown")
    TRC_MSG(RMGR_RADIO_INIT_STATUS,"RMGR:  RADIO_INIT_STATUS")
    TRC_MSG(MEACC_STARTING_WRITE_SCAN_ENABLE,"MeAcc: Starting Write_Scan_Enable")
    TRC_MSG(RADIOMGR_INITIALIZATION_FAILED,"RADIOMGR:  Initialization failed")
    TRC_MSG(WRITESCAN1xD,"WriteScan1:%d")
    TRC_MSG(RADIOMGR_TRANSPORT_INITIALIZING,"RADIOMGR:  Transport initializing")
    TRC_MSG(MESEC_IGNORING_SECOND_PIN_REQUEST,"MeSec: ignoring second PIN request")
    TRC_MSG(MTK_NUM_KNOWN_DEVICES_FULL,"MTK NUM_KNOWN_DEVICES full")
    TRC_MSG(RADIOMGR_RESET_INITIATED,"RADIOMGR:  Reset initiated")
    TRC_MSG(MESEC_ADDING_ENCRYPTION_OPERATION_TO_QUEUE,"MeSec: Adding encryption operation to queue")
    TRC_MSG(RADIOMGR_COULD_NOT_INIT_TRANSPORT_DURING_RESET,"RADIOMGR:  Could not init transport during reset")
    TRC_MSG(MESEC_REMOTE_DEVICE_DOES_NOT_EXIST_FOR_PAIRING,"MeSec: Remote device does not exist for pairing")
    TRC_MSG(MECON_ACL_CONNECT_COMPLETE_HCIHANDLE__xX,"MeCon: ACL Connect Complete hciHandle=0x%x")
    TRC_MSG(MESEC_CALLING_PAIRING_HANDLER_FOR_A_PIN_CODE,"MeSec: Calling pairing handler for a pin code")
    TRC_MSG(PACKETDATAOFFSETBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X,"packet->data+offset:%02x,%02x,%02x,%02x,")
    TRC_MSG(ME_PARK_MODE_OPERATION_ERROR_STATUS__xX,"ME: Park mode operation error. Status=0x%x")
    TRC_MSG(MECON_STARTING_LINK_REJECT_COMMAND,"MeCon: Starting Link Reject command")
    TRC_MSG(MEACC_AUTO_ACCESS_MODE_SWITCH_ON_FIRST_CONNECT__EXISTING_OP_ON_QUEUE,"MeAcc: Auto access mode switch on first connect - existing op on queue")
    TRC_MSG(ME_DISCOVER_ROLE_OPERATION_COMPLETED_ERROR__0XxX,"ME: Discover Role operation completed error = 0x%x")
    TRC_MSG(STOP_4,"stop 4")
    TRC_MSG(RADIOMGR_RESET_DURING_SHUTDOWN,"RADIOMGR:  Reset during shutdown")
    TRC_MSG(MESCO_SCO_CONNECTION_COMPLETE_INTERNAL_REJECT,"MeSco: SCO connection complete internal reject")
    TRC_MSG(MESEC_SECPROCESSALLSECURITYTOKENS_PROCESSING_A_TOKEN,"MeSec: SecProcessAllSecurityTokens: processing a token")
    TRC_MSG(RADIOMGR_RMGR_HCIRESET,"RADIOMGR:  RMGR_HciReset")
    TRC_MSG(MESCO_DETECTED_RACE_CONDITION,"MeSco: Detected race condition.")
    TRC_MSG(MESEC_CANCELING_PIN_CODE_REQUEST,"MeSec: Canceling pin code request")
    TRC_MSG(ME_MEHANDLECONNECTIONSTATUSONLY_OPCODE_MISMATCHOPCODE__xX_CURTASK__xX,"ME: MeHandleConnectionStatusOnly opcode mismatchopcode=0x%x, curTask=0x%x")
    TRC_MSG(MELINKREADYTOSENDBT_DEBUGx02X,"MeLinkReadyToSend:%02x")
    TRC_MSG(MECON_SCO_CONNECT_COMPLETE_EVENT,"MeCon: SCO Connect complete event.")
    TRC_MSG(RADIOMGR_SHUTDOWN_FAILED_ALREADY_DOWN_OR_INTIALIZING,"RADIOMGR:  Shutdown failed (already down or intializing)")
    TRC_MSG(MESCO_STARTING_SCO_VOICE_SETTINGS_COMMAND,"MeSco: Starting SCO Voice Settings command")
    TRC_MSG(MESEC_TIMEOUT_ON_SECURITY_ACCESS_REQUEST,"MeSec: Timeout on security access request")
    TRC_MSG(MEHANDLEDISCONNECTCOMPLETE_REPORT_TO_UPERxX,"MeHandleDisconnectComplete report to uper=0x%x")
    TRC_MSG(MESCO_RECONFIGURING_ESCO_LINK_xX,"MeSco: Re-configuring eSCO link=0x%x")
    TRC_MSG(MESCO_STARTING_SCO_LINK_ACCEPT_COMMAND,"MeSco: Starting SCO Link Accept command")
    TRC_MSG(MECON_STARTING_GENERAL_COMMAND,"MeCon: Starting General command")
    TRC_MSG(MEDEV_CALLING_SELECT_DEVICE_HANDLER,"MeDev: Calling select device handler.")
    TRC_MSG(RADIOMGR_TRANSPORT_INIT_FAILED_RETRYING,"RADIOMGR:  Transport init failed (retrying)")
    TRC_MSG(RADIOMGR_INIT_CALLED_DURING_INIT,"RADIOMGR:  Init called during init")
    TRC_MSG(MECON_SWITCH_ROLE_TO_HCIHANDLE_xX,"MeCon: Switch role to hciHandle=0x%x")
    TRC_MSG(ME_HCI_TRANSPORT_ERROR,"ME: HCI transport error")
    TRC_MSG(START_INQUIRY_LOOP,"Start Inquiry Loop")
    TRC_MSG(RADIOMGR_RADIODEINIT,"RADIOMGR:  RadioDeinit")
    TRC_MSG(ME_EXIT_PARK_MODE_OPERATION_ERROR_STATUS__xX,"ME: Exit Park mode operation error. Status=0x%x")
    TRC_MSG(MESCO_RECEIVED_SCO_LINK_CONNECT_REQUEST,"MeSco: Received SCO Link Connect Request")
    TRC_MSG(RADIOMGR_RMGRHCICALLBACK_xX,"RADIOMGR:  RmgrHciCallback: %#x")
    TRC_MSG(MECON_COD__0XxX,"MeCon: COD = 0x%x")
    TRC_MSG(MESCO_ESCO_CONNECTION_CHANGED_UNKNOWN_HCIHANDLE__xX,"MeSco: eSCO connection changed unknown hciHandle=0x%x")
    TRC_MSG(RADIOMGR_TRANSPORT_DEINITIALIZATION_FAILED,"RADIOMGR:  Transport deinitialization failed")
    TRC_MSG(RADIOMGR_RADIO_INIT_FAILED_RETRYING,"RADIOMGR:  Radio init failed (retrying)")
    TRC_MSG(RADIOMGR_TRANSPORT_FAILED_SHUTDOWN,"RADIOMGR:  Transport failed shutdown")
    TRC_MSG(RADIOMGR_RADIO_IS_DOWN,"RADIOMGR:  Radio is down")
    TRC_MSG(ME_WRITE_LINK_POLICY_STATUS__xX,"ME: Write Link Policy Status=0x%x")
    TRC_MSG(ME_HCI_DEINIT_COMPLETE_STATUS_xD,"ME: HCI deinit complete status: %d")
    TRC_MSG(MECON_STARTING_LINK_CONNECT_COMMAND_CLOCK_OFFSET__0XxX_ALLOWROLECHANGE__xD,"MeCon: Starting Link Connect command clock offset = 0x%x allowRoleChange = %d")
    TRC_MSG(MESCO_RECEIVED_SCO_LINK_CONNECT_REQUEST_REJECT,"MeSco: Received SCO Link Connect Request (Reject)")
    TRC_MSG(ME_HCI_COMMAND_SENT,"ME: HCI Command sent")
    TRC_MSG(INQUIRY_RESULT,"Inquiry result (already found:0x%02x)")
    TRC_MSG(ME_RECEIVED_INQUIRY_COMPLETE_EVENT,"ME: Received Inquiry complete event. Status = 0x%x")
    TRC_MSG(MECON_STARTING_LINK_ACCEPT_COMMAND_ACCEPT_ROLE__xD,"MeCon: Starting Link Accept command. Accept Role = %d")
    TRC_MSG(MESEC_LINK_KEY_IS_SAVED_DEVICE_NOT_TRUSTED,"MeSec: Link key is saved. Device not trusted")
    TRC_MSG(ME_HANDLEGENERALTASK_OPCODE_MISMATCH,"ME: HandleGeneralTask opcode mismatch")
    TRC_MSG(MEACC_AUTO_ACCESS_MODE_SWITCH_ON_FIRST_CONNECT__EXISTING_OP_EXECUTING,"MeAcc: Auto access mode switch on first connect - existing op executing")
    TRC_MSG(ME_GENERAL_COMMAND_COMPLETED_STATUS__0XxX,"ME: General Command completed. Status = 0x%x")
    TRC_MSG(ME_WRITE_CLASS_OF_DEVICE_OPERATION_COMPLETED_ERROR__xX,"ME: Write Class of Device operation completed error=0x%x")
    TRC_MSG(RADIOMGR_RMGRRADIOCALLBACK_xX,"RADIOMGR:  RmgrRadioCallback: %#x")
    TRC_MSG(RADIOMGR_RADIO_MODULE_IS_DOWN,"RADIOMGR:  Radio Module is down")
    TRC_MSG(MECACCINFONC_BT_DEBUGx04X,"MEC(accInfoNC) :%04X")
    TRC_MSG(MESEC_NO_PAIRING_HANDLER_TO_REPORT_PAIRING_COMPLETE,"MeSec: No pairing handler to report pairing complete")
    TRC_MSG(MECREATELINK_INSERT_HANDLER_1,"MeCreateLink insert handler 1")
    TRC_MSG(MESEC_STARTING_SET_CONNECTION_ENCRYPTION_COMMAND,"MeSec: Starting Set Connection Encryption command")
    TRC_MSG(RADIOMGR_INITIALIZING_TRANSPORT_DURING_RESET,"RADIOMGR:  Initializing transport during reset")
    TRC_MSG(MEACC_AUTO_ACCESS_MODE_SWITCH_ON_LAST_DISCONNET__EXISTING_OP_EXECUTING,"MeAcc: Auto access mode switch on last disconnet - existing op executing")
    TRC_MSG(MECON_ACL_CONNECT_COMPLETE_EVENT,"MeCon: ACL Connect complete event.")
    TRC_MSG(MESCO_STARTING_ESCO_LINK_TO_ACL_LINK_xX,"MeSco: Starting eSCO link to ACL link=0x%x")
    TRC_MSG(HANDLER__0,"handler == 0")
    TRC_MSG(RFCOMM_NEGOTIATION_SENT_SUCCESSFULLY_TO_DLCI_xD_ON_MUX_xD,"RFCOMM:  Negotiation sent successfully to DLCI=0x%02x on Mux=0x%02x")
    TRC_MSG(ME_SNIFF_MODE_OPERATION_ERROR_STATUS__xX,"ME: Sniff mode operation error. Status=0x%x")
    TRC_MSG(MECON_DISCONNECT_COMPLETE_EVENT_STATUS__0XxX,"MeCon: Disconnect complete event. Status = 0x%x")
    TRC_MSG(MECON_HOLD_MODE_TO_HCIHANDLE_xX,"MeCon: Hold mode to hciHandle=0x%x")
    TRC_MSG(RADIOMGR_TRANSPORT_INITIATED,"RADIOMGR:  Transport initiated")
    TRC_MSG(ACCOPNC_IS_BT_DEBUGx04X,"ACCOP->nc is :%04X,%04X,%04X")
    TRC_MSG(MEACC_AUTO_ACCESS_MODE_SWITCH_ON_LAST_DISCONNECT__NO_OP_ON_QUEUE,"MeAcc: Auto access mode switch on last disconnect - no op on queue")
    TRC_MSG(MECON_REMOTE_NAME_REQUEST_COMPLETE_STATUS__0XxX,"MeCon: Remote name request complete status = 0x%02x")
    TRC_MSG(ME_WRITE_AFH_COMPLETED_ERROR__xX,"ME: Write AFH completed error=0x%x")
    TRC_MSG(MESCO_SCO_CONNECTION_COMPLETE_EVENT,"MeSco: SCO Connection complete event")
    TRC_MSG(MESEC_LINK_KEY_NOTIFY_EVENT,"MeSec: Link key notify event")
    TRC_MSG(RADIOMGR_HCI_DEINIT_STARTED,"RADIOMGR:  HCI deinit started")
    TRC_MSG(ME_CHANGE_PACKET_TYPE__xX,"ME: Change Packet Type=0x%x")
    TRC_MSG(MUXCHANNELMUXIDNUMTXPACKETSxD,"MUX(Channel->muxId).numTxPackets++:%d, insert on DLCI=0x%02x, pktInTransmit=%d")
    TRC_MSG(BOP_DISCOVER_ROLE_IS_REPORTED_AS_ROLExD,"BOP_DISCOVER_ROLE is reported as role=%d")
    TRC_MSG(MESEC_ADDING_CANCEL_AUTHORIZE_OPERATION_TO_QUEUE,"MeSec: Adding cancel authorize operation to queue")
    TRC_MSG(ME_REMOTE_NAME_REQUEST_OPERATION_ERROR_STATUS__xX,"ME: Remote Name Request operation error. Status=0x%x")
    TRC_MSG(MESEC_RECEIVED_ENCRYPTION_CHANGE_EVENT__NO_REMOTE_DEVICE,"MeSec: Received encryption change event - no remote device")
    TRC_MSG(RECEIVE_EVENT_FOR_GENERAL_COMMAND_EVENT__0XxX,"Receive event for general command. Event = 0x%x")
    TRC_MSG(MECON_WRITE_LINK_POLICY_TO_HCIHANDLE_xX,"MeCon: Write Link policy to hciHandle=0x%x")
    TRC_MSG(MECON_QOS_SETUP, "MeHandleQoSSetupOp(): handle=0x%x, flag=%d, type=%d, tr=0x%x, pb=0x%x, lat=0x%x, dv=0x%x")
    TRC_MSG(MECON_QOS_SETUP_ERROR_STATUS__xX, "MeHandleQoSSetupOp(): error status=0x%x")
    TRC_MSG(RADIOMGR_HCI_INIT_FAILED_RETRYING,"RADIOMGR:  HCI init failed (retrying)")
    TRC_MSG(MEACC_WRITE_IAC_LAP_COMPLETE,"MeAcc: Write IAC Lap complete")
    TRC_MSG(MESEC_RECEIVED_AUTHENTICATE_COMPLETE_EVENT__NO_REMOTE_DEVICE,"MeSec: Received Authenticate complete event - no remote device")
    TRC_MSG(ME_SET_CHANNEL_CLASSIFICATION_OPERATION_COMPLETED_ERROR__0XxX,"ME: Set Channel Classification operation completed error = 0x%x")
    TRC_MSG(RADIOMGR_RADIO_SHUTTING_DOWN,"RADIOMGR:  Radio shutting down")
    TRC_MSG(MEACC_WRITE_SCAN_ENABLE_COMPLETE,"MeAcc: Write Scan Enable complete")
    TRC_MSG(MEGETFREEREMOTEDEVICE,"MeGetFreeRemoteDevice")
    TRC_MSG(MEGETFREEREMOTEDEVICENULL, "MeGetFreeRemoteDevice(): No available free entry")
    TRC_MSG(RADIO_WAITING_FOR_EVENT_xX,"RADIO: Waiting for event=0x%x")
    TRC_MSG(MESEC_CALLING_AUTHORIZATION_HANDLER,"MeSec: Calling authorization handler")
    TRC_MSG(MESEC_ACCESS_REQUEST_NEEDS_AUTHORIZATION,"MeSec: Access request needs authorization")
    TRC_MSG(MESEC_SECURITY_COMMAND_COMPLETE_EVENT_RECEIVED_ERR__xX,"MeSec: Security Command complete event received. Err=0x%x")
    TRC_MSG(MESEC_LINK_KEY_REQ_FOR_INVALID_BD_ADDR__LINK_KEY_NEG_RSP,"MeSec: Link key req for invalid BD_ADDR - link key neg rsp")
    TRC_MSG(RADIOMGR_HCI_INIT_ERROR,"RADIOMGR:  HCI init error")
    TRC_MSG(MEACC_THE_SETACCESSIBLEMODE_OPERATION_FAILED,"MeAcc: The SetAccessibleMode Operation failed=0x%x")
    TRC_MSG(MEHCI_COMMAND_COMPLETE_ERROR,"HCI_Command_Complete(Status) error=%02x")
    TRC_MSG(ME_SWITCH_ROLE_OPERATION_ENDED_STATUSxX,"ME: Switch Role operation ended. Status=0x%x")
    TRC_MSG(MESEC_NO_LINK_KEY__NEED_A_PIN_CODE,"MeSec: No link key - need a pin code")
    TRC_MSG(MESCO_STARTING_SCO_LINK_REJECT_COMMAND,"MeSco: Starting SCO Link Reject command")
    TRC_MSG(MECSEC_ERROR_SETTING_ENCRYPTION_MODE_ERR__xD,"MecSec: Error setting encryption mode. Err = %d")
    TRC_MSG(MESEC_SECURITY_TOKEN_LIST_IS_NOT_EMPTY,"MeSec: Security token list is not empty")
    TRC_MSG(RADIOMGR_SHUTDOWN_INITIATED,"RADIOMGR:  Shutdown initiated")
    TRC_MSG(ME_INIT_FAILED,"ME_Init(): failed.")
    TRC_MSG(MESCOLINKACCEPTERROR__xX,"MeSco:LinkAcceptError=0x%x")
    TRC_MSG(RADIOMGR_HCI_IS_DOWN,"RADIOMGR:  HCI is down")
    TRC_MSG(AVCTP_MISSING_PARAMETERS_DISCONNECTING,"AVCTP: Missing parameters, disconnecting")
    TRC_MSG(AVCTP_UNABLE_TO_REGISTER_WITH_L2CAP,"AVCTP:  Unable to register with L2CAP.")
    TRC_MSG(AVCTP_INVALID_PID_DISCONNECTING,"AVCTP: Invalid PID, disconnecting")
    TRC_MSG(AVCTP_ERROR_SENDING_MESSAGE,"AVCTP: Error Sending Message")
    TRC_MSG(AVCTP_INVALID_PROFILE_ID,"AVCTP: Invalid Profile ID")
    TRC_MSG(RELEASE_THE_SPACE_ALLOCATED_IN_AVDT_WRITE_DATA,"Release the space allocated in AVDT_Write_Data()")
    TRC_MSG(AVDTP_AVDT_CONNECTREQ,"AVDTP AVDT_ConnectReq")
    TRC_MSG(AVDTP_AVDT_DISCOVER_REQ,"AVDTP AVDT_Discover_Req")
    TRC_MSG(AVDTP_AVDT_SET_CONFIGURATION_REQ,"AVDTP AVDT_Set_Configuration_Req")
    TRC_MSG(AVDT_CONNECTREQ,"AVDT_ConnectReq")
    TRC_MSG(AVDTP_AVDT_GET_CAPABILITIES_REQ,"AVDTP AVDT_Get_Capabilities_Req")
    TRC_MSG(AVDTP_INIT,"AVDTP Init")
    TRC_MSG(IN_CMGR_SETDEVICEASMASTER_CALL_ME_SWITCHROLE,"In CMGR_SetDeviceAsMaster(): call ME_SwitchRole")
    TRC_MSG(CMGR_ATTEMPTING_MS_SWITCH,"CMGR: Attempting M/S switch...")
    TRC_MSG(CMGR_ROLE_IS_MASTER,"CMGR: Role is Master")
    TRC_MSG(CMGR_ROLE_IS_SLAVE,"CMGR: Role is Slave")
    TRC_MSG(CMGR_SETQOS, "CMGR: QoS level=%d")
    TRC_MSG(BTBT_DEBUGx02X,"%02x")
    TRC_MSG(IN_CMGR_SETDEVICEASMASTER_ALREADY_MASTER,"In CMGR_SetDeviceAsMaster(): already Master!")
    TRC_MSG(x1C,"%02x")
    TRC_MSG(ACL_LINK_CONNECTION_EXISTS_DO_SERVICE_SEARCH_DIRECTLY,"ACL link connection exists, do service search directly.")
    TRC_MSG(ACL_LINK_CONNECTION_EXISTS_DO_SERVICE_SEARCH_ATTRIBUTE_DIRECTLY,"ACL link connection exists, do service search attribute directly.")
    TRC_MSG(SPP_RFEVENT_CLOSED,"SPP: RFEVENT_CLOSED")
    TRC_MSG(SPP_DEVICE_STATE_CLOSED,"SPP: DEVICE_STATE_CLOSED")
    TRC_MSG(ADD_SERVICE_RECORD_FAILED,"Add service record failed")
    TRC_MSG(SPP_RFEVENT_CLOSE_IND,"SPP: RFEVENT_CLOSE_IND")
    TRC_MSG(SPP_PASSTHRU_EVENT__xD,"SPP: pass-thru event - %d")
    TRC_MSG(SPP_RF_ACCEPTCHANNEL_FAILED_xD,"SPP: RF_AcceptChannel failed: %d")
    TRC_MSG(RF_xD,"->RF %d/")
    TRC_MSG(SENDING_PORT_SETTINGS,"SENDING port settings")
    TRC_MSG(TX_RATExD,"Tx rate:%d")
    TRC_MSG(SPP_CHANNEL_OPEN,"SPP: channel open.")
    TRC_MSG(SPP_RF_SENDDATA_FAILED_xD,"SPP: RF_SendData failed: %d")
    TRC_MSG(SPP_SDP_QUERY_FAILED,"SPP: SDP Query Failed")
    TRC_MSG(SPP_UNKNOWN_EVENT__xD,"SPP: unknown event - %d")
    TRC_MSG(xD,"%d")
    TRC_MSG(SPP_SDP_CONNECT_RETURNED_xD,"SPP: SDP_Connect() returned %d")
    TRC_MSG(RX_xD_SAVED_xD,"rx %d, saved %d")
    TRC_MSG(TX_FINISHED_STARTxD_ENDxD,"Tx finished, start:%d, end:%d")
    TRC_MSG(TXSLEEPCOUNT,"> txSleepCount")
    TRC_MSG(SPP_OPEN_SERVICE_AVAILABLE_ON_RFCOMM_CHANNEL_xD,"SPP_Open: service available on RFCOMM channel %d")
    //#ifdef MULTI_RF_CHANNEL
    TRC_MSG(BTLOG_RFCHC_RFCOUNT,"RFCH Rfservice=0x%X RFcount%u") 
    TRC_MSG(BTLOG_RFCH_GET_SDP_ATTRIBS,"RFCH Get SDP attributes for server%u") 
    TRC_MSG(BTLOG_RFCH_ASSIGN_SRV_AND_SDP,"RFCH Assign RfService and SDP record for SPP server%u") 
    //#endif

    TRC_MSG(BTBM_ADD_LINK_CALLBACK,"BTBM Add Link Callback")
    TRC_MSG(BTBM_REMOVE_LINK_CALLBACK,"BTBM Remove Link Callback.")
    TRC_MSG(BTBM_REMOVE_LINK_CALLBACK_LINK_NOT_EXISTED,"BTBM Remove Link Callback: no callback due to link already removed")
    TRC_MSG(BTBM_CREATE_CONNECTION,"BTBM create connection:%d.")
    TRC_MSG(BTBM_REMOVE_CONNECTION,"BTBM remove connection:%d.")
    TRC_MSG(CONNMGR_BTEVENT_READ_RSSI_COMPLETED,"ConnMgr: BTEVENT_READ_RSSI_COMPLETED")
    TRC_MSG(ME_START_RSSIOP,"MeHandleReadRSSIOp():hicHandle=%04X")
    TRC_MSG(ME_END_RSSIOP,"ERR or END MeHandleReadRSSIOp")
    TRC_MSG(BTBM_BONDING_NOT_SEND_AUTH_CMD_AUTHSTATE_ENCRYPTSTATE,"Bonding Procedure: Not send auth cmd and link_authstate=%d,encrypt_state=%d")
    TRC_MSG(BT_FATAL,"BT fatal index=%d")

    TRC_MSG(BTEVENT_SCO_CONNECT_CNF_ESCO_FAILED,"BTEVENT_SCO_CONNECT_CNF ESCO failed")
    TRC_MSG(BT_TRY_TO_OPEN_SCO,"Try to open SCO")
    TRC_MSG(SCOCONNECTSCOLINKTYPEx02X,"scoConnect->scoLinkType:%02x")
    TRC_MSG(CONNMGRACCEPTAUDIOLINK_SCOCONNECTSCOTXPARMSESCOPKTTYPEx02X,"ConnMgrAcceptAudioLink scoConnect->scoTxParms.eScoPktType:%02x")
    TRC_MSG(STARTSCOLINKSETUPTASK,"StartScoLinkSetupTask")
    TRC_MSG(STARTSCOLINKACCEPTTASK,"StartScoLinkAcceptTask")
    TRC_MSG(BT_TRY_TO_OPEN_ESCO,"Try to open eSCO")
    TRC_MSG(BTTRANSMITBANDWIDTHx08X,"transmitBandwidth:%08x")
    TRC_MSG(BTRETRANSMISSIONEFFORTx02X,"retransmissionEffort:%02x")
    TRC_MSG(BTVOICESETTINGx04X,"voiceSetting:%04x")
    TRC_MSG(BTESCOPKTTYPEx04X,"eScoPktType:%04x")
    TRC_MSG(BTCURRENT_SCOPARMSx02X,"Current ScoParms:%02x")
    TRC_MSG(BTRECEIVEBANDWIDTHx08X,"receiveBandwidth:%08x")
    TRC_MSG(BTEVENT_SCO_CONNECT_CNF_SCO_FAILED,"BTEVENT_SCO_CONNECT_CNF SCO failed")
    TRC_MSG(BTMAXLATENCYx04X,"maxLatency:%04x")
    TRC_MSG(BT_PROFILES_TYPE_FROM_MMIx02X,"BT profiles type from MMI:%02x")
    TRC_MSG(SUPPORT_ESCO_STATUSx02X,"Support eSCO status:%02x")
    TRC_MSG(BT_PROFILES_ESCO_TYPEx02X,"BT profiles eSCO_type:%02x")
    TRC_MSG(WRITE_FLUSHED_TIMEOUT,"write flushed timeout")
    TRC_MSG(LINK_FLUSHED_TIMEOUT_DEBUGx02X,"flush timeout hdl:%02x")
    TRC_MSG(LINK_FLUSHED_TIMEOUT_ERROR_CODE,"flush timeout error code:%04x")
    TRC_MSG(BTLOG_ENHANCED_FLUSHED_COMMAND_COMPLETED_HDL,"BTlog The enhanced flushed command is completed with hdlr:0x%04x, value=0x%04x")
    TRC_MSG(BTLOG_SUPERVISION_TIMEOUT_CHANGE_EVENT,"BTlog The link supervision timeout event:%04x")
    TRC_MSG(BTLOG_POWERON_SET_EVENT_MASK,"BTlog Set event mask")
    TRC_MSG(BTLOG_SET_EVENT_MASK_COMMAND_COMPLETED,"BTlog Set event mask command completed")
    TRC_MSG(BTLOG_SET_SNIFF_SUBRATING_OP_IN_QUEUE,"BTlog The sniff subrating operation is in remote queue")
    TRC_MSG(LINK_SNIFF_SUBRATING_ERROR_CODE,"sniff subrating command with error code:%04x")
    TRC_MSG(BTLOG_WRITE_EIR_RESPONSE,"write extended inquiry response with error code:%04x")
    TRC_MSG(BTLOG_WRITE_INQUIRY_MODE_COMPLETED,"write Inquiry mode command completed")
    TRC_MSG(BTLOG_WRITE_INQUIRY_MODE_PARM,"write Inquiry mode command :%02x")
    TRC_MSG(BTLOG_CREATE_AUDIOLINK_SCO_HANDLER,"ConnMgrCreateAudioLink remDevice->scoHandler:%08x")
    TRC_MSG(BTLOG_CREATE_AUDIOLINK_SCO_HANDLER1,"ConnMgrCreateAudioLinkscoConnect:%08x")
    TRC_MSG(BTLOG_CREATE_AUDIOLINK_SCO_STATUS,"ConnMgrCreateAudioLinkscoConnect status:%02x")
    TRC_MSG(BT_LOG_NOTIFY_MMI_SIMAP_ISSUE_16_DIGITS,"btbmHandlePinReqTimeout(): Notify MMI promots 16digits PIN CODE INPUT due to simap issue")
    TRC_MSG(BT_LOG_CHECK_SIMAP_SRV_STATE_PIN_CODE_IND,"btbmHandlePinReqTimeout(): Check SIMAP Srv state=%d")
    TRC_MSG(BT_LOG_CHECK_SIMAP_PIN_CODE_LEN_IN_RECV_SABM_CASE,"RFChnl DISC state:Recv SABM to check SIMAP PIN LEN case=%d")
    TRC_MSG(BT_LOG_LINK_KEY_RSP_TASK_PAIRED_LEN,"LinkKeyRspTask: Find record, paired_with_simap=%d,pin_code_len=%d")
    TRC_MSG(BT_LOG_SEC_PIN_CODE_REQ_ISSUED_BY_SIMAP,"SecHandlePinCodeReq(): This pin code request is issued by our SIMAP server")
    TRC_MSG(BT_LOG_SEC_AUTH_COMPLETE_RESET_SIMAP_ISSUE_AUTH_PROCEDURE,"SecHandleAuthComplete(): reset simap_issue_auth_procedure to FALSE")
    TRC_MSG(BT_LOG_SEC_LINK_KEY_NOTIFY_RESET_FALGS_CASE,"SecHandleLinkKeyNotify():reset simap_issue_auth_procedure and set record_paired_with_simap TRUE,case=%d")
    TRC_MSG(BT_LOG_SEC_LINK_KEY_NOTIFY_PIN_CODE_LEN_CASE,"SecHandleLinkKeyNotify(): store link key with pin code len to database_case=%d,len=%d")
    TRC_MSG(BT_LOG_START_PIN_CODE_RSP_TASK_PIN_LEN,"StartPinCodeRspTask():Reply to this exchange with pin_code_len=%d")
    TRC_MSG(BT_LOG_START_PIN_CODE_RSP_BY_ADDR_TASK_LEN,"StartPinCodeRspByAddrTask():pin_code_len=%d")
    TRC_MSG(BT_LOG_REMDEV_REFCOUNT_DLCCOUNT,"RfDlcDisconnected(): refCount=%d,Muxid=0x%02x,dlcCount=%d for link=%08X")
    TRC_MSG(BT_LOG_NEEDS_HIGHER_SECURITY_BUT_EXISTED_ACTIVE_CON_REJECT_THIS_CHNL,"RfDlcDisconnected():Reject this higher security chnl due to existed other active cons: can not reset auth states")
    TRC_MSG(BT_LOG_HANDLE_LINK_KEY_NOTIFY_CHECK_PAIRED_SIMAP_FLAG,"BT_SecHandleLinkKeyNotify: case=%d,record paired_with_simap flag=%d")
    TRC_MSG(BT_LOG_BTBM_REPORT_LINK_STATE_DEBUG_INFO,"BTBMAdpReportLinkState(): operation_ongoing=%d,src_module=%d,last_cmd=%d")
    TRC_MSG(BT_LOG_BTBM_CAN_NOT_RESET_OP_ONGOING_FLAG,"BTBMAdpReportLinkState():Can not reset operation_ongoing")
    TRC_MSG(BT_LOG_BM_REJECT_WRITE_SCAN_MODE_SAVE_MODE_AND_STATUS,"bm_reject_hdlr: save write_scan_value: bm_save_mode=%d, status=%d")
    TRC_MSG(BT_LOG_SDAP_REJECT_SECOND_A2DP_SDP_DUE_TO_ONE_PENDING,"sdap_search_multiple_ssa():reject 2nd a2dp sdp request")
    TRC_MSG(BT_LOG_NAMETOK_CBFUNC,"PinCodeAskNameQueryHandler()")
    TRC_MSG(BT_LOG_NAMETOK2_CBFUNC,"btbmHandlerRemoteNameQueryAtNoAuthEnabled()")
    TRC_MSG(BT_LOG_NAMETOK3_CBFUNC,"btbmHandlerRemoteNameQueryAtNoAuthEnabled()")
    TRC_MSG(BT_LOG_MULTIPLE_NAME_CBFUNC,"btbmHandlerRunMultipleNameQuery")
    TRC_MSG(BT_LOG_EXISTING_NAMETOK2_NOT_RESET,"NameTok2 is used, can not ask name in btbmRemoteNameRequestAtNoAuthEnabled")
    TRC_MSG(BTLOG_WRITE_SIMPLE_PAIRING_MODE_PARM,"write simple pairing mode command :%02x")
    TRC_MSG(BTLOG_WRITE_SIMPLE_PAIRING_MODE_COMPLETED,"write simple pairing mode command completed")
    TRC_MSG(MESEC_SENDING_IO_CAPABILITY_NEGATIVE_REPLY_COMMAND,"MeSec: Sending Io Capability Request Negative Reply command")
    TRC_MSG(BTLOG_BTBM_BONDING_RX_USER_CONFIRM_REQUEST,"BTBM Bonding received the user confirm request event")
    TRC_MSG(BTLOG_BTBM_PAIRING_RX_USER_CONFIRM_REQUEST,"BTBM pairing received the user confirm request event")
    TRC_MSG(BTLOG_BTBM_BONDING_RX_PASSKEY_ENTRY_REQUEST,"BTBM Bonding received the passkey entry notification event")
    TRC_MSG(BTLOG_BTBM_PAIRING_RX_PASSKEY_ENTRY_REQUEST,"BTBM pairing received the passkey entry notification event")
    TRC_MSG(BTLOG_BTBM_READRSSI_STATUS,"BTBMReadRSSI(): returned status=%d from ME_ReadRSSI()")
    TRC_MSG(BTLOG_BTBM_READRSSI_NOT_FIND_REMDEV_WITH_ADDR,"BTBMReadRSSI(): Can not find remDev with passed addr")
    TRC_MSG(BTLOG_BTBM_REPORT_READRSSI_RESULT,"In btbmReportReadRSSIResult(): rssi_op_ongoing=%d,errCode=%d,rssi_value=%d,lap=%08X,uap=%02X,nap=%04X")
    TRC_MSG(BTLOG_CONNMANAGER_RSSI_VAL,"Get RSSI value=%d in ConnManager()")
    TRC_MSG(MESEC_SENDING_USER_CONFIRM_COMMAND,"MeSec: Sending User Confirm Reply command")
    TRC_MSG(MESEC_SENDING_USER_CONFIRM_NEG_COMMAND,"MeSec: Sending User Confirm Negative Reply command")
    TRC_MSG(BTLOG_CMGR_CREATE_LINK_WITH_DIFF_ADDR,"CMGR_CreateDataLink(): ACL connected but different BT addr")
    TRC_MSG(BT_LOG_MPR_CANCEL_TIMER_IN_AUTHSTATE_CASE,"BT MPR: Cancel timer in authState=%d and case=%d")
    TRC_MSG(BT_LOG_START_MPR_TIMER_CASE,"BT MPR: Start a timer for pair result in case=%d")
    TRC_MSG(BT_LOG_MPR_TIMEOUT_LINKSTATE_AUTHSTATE,"BT MPR timeout: linkstate=%d,authState=%d")
    TRC_MSG(BT_LOG_MPR_TIMEOUT_LINK_NOT_CONNECTED,"BT MPR timeout: Link is not connected")
    TRC_MSG(BT_LOG_AUTHEVENT_ERRCODE_LINKSTATE_ORG_AUTHSTATE,"Auth Event with errCode=%d,linkstate=%d,org_authState=%d")
    TRC_MSG(BT_LOG_AUTHEVENT_ERR_DISC_LINK,"Auth event with error: Disc ACL link")
    TRC_MSG(BT_LOG_AVDTP_RECV_SIGRSP_CURRENT_STATE,"Recv AVDTP SIG RSP=%d,now_stream_state=%d,state_flag=%d")
    TRC_MSG(BT_LOG_AVDTP_RECV_RSP_BUT_STREAM_ALREADY_DISC,"AVDTP stream already disc but recv SIG RSP with type=%d")
    TRC_MSG(BT_LOG_AVDTP_CHANGE_TO_STREAMING_STATE,"AVDTP Recv Start Stream Rsp change to STREAMING state")
    
    /* [BT21] related new added trace  */
    TRC_MSG(BTLOG_BLOCK_LIST_NOxD,"Block list no:%d")
    TRC_MSG(BTLOG_BLOCK_LIST_Ix02Xx02Xx02Xx02Xx02Xx02X,"Block List %02d:%02x,%02x,%02x,%02x,%02x,%02x")
    TRC_MSG(BTLOG_INPUT_ADDRx02Xx02Xx02Xx02Xx02Xx02X,  "input addr    :%02x,%02x,%02x,%02x,%02x,%02x")
    TRC_MSG(BTLOG_SSP_MTKBMCBONDING_STATEx02X,"SSP MTKBMC(bonding_state):%02x")
    TRC_MSG(BTLOG_BTBMHANDLEPASSKEYENTRYNOTIFICATIONxD,"btbmHandlePasskeyEntryNotification:%d")
    TRC_MSG(BTLOG_MTKBMCPIN_BDCx08X,"MTKBMC(pin_bdc):%08x")
    TRC_MSG(BTLOG_SERVICE_LISTx02Xx02Xx02X,"Service list:%02x,%02x,%02x")
    TRC_MSG(BTLOG_BTBMHANDLEIOCAPABILITYRESPONSEx02Xx02Xx02Xx02Xx02Xx02X,"btbmHandleIoCapabilityResponse:%02x,%02x,%02x,%02x,%02x,%02x")
    TRC_MSG(BTLOG_BTEVENT_IO_CAPABILITY_RESPONSE,"BTEVENT_IO_CAPABILITY_RESPONSE")
    TRC_MSG(BTLOG_BTBMHANDLEIOCAPABILITYRESPONSEx02Xx02Xx02X,"btbmHandleIoCapabilityResponse:%02x,%02x,%02x")
    TRC_MSG(BTLOG_UUID16x04X,"uuid16:%04x")
    TRC_MSG(BTLOG_RSSIx02X,"RSSI:%02x")
    TRC_MSG(BTLOG_EVENTERRCODEx02X,"Event->errCode:%02x")
    TRC_MSG(BTLOG_EVENTPBTBMHANDLEPASSKEYENTRYNOTIFICATIONREMDEVBDADDRADDRx02Xx02Xx02Xx02Xx02Xx02X,"Event->p.btbmHandlePasskeyEntryNotification.remDev->bdAddr.addr:%02x,%02x,%02x,%02x,%02x,%02x")
    TRC_MSG(BTLOG_FIND_DEVICE_NEWx02Xx02Xx02Xx02Xx02Xx02X,"Find device new:%02x,%02x,%02x,%02x,%02x,%02x")
    TRC_MSG(BTLOG_PASSKEY_ENTRY_NOTIFICATION_WRONG_STATE_IGNORE_IT,"PASSKEY Entry notification wrong state, ignore it.")
    TRC_MSG(BTLOG_EIR_VALUEx02X,"eir_value:%02x")
    TRC_MSG(BTLOG_MTKBMCBM_OPACTIVITYx02X,"MTKBMC(bm_opactivity):%02x")
    TRC_MSG(BTLOG_REMDEVSTATEx02X,"remDev->state:%02x")
    TRC_MSG(BTLOG_BTEVENT_IO_CAPABILITY_RESPONSE_AUTHREQUIREMENTSxD,"BTEVENT_IO_CAPABILITY_RESPONSE authRequirements:%d")
    TRC_MSG(BTLOG_EVENTPUSERCONFIRMREQUESTREMDEVBDADDRADDRx02Xx02Xx02Xx02Xx02Xx02X,"Event->p.userConfirmRequest.remDev->bdAddr.addr:%02x,%02x,%02x,%02x,%02x,%02x")
    TRC_MSG(BTLOG_BTEVENT_IO_CAPABILITY_RESPONSE_IOCAPABILITYxD,"BTEVENT_IO_CAPABILITY_RESPONSE ioCapability:%d")
    TRC_MSG(BTLOG_x02Xx02Xx02Xx02Xx02Xx02Xx02Xx02Xx02Xx02X,"%02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x")
    TRC_MSG(BTLOG_CURRENT_BM_OPACTIVITY,"Current bm_opactivity %02x")
    TRC_MSG(BTLOG_EIR_LENGTHxD,"EIR Length:%d")
    TRC_MSG(BTLOG_SIMPLE_PAIRING_PROCEDURE_IS_COMPLETED,"Simple Pairing procedure is completed %08x,%08x,%02x,%02x")
    TRC_MSG(BTLOG_EIR_RESPONSE,"EIR Response")
    TRC_MSG(BTLOG_BTEVENT_IO_CAPABILITY_REQUEST,"BTEVENT_IO_CAPABILITY_REQUEST")
    TRC_MSG(BTLOG_BDCSUPPORT_SERVICE_LISTxD,"bdc->support_service_list:%d")
    TRC_MSG(BTLOG_KEYPRESSEVENTREPORTINGxD,"keyPressEventReporting:%d")
    TRC_MSG(BTLOG_BTBMHANDLE_CURRENT_KEY_PRESSxD,"btbmHandle Current key press:%d")
    TRC_MSG(BTLOG_UUID_OFFSETxD,"uuid_offset:%d")
    TRC_MSG(BTLOG_FIND_DEVICE_AGAINx02Xx02Xx02Xx02Xx02Xx02X,"Find device again:%02x,%02x,%02x,%02x,%02x,%02x")
    TRC_MSG(BTLOG_IN_BLOCK_LIST_DISCONNECT,"In block list, disconnect")
    TRC_MSG(BTLOG_BDCx08X,"bdc:%08x")
    TRC_MSG(BTLOG_BTEVENT_IO_CAPABILITY_RESPONSE_OOBDATAPRESENTxD,"BTEVENT_IO_CAPABILITY_RESPONSE OOBDataPresent:%d")
    TRC_MSG(BTLOG_BDC_NOT_FIND_RESPONSE_FAILED,"bdc not find, response failed.")
    TRC_MSG(BTLOG_MTKBMCSSPDEVICEINFONUMERICVALUExD,"MTKBMC(SSPDeviceInfo).numericValue:%d")
    TRC_MSG(BTLOG_BTEVENT_USER_CONFIRM_REQUEST,"BTEVENT_USER_CONFIRM_REQUEST")
    TRC_MSG(BTLOG_EIR_THE_LAST_ONE,"EIR The last one")
    TRC_MSG(BTLOG_IN_BLOCK_LIST_REJECT,"In Block list, reject")
    TRC_MSG(BTLOG_ADDRESS_NOT_MATCHED_RETURN,"Address not matched, return")
    TRC_MSG(BTLOG_SSP_KEY_TYPExD,"SSP key type:%d")
    TRC_MSG(BTLOG_MTKBMCPIN_REQ_TIMERFUNCx08X,"MTKBMC(pin_req_timer).func:%08x")
    TRC_MSG(BTLOG_MTKBMCSSPDEVICEINFOADDR_ADDRx02Xx02Xx02Xx02Xx02Xx02X,"MTKBMC(SSPDeviceInfo).addr addr:%02x,%02x,%02x,%02x,%02x,%02x")
    TRC_MSG(BTLOG_BTBMHANDLEUSERCONFIRMREQUESTxD,"btbmHandleUserConfirmRequest:%d")
    TRC_MSG(BTLOG_BTBMHANDLEOOBDATAREQUEST,"btbmHandleOobDataRequest")
    TRC_MSG(BTLOG_NOT_SUPPORT_SNIFF_SUBRATING_MODE,"Not support Sniff subrating mode")
    TRC_MSG(BTLOG_MECTASKSTATEx02X,"MEC(taskState):%02x")
    TRC_MSG(BTLOG_MEHANDLEWRITEEIROP,"MeHandleWriteEirOp")
    TRC_MSG(BTLOG_WRITE_EIR_DATA,"Write Eir Data")
    TRC_MSG(BTLOG_EIRRECORDNUMxD,"eirRecordNum:%d")
    TRC_MSG(BTLOG_EIRx02Xx02Xx02Xx02Xx02Xx02Xx02Xx02Xx02Xx02X,"EIR:%02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x")
    TRC_MSG(BTLOG_OFFSETxD,"offset:%d")
    TRC_MSG(BTLOG_MECLOCALNAMELENxD,"MEC(localNameLen):%d")
    TRC_MSG(BTLOG_MEHANDLEREADRSSIOPHICHANDLEx04X,"MeHandleReadRSSIOp():hicHandle=%04X")
    TRC_MSG(BTLOG_MEDISCONNECTLINKx02Xx02Xx02X,"MeDisconnectLink:%02x,%02x,%02x")
    TRC_MSG(BTLOG_MEHANDLEWRITEAUTOMATICALLYFLUSHOP,"MeHandleWriteAutomaticallyFlushOp")
    TRC_MSG(BTLOG_CURRENT_KEYxD,"Current key:%d")
    TRC_MSG(BTLOG_ACL_DISCONNECTING_CREATING_LINK_PENDING,"ACL Disconnecting, creating link pending")
    TRC_MSG(BTLOG_MEHANDLEDISCONNECTACLCHECKCREATEACL,"MeHandleDisconnectACLCheckCreateACL")
    TRC_MSG(BTLOG_ERR_OR_END_MEHANDLEREADRSSIOP,"ERR or END MeHandleReadRSSIOp")
    TRC_MSG(BTLOG_MEHANDLEWRITESNIFFSUBRATINGOP,"MeHandleWriteSniffSubratingOp")
    TRC_MSG(BTLOG_RECORD_INDEXx0D_SERVICE_CLASSx04X,"record index:%0d, service class:%04x")
    TRC_MSG(BTLOG_EIR_CHECK_THE_REGISTRATION_IN_RECORD_OR_NOT,"EIR check the registration in record or not")
    TRC_MSG(BTLOG_RECORD_EXISTxD,"record_exist:%d")
    TRC_MSG(BTLOG_xD_USEDxD_SERVICE_CLASSx04X,"%d: used:%d, service class:%04x")
    TRC_MSG(BTLOG_EIR_REGISTRATION_SDP_FOR_UPPER_LAYER_SERVICE_CLASSx04X,"EIR registration sdp for upper layer service class:%04x")
    TRC_MSG(BTLOG_CURRENT_IOCAPABILITIYSTATE0Xx02X,"Current ioCapabilitiyState:0x%02x")
    TRC_MSG(BTLOG_REMDEVSNIFFSUBRATESTATEx02X,"remDev->sniffSubrateState:%02x")
    TRC_MSG(BTLOG_EIROP_IN_OPLIST,"eirOp in opList")
    TRC_MSG(BTLOG_NO_EIR_UPDATE_OPERATION,"No Eir Update operation")
    TRC_MSG(BTLOG_EIROP_NOT_AVAILABLE,"eirOp not available")
    TRC_MSG(BTLOG_WRONG_STATE,"Wrong state")
    TRC_MSG(BTLOG_REMDEVDISCONNECTACLCHECKCREATACLTIMERFUNC_0,"remDev->disconnectACLCheckCreatACLTimer.func !=0")
    TRC_MSG(BTLOG_REMDEV_0,"Remdev ==0")
    TRC_MSG(BTLOG_TOKENREMDEVENCRYPTSTATExD,"token->remDev->encryptState:%d")
    TRC_MSG(BTLOG_LINK_KEY_BDCx08X,"link key bdc:%08x")
    TRC_MSG(BTLOG_STARTIOCAPABILITYRSPBYADDRTASKx02X,"StartIoCapabilityRspByAddrTask:%02x")
    TRC_MSG(BTLOG_REMOTE_DEVICE_PERFORM_SHOW_KEY_REQUEST,"Remote device perform show key request")
    TRC_MSG(BTLOG_NOT_SIMPLE_PAIRING_KEY_USE_INTERNAL_VALUE,"Not simple pairing key, use internal value")
    TRC_MSG(BTLOG_CURRENT_KEY_TYPExD,"Current key type:%d")
    TRC_MSG(BTLOG_STARTUSERCONFIRMRSPBYADDRTASKx02X,"StartUserConfirmRspByAddrTask:%02x")
    TRC_MSG(BTLOG_REMOTE_DEVICE_IS_NOT_WAITING_FOR_LINK_KEY,"Remote device is not waiting for Link key")
    TRC_MSG(BTLOG_SECHANDLEIOCAPABILITYREQUEST,"SecHandleIoCapabilityRequest")
    TRC_MSG(BTLOG_SECHANDLEUSERKEYPRESS,"SecHandleUserKeyPress")
    TRC_MSG(BTLOG_RECORDGAPKEYTYPExD,"record.gapKeyType:%d")
    TRC_MSG(BTLOG_PASSKEY_PRESS_EVENT_x02X,"Passkey press event :%02x")
    TRC_MSG(BTLOG_REMOTE_DEVICE_PERFORM_USER_CONFIRM_REQUEST,"Remote device perform user confirm request")
    TRC_MSG(BTLOG_PAIRING_IS_IN_PROGRESS,"Pairing is in progress")
    TRC_MSG(BTLOG_REMOVE_DEVICE_IS_EMPTY,"Remove device is empty")
    TRC_MSG(BTLOG_USERCONFIRMREQUEST_NUMERICVALUE_x08X,"UserConfirmRequest numericValue :%08x")
    TRC_MSG(BTLOG_SECHANDLEDELETESTOREDLINKKEYOP,"SecHandleDeleteStoredLinkKeyOp")
    TRC_MSG(BTLOG_SECHANDLESIMPLEPAIRINGCOMPLETE,"SecHandleSimplePairingComplete")
    TRC_MSG(BTLOG_SECHANDLEUSERPASSKEYNOTIFICATION,"SecHandleUserPasskeyNotification")
    TRC_MSG(BTLOG_BTEVENT_SIMPLE_PAIRING_COMPLTETE,"BTEVENT_SIMPLE_PAIRING_COMPLTETE")
    TRC_MSG(BTLOG_SECHANDLEIOCAPABILITYREQUEST_NO_REMDEV,"SecHandleIoCapabilityRequest no remDev")
    TRC_MSG(BTLOG_TOKENRECORDLEVEL_TYPExD,"token->record->level_type:%d")
    TRC_MSG(BTLOG_NOT_KNOWN_DEVICES,"Not Known devices")
    TRC_MSG(BTLOG_CURRENT_ENCRYPTION_STATExD,"Current encryption state:%d")
    TRC_MSG(BTLOG_TOKENREMDEVAUTHSTATExD,"token->remDev->authState:%d")
    TRC_MSG(BTLOG_SECHANDLEIOCAPABILITYRESPONSE_NO_REMDEV,"SecHandleIoCapabilityResponse no remDev")
    TRC_MSG(BTLOG_PASSKEY_ENTRY_NUMERICVALUE_x08X,"Passkey Entry numericValue :%08x")
    TRC_MSG(BTLOG_SECHANDLEUSERCONFIRMREQUEST,"SecHandleUserConfirmRequest")
    TRC_MSG(BTLOG_SECHANDLEREMOTEOOBDATAREQUEST,"SecHandleRemoteOobDataRequest")
    TRC_MSG(BTLOG_SDPUPDATEEIRDATABASEx02X,"SdpUpdateEirDataBase:%02x")
    TRC_MSG(BTLOG_RECORDATTRIBSIDxD,"record->attribs->id:%d")
    TRC_MSG(BTLOG_PARSE_PTRPARSE_COUNTxX,"parse_ptr[parse_count]:0x%x")
    TRC_MSG(BTLOG_INPUT_SERVICE_CLASSx04X,"input service class:%04x")
    TRC_MSG(BTLOG_SERVICE_CLASS_SIZExD,"Service class size:%d")
    TRC_MSG(BTLOG_RECORDNUMxD,"record->num:%d")
    TRC_MSG(BTLOG_THIS_RECORD_IS_ALREADY_IN_SDPS_LIST,"This record is already in SDPS list")
    TRC_MSG(BTLOG_EIR_IGNORE_DATA_ELEMENT_SEQUENCE_NOT_2_BYTES,"EIR ignore data element sequence not 2 bytes")
    TRC_MSG(BTLOG_PARSE_COUNTxD_SERVICE_CLASS_SIZExD,"parse_count:%d, service_class_size:%d")
    TRC_MSG(BTLOG_NUMERIC_VALUE_IxD_TEMP_CHARxD,"Numeric value i:%d, temp_char:%d")
    TRC_MSG(BTLOG_TEMP_VALUExD,"temp_value:%d")
    TRC_MSG(BTLOG_NUMERICVALUExD,"numericValue:%d")
    TRC_MSG(BTLOG_ATTRIBUTELIST_BYTE_COUNTxD,"attributelist byte count=%d")
    TRC_MSG(BTLOG_NONDIRECT_RETURN_MESSAGE,"non-direct return message")
    TRC_MSG(BTLOG_TEMP_CHARxC_COVERT_TO_STRINGxC,"temp_char:%c covert to string:%c")
    TRC_MSG(BTLOG_DIVID_VALUExD,"divid_value%d")
    TRC_MSG(BTLOG_ME_CREATELINK_REMOVE_INSERTED_HDLRE_DUE_TO_RETURN_FAILED,"ME_CreateLink():remove inserted handler due to return status with failure")
    TRC_MSG(BTLOG_CURRENT_SCO_NOxD_ESCO_NOxD,"current sco_no:%d, esco_no:%d")
    TRC_MSG(BTLOG_TRY_TO_MAKE_LINK_POLICY,"try to make link policy")
    TRC_MSG(BTLOG_PREVIOUS_ROLE_SWITCH_IS_NOT_COMPLETED,"Previous role switch is not completed")
    TRC_MSG(BTLOG_DO_SCO_ROLE_SWITCH,"Do SCO role switch")
    TRC_MSG(BTLOG_MASTER_SCOxD,"master sco:%d")
    TRC_MSG(BTLOG_CON_HDLx04X_MASTER,"con hdl:%04x, master")
    TRC_MSG(BTLOG_LINKROLExD_DISBALEDxD,"link->role:%d, disbaled:%d")
    TRC_MSG(BTLOG_ALREADY_MASTER_RETURN,"Already master, return")
    TRC_MSG(BTLOG_CON_HDLx04X_SLAVE,"con hdl:%04x, slave")
    TRC_MSG(BTLOG_CURRENT_PICONETxD_SCATTERNETxD,"current piconet:%d, scatternet:%d")
    TRC_MSG(BTLOG_BTBM_SPP_KEY_PRESS_ABORT,"BTBMSSPKeyPressAbort here,%02x,%02x")
    TRC_MSG(BTLOG_BTBM_SPP_AUTHENTICATION_REQUIREMENTS,"localAuthRequirements:%02x")
    TRC_MSG(BTLOG_BTBM_SPP_DEVICE_INFO_IO_CAPABILITY,"MTKBMC(SSPDeviceInfo).ioCapability:%d")
    TRC_MSG(BTLOG_ME_LINKKEY_NOTIFY_BDC_GAPKEYTYPE,"SecHandleLinkKeyNotify(): bdc_gapKeyType=%d")
    TRC_MSG(BTLOG_ME_CHANGELINKPOLICYROLESWITCHxD,"Me_ChangeLinkPolicy: LinkPolicyParms = 0x%X, roleSwitch = % d, sniff = % d,")
    TRC_MSG(BTLOG_ME_CANCELGETREMOTEDEVICENAME_START_A_TIMER_FOR_CANCEL_NAME_TOKENxD,"ME_CancelGetRemoteDeviceName(): start a timer for cancel name token=%d")
    TRC_MSG(BTLOG_CAN_NOT_PERFORM_LINK_POLICY,"Can not perform link policy")
    TRC_MSG(BTLOG_ALLOW_ROLE_CHANGE_PARMxD,"allow role change parm:%d")
    TRC_MSG(BTLOG_ME_CANCELGETREMOTEDEVICENAME_CANCEL_ORG_TIMER_OF_TOKENxD,"ME_CancelGetRemoteDeviceName(): cancel org timer of token=%d")
    TRC_MSG(BTLOG_CHANGE_ENCRYPTION_MODE_TO_HDLx04X_MODEx02X,"Change Encryption mode to hdl:%04x, mode:%02x")
    TRC_MSG(BTLOG_LINK_NOTIFICATIONx02X,"link notification:%02x")
    TRC_MSG(BTLOG_ENCRYPTION_HDLx04X_MODEx02X,"Encryption hdl:%04x, mode:%02x")
    TRC_MSG(BTLOG_THE_LINK_KEY_x02Xx02Xx02Xx02Xx02Xx02Xx02Xx02X,"The link key %02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x")
    TRC_MSG(BTLOG_THE_LINK_KEY_OF_ADDRESS_x02Xx02Xx02Xx02Xx02Xx02X,"The link key of address %02x:%02x:%02x:%02x:%02x:%02x")
    TRC_MSG(BTLOG_REQUEST_DEVICE_NAME_TIMEOUT_OF_TOKENxD,"Request device name timeout of token=%d")
    TRC_MSG(BTLOG_LINK_POLICY_IS_DIFFERENTx04Xx04X,"Link policy is different:%04x,%04x")
    TRC_MSG(BTLOG_THE_LINK_POLICYx04X,"The link policy:%04x")
    TRC_MSG(BTLOG_MEHANDLEREMNAMEREQTIMEOUTNORSPCANCELNAMEREQ_TRY_CANCEL_NAME_REQUEST_OF_TOKENxD,"MeHandleRemNameReqTimeoutNoRspCancelNameReq(): Try cancel name request of token=%d")
    TRC_MSG(BTLOG_ME_WRITE_LINK_POLICY_STATUS__xX,"The link policy status:%02x")
    TRC_MSG(BTLOG_CMGR_CREATE_LINK_NO_OK,"CMGR_CreateDataLink():Not success or pending  from ME_CreateLink,status=%d")
    TRC_MSG(BTLOG_START_MONITOR_NUM_COMPLETED_PKTS_TIMER,"Start a monitor_0X13_Event_Timer inx=%d, hicHandle=%08X,pktsent=%d")
    TRC_MSG(BTLOG_STOP_MONITOR_NUM_COMPLETED_PKTS_TIMER,"Stop monitor_0X13_Event_Timer inx=%d, hciHandle=%08X")
    TRC_MSG(BTLOG_0X13_EVENT_TIMEOUT,"0X13_Event_Timeout:link=%08X,state=%d,hciHandle=%08X,pktsent=%d")
    
    /* New Modified Traces for LV Parsing and Representation*/
    TRC_MSG(BTLOG_BTBM_MASTERNUM_SLAVENUM,"BTLOG:BTBM:NET_INFO:MasterNum=%d,SlaveNum=%d")
    TRC_MSG(BTLOG_BTBM_PICONETNUM_SCATTERNETNUM,"BTLOG:BTBM:NET_INFO:PiconetNum=%d,ScatternetNum=%d")
    TRC_MSG(BTLOG_BTBM_LINK_NUMBER_NOT_IN_DISCONNECTED_STATEBT, "BTLOG:BTBM:LINK_INFO:LinkNum_Not_In_DISC_State=%d")
    TRC_MSG(BTLOG_BTBM_SCONUM_ESCONUM, "BTLOG:BTBM:LINK_INFO:ScoNum=%d,EScoNum=%d")
    TRC_MSG(BTLOG_ME_CONNECTION_COMPLETE_EVENT_STATUS,"BTLOG:ME:LINK_INFO:Connection_Complete_Event_Status=0x%02X, Encryption_Enabled=%d")
    TRC_MSG(BTLOG_ME_ACL_CONNECT_COMPLETE_EVENT,"BTLOG:ME:LINK_INFO:ACL_Connect_Complete_Event")
    TRC_MSG(BTLOG_ME_SCO_CONNECT_COMPLETE_EVENT,"BTLOG:ME:LINK_INFO:SCO_Connect_Complete_Event")
    TRC_MSG(BTLOG_ME_ACL_CONNECTION_COMPLETE_EVENT_HCIHANDLE,"BTLOG:ME:LINK_INFO:ACL_Connection_Complete_Event_hciHandle=%04X")
    TRC_MSG(BTLOG_ME_SCO_CONNECTION_COMPLETE_RESULT_HCIHANDLE,"BTLOG:ME:LINK_INFO:SCO_Connection_Complete_Event_Result=0x%02X,hciHandle=0x%04X")
    TRC_MSG(BTLOG_ME_DISCONNECT_COMPLETE_EVENT_STATUS_REASON,"BTLOG:ME:LINK_INFO:Disconnect_Complete_Event_Status=0x%02X,Reason=0x%02X")
    TRC_MSG(BTLOG_ME_ACL_DISCONNECT_COMPLETE_EVENT_HCIHANDLE,"BTLOG:LINK_INFO:ME:ACL_Disconnect_Complete_Event_hciHandle=%04X")
    TRC_MSG(BTLOG_ME_SCO_DISCONNECT_COMPLETE_EVENT_HCIHANDLE,"BTLOG:ME:LINK_INFO:SCO_Disconnect_Complete_Event_hciHandle=%04X")
    TRC_MSG(BTLOG_BTBM_NEW_ROLE_IS_REPORTED_WITH_OPTYPE,"BTLOG:ME:ROLE_INFO:NewRole=%d,hciHandle=%04X,triggered by opType=%02X")
    TRC_MSG(BTLOG_BTBM_HANDLEROLESWITCHCFM_SWITCHSTATE,"BTLOG:BTBM:ROLE_INFO:HandleRoleChange,switchState=%02X,NewRole=%d,hciHandle=%04X")
    TRC_MSG(BTLOG_ME_SWITCH_ROLE_OPERATION_ENDED_STATUS,"BTLOG:ME:ROLE_INFO:Switch_Role_Operation_Ended_Status=0x%02X")
    TRC_MSG(BTLOG_HCI_INSERT_HCI_COMMAND_TO_LIST,"BTLOG:HCI:HCICMD_INFO:Insert_CmdList_HciCmd=%04X")
    TRC_MSG(BTLOG_UART_SEND_HCI_COMMAND,"BTLOG:UART:HCICMD_INFO:Uart_Send_HciCmd_Opcode=%04X")
    TRC_MSG(BTLOG_ME_HCIGENCMD_HANDLED,"BTLOG:ME:HCICMD_INFO:HCICmd(Non_HCCcmd)_Sent_and_Handled")
    TRC_MSG(BTLOG_ME_RX_EVENT,"BTLOG:ME:HCIEVENT_INFO:ME_RX_Event=%02X")
    TRC_MSG(BTLOG_ME_HANDLE_MOD_CHANGE,"BTLOG:ME:MODE_INFO:Handle_Mode_Change_Event,handle=0x%04X New_Mode=0x%02X")
    TRC_MSG(BTLOG_SEND_UART_ACL_DATA,"BTLOG_UART_DUMP:send UART ACL data hcihandle=0x%02x %02x, PB flag=0x%02x, length=%d")   /* UART_DUMP */
    TRC_MSG(BTLOG_RECV_UART_ACL_DATA,"BTLOG_UART_DUMP:receive UART ACL data hcihandle=0x%02x %02x, PB flag=0x%02x, length=%d")   /* UART_DUMP */
    TRC_MSG(BTLOG_UART_TRANSMIT_DATA, "mtkuartTransmitData: total=0x%x, written=-0x%x")
    TRC_MSG(BTLOG_UART_READ,"BTLOG_UART_DUMP:UART_Read() is called, length passed=%d, length returned=%d")   /* UART_DUMP */
    TRC_MSG(BTLOG_UART_WRITE,"BTLOG_UART_DUMP:UART_Write() is called, length passed=%d, length returned=%d")   /* UART_DUMP */
    TRC_MSG(BTLOG_ME_EVENT_STATUS,"BTLOG:ME:EVENT_STATUS=0x%02X")
    TRC_MSG(BTLOG_OPEN_DRIVE_FAILED,"BTLOG:Open drive failed %d")
    TRC_MSG(BTLOG_BT_ALREADY_POWERED_ON,"BTLOG:BT already power on")
    TRC_MSG(BTLOG_CREATE_CONNECTION_CLOCK_OFFSET_SR_MODE,"BTLOG:Create Connection Clock offset=0x%02x%02x, SR mode=0x%02x")
    
    TRC_MSG(BT_PANIC_MESSAGE1,"BT task rx panic message")
    TRC_MSG(BT_PANIC_MESSAGE2,"BT task panic BMA Timeout")
    TRC_MSG(BT_PANIC_MESSAGE3,"BT task host wakeup greater then 3")
    TRC_MSG(BT_PANIC_MESSAGE4,"BT task rx hardware error, %02x,%02x,%02x,%02x")
    TRC_MSG(BT_PANIC_MESSAGE5,"BT task rx buffer overflow, %02x,%02x,%02x,%02x")
    TRC_MSG(BT_PANIC_MESSAGE6,"BT task rx flow control failed")
    TRC_MSG(BT_PANIC_MESSAGE7,"BT task rx number too much")
    TRC_MSG(BT_IN_SCO_CONNECT_REQ_NO_ROLE_SWITCH,"BT is in SCO connect procedure, not to perform role-switch")
    TRC_MSG(BT_IN_ROLE_SWITCH_NO_SCO,"CMGR: BT is in role-switch, no SCO link")

    TRC_MSG(BTLOG_BTCALL_GAPTESTERCREATECHANNEL,"BTlog BTcall gapTesterCreateChannel")
    TRC_MSG(BTLOG_BTCALL_AVDT_RE_CONFIGURATION_RSP,"BTlog BTcall AVDT_Re_Configuration_Rsp")
    TRC_MSG(BTLOG_BTROLE_SWITCH_NOT_SUPPORTED,"BTlog BTRole switch not supported")
    TRC_MSG(BTLOG_BTROLE_SWITCH_WAIT_AUTHENTICATED,"BTlog BTRole switch can not perform due authentication not completed")
    TRC_MSG(BTLOG_BTCALL_AVDT_CLOSE_RSP,"BTlog BTcall AVDT_Close_Rsp")
    TRC_MSG(BTLOG_BTBTBMHANDLEENCRYPTIONCFM_SWITCHSTATE_BT_DEBUGx02X,"BTlog BTbtbmHandleEncryptionCfm switchState: %02x")
    TRC_MSG(BTLOG_BTBTBMHANDLEENCRYPTIONCFM_SWITCHSTATE_x02X,"BTlog BTbtbmHandleEncryptionCfm switchState: %02x")
    TRC_MSG(BTLOG_AVRCP_COULDNT_SEND_COMMAND,"BTlog AVRCP: Couldn't send command.")
    TRC_MSG(BTLOG_BTCALL_GAPTESTERGENERALDISCOVERABLEMODE,"BTlog BTcall gapTesterGeneralDiscoverableMode")
    TRC_MSG(BTLOG_BTCALL_RFCOMMTESTERINIT,"BTlog BTcall RfcommTesterInit")
    TRC_MSG(BTLOG_BTCALL_L2CAPTESTERINIT,"BTlog BTcall l2capTesterInit")
    TRC_MSG(BTLOG_BTCALL_AVDT_OPEN_REQ,"BTlog BTcall AVDT_Open_Req")
    TRC_MSG(BTLOG_BTCALL_GAPTESTERINIT,"BTlog BTcall gapTesterInit")
    TRC_MSG(BTLOG_BTCALL_SDPTESTERINIT,"BTlog BTcall SdpTesterInit")
    TRC_MSG(BTLOG_TRY_TO_READ_REMOTE_LMP_FEATURE,"BTlog Try to read remote LMP feature")
    TRC_MSG(BTLOG_BTCALL_GAPTESTERLIMITEDDISCOVERABLEMODE,"BTlog BTcall gapTesterLimitedDiscoverableMode")
    TRC_MSG(BTLOG_BTBTBM_MODE_AS_MASTER,"BTlog BTBTBM Mode As master")
    TRC_MSG(BTLOG_BTLOG_BTWIFICPTA_CMD_WAIT_0,"BTlog BTlog BTWIFIC(pta_cmd_wait) !=0")
    TRC_MSG(BTLOG_BTCALL_RFCOMMTESTEROPENCLIENTCHANNEL,"BTlog BTcall RfcommTesterOpenClientChannel")
    TRC_MSG(BTLOG_BTCALL_RFCOMMTESTERSENDPN,"BTlog BTcall RfcommTesterSendPN")
    TRC_MSG(BTLOG_BTROLE_SWITCH_ON_THE_OPLIST_REUTRN,"BTlog BTRole Switch on the opList, reutrn")
    TRC_MSG(BTLOG_BTSTART_SNIFF_REQ_OP_ON_THE_LIST_RETURN,"BTlog BTStart Sniff req, op on the list, return")
    TRC_MSG(BTLOG_BTSTART_QOS_OP_ON_THE_LIST_RETURN,"BTlog BT QoS req, op on the list, return")
    TRC_MSG(BTLOG_ME_SETUP_QOS,"ME_SetUpQoS(): req role=%d, cur role=%d")
    TRC_MSG(BTLOG_ME_SETUP_QOS_AFTER_ROLE_SWITCH,"Re-setup QoS after role switch")
    TRC_MSG(BTLOG_BTCALL_GAPTESTERNONPAIRABLE,"BTlog BTcall gapTesterNonPairable")
    TRC_MSG(BTLOG_BTCALL_L2CA_DISCONNECTREQ,"BTlog BTcall L2CA_DisconnectReq")
    TRC_MSG(BTLOG_BTMTKBMCBM_OPACTIVITYxD_CAN_NOT_CHANGE_TO_NORMAL,"BTlog BTMTKBMC(bm_opactivity):%d, can not change to normal")
    TRC_MSG(BTLOG_BTCALL_GAPTESTERSECURITYLEVEL3,"BTlog BTcall gapTesterSecurityLevel3")
    TRC_MSG(BTLOG_BTACL_AND_SCO_REMDEV__0,"BTlog BTAcl and SCO remDev == 0")
    TRC_MSG(BTLOG_BTCALL_RFCOMMTESTERSENDMSC,"BTlog BTcall RfcommTesterSendMSC")
    TRC_MSG(BTLOG_BTSDP_QUERY_QUERY_BT_STATUS_PENDING,"BTlog BTSDP_Query query BT_STATUS_PENDING")
    TRC_MSG(BTLOG_BTCALL_AVDT_READ_DATA,"BTlog BTcall AVDT_Read_Data")
    TRC_MSG(BTLOG_BTCALL_GAPTESTERNONDISCOVERABLEMODE,"BTlog BTcall gapTesterNonDiscoverableMode")
    TRC_MSG(BTLOG_BTBTBM_DO_SEC_SETLINKENCRYPTION_STATUSBT_DEBUGx02X,"BTlog BTBTBM Do SEC_SetLinkEncryption status:%02x")
    TRC_MSG(BTLOG_BTCALL_AVDT_CONNECTREQ,"BTlog BTcall AVDT_ConnectReq")
    TRC_MSG(BTLOG_BTDEVICE_IS_SLAVE_AND_CONNECTED,"BTlog BTDevice is slave and connected")
    TRC_MSG(BTLOG_BTCALL_AVDT_RECONFIGURE_REQ,"BTlog BTcall AVDT_ReConfigure_Req")
    TRC_MSG(BTLOG_BTCALL_RFCOMMTESTERDATAREQ,"BTlog BTcall RfcommTesterDataReq")
    TRC_MSG(BTLOG_BTCALL_GAPTESTERNONCONNECTABLEMODE,"BTlog BTcall gapTesterNonConnectableMode")
    TRC_MSG(BTLOG_BTMT6601_SPECIAL_CONNECTION_PROCEDURE,"BTlog BTMT6601 special connection procedure")
    TRC_MSG(BTLOG_BTCALL_GAPTESTERCONNECTABLEMODE,"BTlog BTcall gapTesterConnectableMode")
    TRC_MSG(BTLOG_BTVALUE0BT_DEBUGx02XVALUE1BT_DEBUGx02X,"BTlog BTvalue[0]:%02x,value[1]:%02x")
    TRC_MSG(BTLOG_RESTART_CONNECTTIMER,"BTlog Restart connectTimer")
    TRC_MSG(BTLOG_BTLOG_MAKE_THE_PTA_ON,"BTlog BTlog Make the PTA ON")
    TRC_MSG(BTLOG_BTGAPTESTERDELETELINKKEY,"BTlog BTgapTesterDeleteLinkKey")
    TRC_MSG(BTLOG_BTCALL_AVDT_SET_CONFIGURATION_REQ,"BTlog BTcall AVDT_Set_Configuration_Req")
    TRC_MSG(BTLOG_BTTIMEOUT_TIMERFIRED,"BTlog BTTimeout: TimerFired()")
    TRC_MSG(BTLOG_BTWRITESCAN_MODE_OPERATION_FAILEDBT_DEBUGx02X,"BTlog BTWriteScan Mode operation failed:%02x")
    TRC_MSG(BTLOG_BTCALL_AVDT_ABORT_REQ,"BTlog BTcall AVDT Abort Req")
    TRC_MSG(BTLOG_BTSDP_QUERY_QUERY_BT_STATUS_FAILED_xD,"BTlog BTSDP_Query query BT_STATUS_FAILED %d")
    TRC_MSG(BTLOG_BTCALL_RFCOMMTESTERCLOSECHANNEL,"BTlog BTcall RfcommTesterCloseChannel")
    TRC_MSG(BTLOG_BTROLE_SWITCH_SUPPORTED,"BTlog BTRole switch supported")
    TRC_MSG(BTLOG_BTINQUIRY_CANCEL_BM_OPACTIVITYBT_DEBUGx02X,"BTlog BTInquiry cancel bm_opactivity:%02x")
    TRC_MSG(BTLOG_CONNECTION_REJECT_WHEN_WE_CONNECT_TIMER_START_AND_REMOTE_DEVICE_WANTS_TO_CONNECT_US,"BTlog Connection Reject when we connect timer start and remote device wants to connect us")
    TRC_MSG(BTLOG_BTCOMMAND_COMPLETE_OF_PCM_LOOPBACK,"BTlog BTcommand complete of PCM Loopback")
    TRC_MSG(BTLOG_BTLOG_BTWIFICREF_COUNTxD,"BTlog BTlog BTWIFIC(ref_count):%d")
    TRC_MSG(BTLOG_CANCELx08X,"BTlog cancel:%08x")
    TRC_MSG(BTLOG_BTINQUIRY_CANCEL_WHEN_NAME_TIMER_RUNNING,"BTlog BTInquiry cancel when name timer running")
    TRC_MSG(BTLOG_BTCALL_GAPTESTERPAIRABLE,"BTlog BTcall gapTesterPairable")
    TRC_MSG(BTLOG_AVRCP_COULDNT_SEND_RESPONSE,"BTlog AVRCP: Couldn't send response.")
    TRC_MSG(BTLOG_BTWE_SHALL_START_PIN_IND_TIMER,"BTlog BTWe shall start PIN Ind timer")
    TRC_MSG(BTLOG_BTCALL_L2CAPSENDDATA,"BTlog BTcall L2capSendData")
    TRC_MSG(BTLOG_BTCALL_GAPTESTERSECURITYLEVEL1,"BTlog BTcall gapTesterSecurityLevel1")
    TRC_MSG(BTLOG_BTCALL_GAPTESTERDEVICEDISCOVERY,"BTlog BTcall gapTesterDeviceDiscovery")
    TRC_MSG(BTLOG_TRY_TO_READ_REMOTE_LMP_FEATURE_ERRORBT_DEBUGx02X,"BTlog Try to read remote LMP feature error:%02x")
    TRC_MSG(BTLOG_BTDONT_WAIT_MMI_CONNECT_RSP_REJECT_NEW_CONENCTION,"BTlog BTdont wait MMI connect rsp, reject new conenction")
    TRC_MSG(BTLOG_SUPPORTED_FEATUREBT_DEBUGx02X_BT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X_BT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X,"BTlog Supported feature:%02x, %02x,%02x,%02x,%02x, %02x,%02x,%02x")
    TRC_MSG(BTLOG_BTBTBMHANDLEROLESWITCHCFM_SWITCHSTATE_BT_DEBUGx02X,"BTlog BTbtbmHandleRoleSwitchCfm switchState: %02x")
    TRC_MSG(BTLOG_BTCALL_BTTESTER_SENDMSG,"BTlog BTcall btTester_sendMsg")
    TRC_MSG(BTLOG_BTCALL_AVDT_GET_CAPABILITIES_RSP,"BTlog BTcall AVDT_Get_Capabilities_Rsp")
    TRC_MSG(BTLOG_BTCALL_AVDT_SUSPEND_RSP,"BTlog BTcall AVDT_Suspend_Rsp")
    TRC_MSG(BTLOG_BTLOG_BTWIFICAFH_CMD_WAIT_0,"BTlog BTlog BTWIFIC(afh_cmd_wait) !=0")
    TRC_MSG(BTLOG_BTLOG_PTA_CHANNEL_IS_CALLED,"BTlog BTlog BtRadio_PTA_ChannelInfo() is called.") 
    TRC_MSG(BTLOG_BTCONN_STATUSBT_DEBUGx02X,"BTlog BTconn status:%02x")
    TRC_MSG(BTLOG_BTDO_SNIFFER_REQUEST,"BTlog BTDo sniffer request")
    TRC_MSG(BTLOG_BTCALL_AVDT_CLOSE_REQ,"BTlog BTcall AVDT_Close_Req")
    TRC_MSG(BTLOG_BTCALL_L2CA_INFOREQ,"BTlog BTcall L2CA_InfoReq")
    TRC_MSG(BTLOG_BTBTBMNAMEPROCEDURETIMEOUT,"BTlog BTbtbmNameProcedureTimeout")
    TRC_MSG(BTLOG_BTCALL_L2CA_CONNECTREQ,"BTlog BTcall L2CA_ConnectReq")
    TRC_MSG(BTLOG_BTCALL_GAPTESTERBONDING,"BTlog BTcall gapTesterBonding")
    TRC_MSG(BTLOG_BTCALL_AVDT_WRITE_DATA,"BTlog BTcall AVDT_Write_Data")
    TRC_MSG(BTLOG_BTBTBM_ENCRYPTION_CHANGE_TO_ON,"BTlog BTBTBM encryption change to ON")
    TRC_MSG(BTLOG_BTCALL_AVDT_SUSPEND_REQ,"BTlog BTcall AVDT_Suspend_Req")
    TRC_MSG(BTLOG_BTSTILL_WAIT_FOR_CONNECTION_COMPLETE_EVENT,"BTlog BTStill wait for connection complete event")
    TRC_MSG(BTLOG_BTCALL_L2CA_ECHOREQ,"BTlog BTcall L2CA_EchoReq")
    TRC_MSG(BTLOG_AVRCP_INVALID_RESPONSE_CODE_xD_CHANGING_TO_REJECTED,"BTlog AVRCP: Invalid response code %d, changing to REJECTED")
    TRC_MSG(BTLOG_BTINQUIRY_CANCEL_WHEN_INQUIRY_PREPROCESS_TIMER_RUNNING,"BTlog BTInquiry cancel when inquiry preprocess timer running")
    TRC_MSG(BTLOG_BTCOMMAND_COMPLETE_OF_PTA,"BTlog BTcommand complete of PTA")
    TRC_MSG(BTLOG_BTCALL_RFCOMMTESTEROPENSERVER,"BTlog BTcall RfcommTesterOpenServer")
    TRC_MSG(BTLOG_BTCALL_AVDT_SET_CONFIGURATION_RSP,"BTlog BTcall AVDT_Set_Configuration_Rsp")
    TRC_MSG(BTLOG_BTCALL_AVDT_GET_CAPABILITIES_REQ,"BTlog BTcall AVDT_Get_Capabilities_Req")
    TRC_MSG(BTLOG_BTBTBM_DO_ROLE_SWITCH,"BTlog BTBTBM Do role switch")
    TRC_MSG(BTLOG_BTBTBM_ENCRYPTION_CHANGE_TO_OFF,"BTlog BTBTBM encryption change to OFF")
    TRC_MSG(BTLOG_TRY_TO_READ_REMOTE_LMP_FEATURE_EVENT_COMPLETED,"BTlog Try to read remote LMP feature event completed")
    TRC_MSG(BTLOG_BTBTBMSTARTSPECIALSLAVEPROCEDURE,"BTlog BTbtbmStartSpecialSlaveProcedure")
    TRC_MSG(BTLOG_BTCALL_RFCOMMTESTERRLS,"BTlog BTcall RfcommTesterRls")
    TRC_MSG(BTLOG_BTCALL_AVDT_START_RSP,"BTlog BTcall AVDT_Start_Rsp")
    TRC_MSG(BTLOG_BTRETURN_CON_IDxD,"BTlog BTreturn con_id:%d")
    TRC_MSG(BTLOG_NOT_READY,"BTlog Not ready")
    TRC_MSG(BTLOG_MODE_CHANGE_STATUSBT_DEBUGx02X,"BTlog Mode change status:%02x")
    TRC_MSG(BTLOG_BTMTKBMCBM_OPACTIVITYxD,"BTlog BTMTKBMC(bm_opactivity):%d")
    TRC_MSG(BTLOG_BTGIVE_CON_IDxD,"BTlog BTgive con_id:%d")
    TRC_MSG(BTLOG_BTCALL_AVDT_DISCONNECTSIGNAL_REQ,"BTlog BTcall AVDT_DisconnectSignal_Req")
    TRC_MSG(BTLOG_BTDO_ROLE_SWITCH_WITH_FEATUREBT_DEBUGx02X,"BTlog BTDo role switch with feature:%02x")
    TRC_MSG(BTLOG_BTMASTER_NUMBERxDSLAVE_NUMBERxD,"BTlog BTMaster number:%d,slave number:%d")
    TRC_MSG(BTLOG_REMDEVCONNECTCOUNTERxD,"BTlog remDev->connectCounter:%d")
    TRC_MSG(BTLOG_BTSTATUSBT_DEBUGx02X_ENCRPSTATEBT_DEBUGx02XAUTHSTATE_BT_DEBUGx02X,"BTlog BTstatus:%02x, encrpstate:%02x,authState: %02x")
    TRC_MSG(BTLOG_BTCOMMAND_COMPLETE_OF_AFH,"BTlog BTCommand Complete of AFH")
    TRC_MSG(BTLOG_BTCOMMAND_COMPLETE_OF_PTA_CHANNEL_INFO,"BTlog BTCommand Complete of BtRadio_PTA_ChannelInfo()")    
    TRC_MSG(BTLOG_BTLINKOLDENCRYPTIONMODE_2BT_DEBUGx02X,"BTlog BTlink->oldEncryptionMode 2:%02x")
    TRC_MSG(BTLOG_STARTx08X,"BTlog start:%08x")
    TRC_MSG(BTLOG_READ_REMOTE_SUPPORTED_FEATURE_FAILEDBT_DEBUGx02X,"BTlog Read remote supported feature failed:%02x")
    TRC_MSG(BTLOG_BTSDAPPROGRESSxD,"BTlog BTSDAP(progress):%d")
    TRC_MSG(BTLOG_MAKE_CREATION_CONNECTION,"BTlog Make creation connection")
    TRC_MSG(BTLOG_BTCALL_AVDT_GET_CAPABILITIES_LONG_RSP,"BTlog BTcall AVDT_Get_Capabilities_Long_Rsp")
    TRC_MSG(BTLOG_BTCALL_GAPTESTERLIMITEDINQUIRY,"BTlog BTcall gapTesterLimitedInquiry")
    TRC_MSG(BTLOG_BTBTBMINQUIRYPROCEDURETIMEOUT,"BTlog BTbtbmInquiryProcedureTimeout: bm_opactivity = 0x%x")
    TRC_MSG(BTLOG_BTCONNECTION_IS_NOT_EXISTING_OR_BD_ADDR_IS_NOT_THE_SAME,"BTlog BTconnection is not existing or bd_addr is not the same")
    TRC_MSG(BTLOG_BTDO_ROLE_SWITCH,"BTlog BTDo role switch")
    TRC_MSG(BTLOG_BTCALL_AVDTPTESTERINIT,"BTlog BTcall AvdtpTesterInit()")
    TRC_MSG(BTLOG_BTSDAP_STATUSBT_DEBUGx02X,"BTlog BTSDAP status:%02x")
    TRC_MSG(BTLOG_BTCALL_GAPTESTERSECURITYLEVEL2,"BTlog BTcall gapTesterSecurityLevel2")
    TRC_MSG(BTLOG_BTCALL_GAPTESTERGENERALINQUIRY,"BTlog BTcall gapTesterGeneralInquiry")
    TRC_MSG(BTLOG_DEVICE_IN_NOT_DISCONNECT_MODE_IGNORE_IT,"BTlog Device in not disconnect mode, ignore it")
    TRC_MSG(BTLOG_BTCALL_AVDT_DISCOVER_RSP,"BTlog BTcall AVDT_Discover_Rsp")
    TRC_MSG(BTLOG_BTCALL_AVDT_DISCOVER_REQ,"BTlog BTcall AVDT_Discover_Req")
    TRC_MSG(BTLOG_BTBTBM_DO_ROLE_SWITCH_STATUSBT_DEBUGx02X,"BTlog BTBTBM Do role switch status:%02x")
    TRC_MSG(BTLOG_BTLINKENCRYPTSTATE_OLD_1BT_DEBUGx02X,"BTlog BTlink->encryptState old 1:%02x")
    TRC_MSG(BTLOG_BTBTBMSPECIALSLAVEPROCEDURE,"BTlog BTbtbmSpecialSlaveProcedure")
    TRC_MSG(BTLOG_BTCMD_STATUSBT_DEBUGx02X,"BTlog BTcmd status:%02x")
    TRC_MSG(BTLOG_BTBTBM_MODE_AS_SLAVE,"BTlog BTBTBM Mode As slave")
    TRC_MSG(BTLOG_BTCALL_AVDT_ABORT_RSP,"BTlog BTcall AVDT_Abort_Rsp")
    TRC_MSG(BTLOG_BTCALL_AVDT_OPEN_RSP,"BTlog BTcall AVDT_Open_Rsp")
    TRC_MSG(BTLOG_BTCALL_AVDT_START_REQ,"BTlog BTcall AVDT_Start_Req")
    TRC_MSG(BTLOG_CONNECTCOUNTER_EXCEEDS_THRESHOULD,"BTlog connectCounter exceeds threshould")
    TRC_MSG(BTLOG_BTLINKSWITCHSTATEBT_DEBUGx02X,"BTlog BTlink->switchState:%02x")
    TRC_MSG(BTLOG_BTWRITESCAN_MODE_OPERATION_IS_NOT_MATCH_REDO_AGAIN,"BTlog BTWriteScan Mode operation is not match, redo again")
    TRC_MSG(BTLOG_MECHECKDEVICESTATENOTIDLE_CHECK_CURRENT_MODE,"BTlog MeCheckDeviceStateNotIdle Check current mode")
    TRC_MSG(BTLOG_BTBTBMHANDLEPINREQTIMEOUT,"BTlog BTbtbmHandlePinReqTimeout")
    TRC_MSG(BTLOG_READ_REMOTE_SUPPORTED_FEATURE_SUCCESSBT_DEBUGx04X,"BTlog Read remote supported feature success:%04x")
    TRC_MSG(BTLOG_BTCALL_GAPTESTERCREATEACLLINK,"BTlog BTcall gapTesterCreateAclLink")
    TRC_MSG(BTTLOG_DISCONNECT_EVENT,"BTT: disconnect event")
    TRC_MSG(BTTLOG_CON_HDL_PACKET_SENT,"BTT: hdl:%02x,HCC(con)[i].packetsSent:%02x")    
    TRC_MSG(BTTLOG_CON_HDL_TX_LEFT,"BTT: hdl:%02x,HCC(aclTxPacketsLeft):%02x")        
    TRC_MSG(BTTLOG_CON_HDL_TX_STATUS,"BTT: TX a:%02x,b:%02x,c:%02x")        
    TRC_MSG(BTTLOG_CON_HDL_COMP_STATUS,"BTT: CMP d:%02x,e:%02x,f:%02x")        
    TRC_MSG(BTTLOG_CON_HDL_COMP_STATUS1,"BTT: CMP g:%02x") 
    TRC_MSG(L2CAP_Free_Open_Timer_Case2_org_discLevel_then_Disc_Link,"L2CAP Free Open Timer: org discTimeoutLevel=%d and disc ACL link after 3 sec")
    TRC_MSG(L2CAP_Free_Open_Timer_Case2_keep_50S_then_Disc_Link,"L2CAP Free Open Timer: keep 50s timeout then disc ACL")
    TRC_MSG(L2CAP_DiscAclLink_with_discFlag,"In L2CAP_DiscAclLink(): discFlag=%d")
     
    TRC_MSG(WRITE_SUPERVISION_TIMEOUT,"write supervision timeout")
    TRC_MSG(CHNLTXSTATEBT_DEBUGx02X,"chnl->txState:%02x")
    TRC_MSG(WAIT_CONECTION_ACP_RSPBT_DEBUGx02X,"wait_conection_acp_rsp:%02x")
    TRC_MSG(DISCONNECT_SCO_WITH_ERROR_NO_CONNECTION,"Disconnect SCO with error No connection")
    TRC_MSG(NO_BTACCCTRLCHECKPSMPOLICY,"No BTAccCtrlCheckPSMPolicy")
    TRC_MSG(THE_LINK_STATEBT_DEBUGx02X,"The link state:%02x")
    TRC_MSG(WHITTEN_COMPLETED_PARM3BT_DEBUGx02X,"Whitten completed, parm[3]:%02x")
    TRC_MSG(UATRAN_EVENT_PARAMETER_LENGTH__xD,"UATRAN: Event parameter length = %d")
    TRC_MSG(START_SERVICE_DISCOVERY_SSA_COMMAND_BT_DEBUGx02X,"Start service discovery ssa command :%02x")
    TRC_MSG(CHANNEL_DISCONNECT_COMPLETED,"Channel disconnect completed")
    TRC_MSG(CONNMGR_BTEVENT_MODE_CHANGE,"Connmgr BTEVENT_MODE_CHANGE")
    TRC_MSG(MSG_ID_BT_BM_DISCOVERY_CNF_TRC,"MSG_ID_BT_BM_DISCOVERY_CNF")
    TRC_MSG(UATRAN_NO_SCO_RECEIVER_BUFFER_AVAILABLE,"UATRAN: No SCO receiver buffer available")
    TRC_MSG(FAKESIM_RECEIVES_BT_SIM_RESET_REQ_DUE_TO_POWERON,"FakeSim receives BT_SIM_RESET_REQ due to POWERON")
    TRC_MSG(CLEAR_MUX_FLAG_XMIT_FLAG3,"Clear MUX_FLAG_XMIT flag#3")
    TRC_MSG(CHECK_FTP_POLICY,"Check FTP policy")
    TRC_MSG(USBTRAN_EVENT_BUFFER_NOW_AVAILABLE,"USBTRAN: Event Buffer Now Available")
    TRC_MSG(RETURN_STATUSBT_DEBUGx04X,"Return status:%04x")
    TRC_MSG(OPCODEBT_DEBUGx04X,"opcode:%04x")
    TRC_MSG(SEND_CONTINUE_CHNL_STATE_IS_AVTP_TRANS_STATE_FIRST,"Send Continue, chnl state is AVTP_TRANS_STATE_FIRST")
    TRC_MSG(TRANS_NO_EVENT_BUFFERS,"TRANS: no Event buffers")
    TRC_MSG(RETURN_STATUSx08X,"Return status:%08x")
    TRC_MSG(JSR82_SESSION_TX_1_DATA,"JSR82 session tx 1 data")
    TRC_MSG(NO_PREVIOUS_NAME_REQUEST_ON_GOING_JUST_DO_IT,"no previous name request on going, just do it")
    TRC_MSG(ITEMBT_DEBUGx02X,"item:%02x")
    TRC_MSG(NO_SIGNAL_PKT1,"No signal pkt1")
    TRC_MSG(LOOPBACK_MODE_COMPLETED,"Loopback mode completed")
    TRC_MSG(WRITE_SUPERVISIONTIMEOUT,"write supervisiontimeout")
    TRC_MSG(VERSION_COMPLETEDBT_DEBUGx02X,"version completed:%02x")
    TRC_MSG(FIND_JSR82_CHANNEL_BT_DEBUGx02X,"Find jsr82 channel :%02x")
    TRC_MSG(START_SERVICE_DISCOVERY_SS_COMMAND_BT_DEBUGx02X,"Start service discovery ss command :%02x")
    TRC_MSG(BD_ADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X,"bd_addr:%02x,%02x,%02x,%02x,%02x,%02x")
    TRC_MSG(ACL_IN_BONDING,"ACL in bonding")
    TRC_MSG(INQUIRY_INTERVAL_TIMEOUT,"Inquiry interval timeout")
    TRC_MSG(INQUIRY_DUAL_INTERVAL_TIMEOUT,"Inquiry dual interval timeout: mode=%d")
    TRC_MSG(STOPPED_TO_TEST_THE_BTBB_TEST,"Stopped to test the BTBB test")
    TRC_MSG(MTKBMCHID_BROADCOM_IOT_ROLE_SWITCHBT_DEBUGx02X,"MTKBMC(hid_broadcom_iot_role_switch):%02x")
    TRC_MSG(START_INQUIRY_CANCEL_COMMAND_BT_DEBUGx02X,"Start inquiry cancel command :%02x")
    TRC_MSG(ABCSP_PANIC_xD,"ABCSP: panic() %d.")
    TRC_MSG(ONE_SCO_IN_CON,"one sco in con")
    TRC_MSG(REQUEST_ACTIVE_LINK_NAME_TIMER_TIMEOUT,"Request active link name timer timeout")
    TRC_MSG(HID_SET_MODEBT_DEBUGx02X,"HID Set mode:%02x")
    TRC_MSG(BT_CHIP_VERSIONBT_DEBUGx02X,"BT chip version:%02x")
    TRC_MSG(FAKESIM_RECEIVES_BT_SIM_RESET_REQ,"FakeSim receives BT_SIM_RESET_REQ")
    TRC_MSG(NO_MATCH_BLUETOOTH_ADDRESS,"No match bluetooth address")
    TRC_MSG(SENDRAWPACKETA,"SendRawPacket:A")
    TRC_MSG(CHECK_OPP_POLICY,"Check OPP policy")
    TRC_MSG(MSG_ID_BT_BM_SEARCH_RAW_RESULT_TRC,"MSG_ID_BT_BM_SEARCH_RAW_RESULT")
    TRC_MSG(BTACCCTRLCHECKSERVICEPOLICY_DENY,"BTAccCtrlCheckServicePolicy Deny")
    TRC_MSG(RFMDCMD_HCC_CHANGEBAUDRATE_TO_xD,"RFMDcmd_HCC_ChangeBaudRate to :%d")
    TRC_MSG(FAKESIM_RECEIVES_BT_SIM_APDU_REQ,"FakeSim receives BT_SIM_APDU_REQ")
    TRC_MSG(BLACKLIST_SEARCHED,"BlackList searched")
    TRC_MSG(MTKBMCINQUIRY_TIMERFUNC__0,"MTKBMC(inquiry_preprocess_timer).func != 0")
    TRC_MSG(SNIFFER_TIMER_SHALL_REOPEN,"Sniffer timer shall reopen")
    TRC_MSG(REMOTE_VERSION,"remote version")
    TRC_MSG(INQUIRY_START,"inquiry start")
    TRC_MSG(TRY_TO_OPEN_RFCOMM_CHANNEL,"Try to open RFCOMM channel")
    TRC_MSG(MSG_ID_BT_JSR82_DISABLE_SERVICE_CNF_TRC,"MSG_ID_BT_JSR82_DISABLE_SERVICE_CNF")
    TRC_MSG(UATRAN_UARTSLEEP_CNT_xD,"UATRAN: uartSleep() cnt: %d")
    TRC_MSG(INQUIRY_IN_GUIDE_TIME,"Inquiry in guide time")
    TRC_MSG(DEVICE_WIREVO,"DEVICE WIREVO")
    TRC_MSG(RETURN_FROM_RFSENDDATAINTERNALSTATUSxD_ON_DLCIxD,"Return from RfSendDataInternal(),status=%d, on DLCI=0x%02x")
    TRC_MSG(TRANS_NO_ACL_BUFFERS,"TRANS: no ACL buffers")
    TRC_MSG(NEW_LINK_AND_STORED_LINK_IS_NOT_THE_SAME,"New link and stored link is not the same")
    TRC_MSG(MECBTCHIPVERxD,"MEC(btChipVer):%d")
    TRC_MSG(REGISTRATION_STATUSBT_DEBUGx02X,"Registration status:%02x")
    TRC_MSG(BT_JSR82_SESSIONAPCONNECTRSP,"bt_jsr82_SessionApConnectRsp")
    TRC_MSG(TRANS_SHUTDOWN,"TRANS: Shutdown")
    TRC_MSG(COMMAND_STATUS_EVENT_WITH_OPCODE_FCF1,"Command status event with opcode FCF1")
    TRC_MSG(AVTP_SENDCONTINUEBT_DEBUGx02X,"AVTP_SendContinue:%02x")
    TRC_MSG(MTKACCCTLCACCLINK__0,"MTKACCCTLC(accLink) != 0")
    TRC_MSG(AVDTP_HDL_CMDBT_DEBUGx02X,"AVDTP Hdl cmd:%02x")
    TRC_MSG(BT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X,"%02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x")
    TRC_MSG(NO_BTACCCTRLCHECKCONNECTPOLICY,"No BTAccCtrlCheckConnectPolicy")
    TRC_MSG(BTACCCTRLDISALLOWDEVICEALLSERVICE,"BTAccCtrlDisAllowDeviceAllService")
    TRC_MSG(REQUEST_ACTIVE_LINK_NAME_TIMER_STOP,"Request active link name timer stop")
    TRC_MSG(L2CAP_RX_DATA_IND,"l2cap rx data ind")
    TRC_MSG(START_SERVICE_DISCOVERY_SA_COMMAND_BT_DEBUGx02X,"Start service discovery sa command :%02x")
    TRC_MSG(NO_SIGNAL_PKT4,"No signal pkt4")
    TRC_MSG(BT_JSR82_SESSIONAPCONNECTINDEVENT,"bt_jsr82_SessionApConnectIndEvent")
    TRC_MSG(IN_THIS_MODE_TEST_SAP_WITHOUT_SNIFF_MODE_SUPPORT,"In this mode, test SAP without sniff mode support")
    TRC_MSG(CURRENT_TX_STREAM_IS_NOT_IDLE,"current Tx Stream is not idle")
    TRC_MSG(JSR82_NO_EMPTY_CHANNEL,"jsr82 no empty Channel")
    TRC_MSG(BT_JSR82_CONNECT_IND_SIZEBT_DEBUGx02X,"bt_jsr82_connect_ind size:%02x")
    TRC_MSG(DISCONNECT_SCO_WITH_ERROR_BEC_INVALID_HCI_PARM,"Disconnect SCO with error BEC_INVALID_HCI_PARM")
    TRC_MSG(TRANS_USB_COULD_NOT_WRITE_DATA,"TRANS: USB could not write data")
    TRC_MSG(FAKESIM_RECEIVES_BT_SIM_DISCONNECT_REQ,"FakeSim receives BT_SIM_DISCONNECT_REQ")
    TRC_MSG(IN_RF_SENDDATA_DATA_SENT_ON_DLCIxD_PKTINTRANSITxD,"In RF_SendData(), data sent on DLCI=0x%02x, pktinTransit=%d")
    TRC_MSG(RFCOMM_CLIENT,"RFCOMM Client")
    TRC_MSG(MTKBMCNAME_CANCEL_TIMERFUNC__0,"MTKBMC(name_cancel_timer).func != 0")
    TRC_MSG(BT_JSR82_ENABLE_SERVICE_REQ_SIZEBT_DEBUGx02X,"bt_jsr82_enable_service_req size:%02x")
    TRC_MSG(MEHANDLEACLCONCOMPLETE,"MeHandleAclConComplete")
    TRC_MSG(INQUIRY_RETRIEVEDEV,"inquiry retrievedev")
    TRC_MSG(ACL_IN_NORMAL,"ACL in normal")
    TRC_MSG(OPEN_CHANNEL_FAILED,"Open Channel failed")
    TRC_MSG(ALLOWED_SERVICEx08X,"Allowed Service:%08x")
    TRC_MSG(MSG_ID_BT_JSR82_CONNECT_REQ_TRC,"MSG_ID_BT_JSR82_CONNECT_REQ")
    TRC_MSG(MECBTLMPVERxD,"MEC(btLMPVer):%d")
    TRC_MSG(REMOTE_NAME_CANCEL_SUCCESS,"remote name cancel success")
    TRC_MSG(REMOTE_NAME_CANCEL_PENDING,"remote name cancel pending")
    TRC_MSG(SESSION_CREATE_FAILED,"Session create failed")
    TRC_MSG(BDADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X,"bdaddr:%02x,%02x,%02x,%02x,%02x,%02x")
    TRC_MSG(CURRENT_LINK_STATEBT_DEBUGx02X,"Current link state:%02x")
    TRC_MSG(RFMDCMD_HCC_RESET,"RFMDcmd_HCC_RESET")
    TRC_MSG(HANDLE_SCOHANDLELINKCONNECTREQ_ERROR,"Handle ScoHandleLinkConnectReq error")
    TRC_MSG(BD_ADDR_BT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X,"bd addr %02x:%02x:%02x:%02x:%02x:%02x")
    TRC_MSG(SEC_LEVEL_TYPExD_SEC_LEVELxD,"sec level type:%d, sec level:%d")
    TRC_MSG(THE_INPUT_ADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X,"The input addr:%02x,%02x,%02x,%02x,%02x,%02x")
    TRC_MSG(MSG_ID_BT_BM_SEARCH_RAW_CNF_TRC,"MSG_ID_BT_BM_SEARCH_RAW_CNF")
    TRC_MSG(STATUS_APDU_AND_P3_LENBT_DEBUGx02X,"Status APDU and P3 len=%02x")
    TRC_MSG(ENTER_SNIFF_MODE,"enter sniff mode")
    TRC_MSG(IN_RFAPPCALLBACK_PACKETSINTRANSITxD,"In RfAppCallback(): packetsInTransit=%d")
    TRC_MSG(BD_ADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X_IN_STATE,"bd_addr:%02x,%02x,%02x,%02x,%02x,%02x in state:0x%02x")
    TRC_MSG(BTACCCTRLALLOWDEVICEALLSERVICE,"BTAccCtrlAllowDeviceAllService")
    TRC_MSG(TRAN_INIT_STARTED,"TRAN:  Init started")
    TRC_MSG(RFEVENT_CLOSE_IND_TRC,"RFEVENT_CLOSE_IND")
    TRC_MSG(CHANNEL_OPENED,"Channel opened")
    TRC_MSG(BTBMHANDLERINQUIRYINTERVALPROCEDURE,"btbmHandlerInquiryIntervalProcedure")
    TRC_MSG(BTJ82SEAPSESSIONINDEXPS_TYPEBT_DEBUGx02X,"BTJ82SEAP(session)[index].ps_type:%02x")
    TRC_MSG(BTBBTESTSPPCALLBACKFUNC_BT_DEBUGx02X,"btBBTestSppCallbackFunc :%02x")
    TRC_MSG(AVTP_EVENT_TX_ERROR_TRC,"AVTP_EVENT_TX_ERROR")
    TRC_MSG(BTACCCTRLSET_ALLOWEDPSMxDALLOWEDSERVICExD,"BTAccCtrlSet: allowedPSM=%d,allowedService=%d")
    TRC_MSG(RESULT_VALUEBT_DEBUGx02X,"result value:%02x")
    TRC_MSG(BT_CODx08X,"cod:%08x")
    TRC_MSG(IN_RFMUXCHECKTXQUEUESPACKETSINTRANSITxD,"In RfMUXCheckTxQueues():packetsInTransit=%d")
    TRC_MSG(AUDIO_LINK_TYPEBT_DEBUGx02X,"Audio link type:%02x")
    TRC_MSG(CANCELLING_STATE_IGNORE_THE_RESULT,"Cancelling state, ignore the result")
    TRC_MSG(MSG_ID_BT_JSR82_CONNECT_RSP_TRC,"MSG_ID_BT_JSR82_CONNECT_RSP")
    TRC_MSG(BTBBTESTITEM_RESULTBT_DEBUGx02X,"BTBBTestItem result:%02x")
    TRC_MSG(START_INQUIRY_COMPLETED_COMMAND_BT_DEBUGx02X,"Start inquiry completed command :%02x")
    TRC_MSG(GAPTESTER_SET_FILTER_COD_TO_0XFFFFFFFF,"GapTester set filter cod to 0xFFFFFFFF")
    TRC_MSG(MSG_ID_BT_JSR82_ENABLE_SERVICE_REQ_TRC,"MSG_ID_BT_JSR82_ENABLE_SERVICE_REQ")
    TRC_MSG(USBTRAN_SCO_BUFFER_NOW_AVAILABLE,"USBTRAN: SCO Buffer Now Available")
    TRC_MSG(RFMDCMD_HCC_WRITENVRAMDATA,"RFMDcmd_HCC_WriteNvramData")
    TRC_MSG(RX_DATA_EXCEED_ACCEPTABLE_VALUEBT_DEBUGx04X,"Rx data exceed acceptable value:%04x")
    TRC_MSG(REGISTRATION_SECURITY_RECORD_STATUSBT_DEBUGx02X,"Registration security record status:%02x")
    TRC_MSG(NO_A2DP_DATA_STREAMMING,"No A2DP data streamming")
    TRC_MSG(REJECT_OP_ENTRY_IS_NOT_AVAILABLEBT_DEBUGx02X,"reject Op Entry is not available:%02x")
    TRC_MSG(SET_PIN_CODE_RSP_TIMEOUT_VALUE,"SET PIN CODE RSP TIMEOUT Value")
    TRC_MSG(RFAPPCALLBACKPKT_ON_DLCIxD_RETURNED_WITH_STATUSxDCALL_RFMUXCHECKTXQUEUES,"RfAppCallback:Pkt on DLCI=0x%02x returned with status=%d,call RfMUXCheckTxQueues")
    TRC_MSG(BROADCOM_CHIP_HID_EXIST_NO_ROLE_SWITCH,"BroadCom chip, hid exist, no role switch")
    TRC_MSG(INQUIY_TIME_INTERVALxD,"Inquiy time interval:%d")
    TRC_MSG(ONE_SCO_OUT_CON2,"one sco out con2")

    TRC_MSG(CHECK_SPPDUNLAN_POLICY,"Check SPP,DUN,LAN policy")
    TRC_MSG(BT_JSR82_SESSIONAPCONNECTCFNEVENT,"bt_jsr82_SessionApConnectCfnEvent")
    TRC_MSG(IN_MEHANDLELINKREJECTOPMECPENDCONSxD,"In MeHandleLinkRejectOp():MEC(pendCons)=%d")
    TRC_MSG(DISCOVERY_DATA_SIZExD_WITH_RESULTBT_DEBUGx02X,"Discovery data size:%d with result:%02x")
    TRC_MSG(AVDTP_RX_ABORT_CMD_WITH_NO_VALID_STREAM_IDxD,"AVDTP Rx Abort cmd with no valid stream id:%d")
    TRC_MSG(L2CAP_ID_BT_DEBUGx04X,"l2cap_id :%04x")
    TRC_MSG(RESULT_BT_DEBUGx02X,"result :%02x")
    TRC_MSG(LENGTH_BT_DEBUGx02X,"length :%02x")
    TRC_MSG(ALREADY_MASTER,"Already Master")
    TRC_MSG(L2CAP_SERVER,"L2CAP SERVER")
    TRC_MSG(APDU_TYPEBT_DEBUGx02X,"APDU type=%02x")
    TRC_MSG(FIND_MAIN_IDENTIFIER,"find main identifier")
    TRC_MSG(CHANNEL_BT_DEBUGx04X,"channel :%04x")
    TRC_MSG(UNKNOWN_RESPONSE,"Unknown response")
    TRC_MSG(DO_SERVICE_SEARCH,"Do service search")
    TRC_MSG(MSG_ID_BT_JSR82_CONNECT_IND_TRC,"MSG_ID_BT_JSR82_CONNECT_IND")
    TRC_MSG(L2CAP_CREATE_COMPLETED,"L2CAP create completed")
    TRC_MSG(CLEAR_MUX_FLAG_XMIT_FLAG1,"Clear MUX_FLAG_XMIT flag#1")
    TRC_MSG(UATRAN_PASSING_UP_xD_BYTES,"UATRAN: Passing up %d bytes")
    TRC_MSG(THE_CMP_ADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X,"The cmp addr:%02x,%02x,%02x,%02x,%02x,%02x")
    TRC_MSG(GAPTESTER_SET_DISCOVERY_WITHOUT_NAME_MODE,"GapTester set discovery without name mode")
    TRC_MSG(CURRENT_DATA_SIZExD,"Current data size:%d")
    TRC_MSG(UATRAN_CONTROLLER_MAY_ENTER_SLEEP_MODE,"UATRAN: Controller may enter sleep mode")
    TRC_MSG(JSR82_SESSION_ENABLED_SERVICE,"JSR82 session enabled service")
    TRC_MSG(RADIO_WAKEUP_COMPLETED,"radio wakeup completed")
    TRC_MSG(JSR82_NO_MAIN_CHANNEL,"jsr82 no main Channel")
    TRC_MSG(INQUIRY_CANCEL_COMPLETED,"inquiry Cancel Completed")
    TRC_MSG(ADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X,"addr:%02x,%02x,%02x,%02x,%02x,%02x")
    TRC_MSG(NEXT_START_TIMEx08X,"next_start_time:%08x")
    TRC_MSG(BTACCCTRLCHECKPSMPOLICY_SHALL_CHECK_POLICY,"BTAccCtrlCheckPSMPolicy shall check policy.")
    TRC_MSG(UATRAN_SCO_DATA_LENGTH__xD,"UATRAN: SCO data length = %d")
    TRC_MSG(SDAP_FAILED_REMOVE_LINK,"SDAP failed, remove link")
    TRC_MSG(RECV_TXCREDIT_NEW_TXCREDITxD_CALL_RFMUXCHECKTXQUEUES,"Recv txCredit, new txCredit=%d, call RfMUXCheckTxQueues")
    TRC_MSG(TRY_TO_OPEN_L2CAP_CHANNEL,"Try to open L2CAP channel")
    TRC_MSG(REMOTE_NAME_REQUEST_STATUSBT_DEBUGx02X,"Remote name request status:%02x")
    TRC_MSG(REQUEST_ACTIVE_LINK_NAME_TIMER_STARTx08X,"Request active link name timer start:%08x")
    TRC_MSG(CONNMGRCHECKSTARTSNIFFTIMER,"ConnMgrCheckStartSniffTimer")
    TRC_MSG(MSG_ID_BT_BM_DISCOVERY_RESULT_IND_TRC,"MSG_ID_BT_BM_DISCOVERY_RESULT_IND")
    TRC_MSG(INQUIRY_IDLE_TIMER_CALLBACK_FUNCTION_IS_NOT_0,"Inquiry idle timer callback function is not 0")
    TRC_MSG(IN_MEHANDLELINKCONNECTOP2ND_MECPENDCONSxD,"In MeHandleLinkConnectOp():2nd MEC(pendCons)=%d")
    TRC_MSG(INQUIRY_AFTER_120_SECONDS_NOT_COMPLETED,"Inquiry after 120 seconds, not completed")
    TRC_MSG(PTR_LOCAL_CIDBT_DEBUGx04X,"ptr local cid:%04x")
    TRC_MSG(LINK_SUPERVISION_TIMEOUTBT_DEBUGx04X,"Link supervision timeout:%04x")
    TRC_MSG(ROLE_SWITCH_PERFORM_RETURN_DIRECTLY,"Role switch perform, return directly")
    TRC_MSG(STRINGBT_DEBUGx02XBT_DEBUGx02X,"string:%02x,%02x")
    TRC_MSG(MSG_ID_BT_JSR82_DISCONNECT_IND_TRC,"MSG_ID_BT_JSR82_DISCONNECT_IND")
    TRC_MSG(NO_SIGNAL_PKT2,"No signal pkt2")
    TRC_MSG(AVDTP_HDL_REJBT_DEBUGx02X,"AVDTP Hdl Rej:%02x")
    TRC_MSG(L2CAP_CLIENT,"L2CAP Client")
    TRC_MSG(SET_AS_SLOW_CONNECT_MODE,"Set as SLOW_CONNECT_MODE")
    TRC_MSG(IN_MEHANDLELINKACCEPTOPMECPENDCONSxD,"In MeHandleLinkAcceptOp():MEC(pendCons)=%d")
    TRC_MSG(SNIFFER_TIMER_RESTART_AGAIN,"Sniffer timer restart again")
    TRC_MSG(MTU_BT_DEBUGx04X,"mtu :%04x")
    TRC_MSG(TRY_TO_OPEN_SCO_LINK,"Try to open SCO link")
    TRC_MSG(SET_AS_FAST_CONNECT_MODE,"Set as FAST_CONNECT_MODE")
    TRC_MSG(MAKE_REMOTE_NAME_REQUEST_CANCEL_COMMAND,"Make remote name request cancel command")
    TRC_MSG(RX_BUFFER_IS_FULL,"Rx buffer is full")
    TRC_MSG(RFMDNTF_HCC_RESET3500,"RFMDntf_HCC_RESET3500")
    TRC_MSG(INQUIRY_CANCEL_BUT_THE_NAME_TOKEN_SHALL_REQUEST_AGAIN,"inquiry cancel but the name token shall request again")
    TRC_MSG(BT_JSR82_CONNECT_CFN_SIZEBT_DEBUGx02X,"bt_jsr82_connect_cfn size:%02x")
    TRC_MSG(DEVICE_WITH_NAME,"Device with name")
    TRC_MSG(NO_BTACCCTRLCHECKSERVICEPOLICY,"No BTAccCtrlCheckServicePolicy")
    TRC_MSG(RX_DATA_NOT_EQUAL,"Rx data not equal")
    TRC_MSG(TIME_INTERVALx08X,"time interval:%08x")
    TRC_MSG(TEMP_INQUIRY_LENGTHxD,"temp inquiry length:%d")
    TRC_MSG(REJECT_OP_WITH_THE_SAME_ADDR,"Reject Op with the same addr")
    TRC_MSG(BT_JSR82_CMGRCLIENTCALLBACK_NOT_THE_CONNECT_BD_ADDR,"bt_jsr82_CmgrClientCallback Not the connect bd_addr")
    TRC_MSG(CHANGE_TO_UT_MODE,"Change to UT mode")
    TRC_MSG(BT_JSR82_SESSIONAPDISABLERESULTEVENT,"bt_jsr82_SessionApDisableResultEvent")
    TRC_MSG(SIMULATE_SIM_CLIENT_SENDS_CONNECT_REQ_AND_TEST_MODExD,"Simulate SIM Client sends connect req, and test_mode=%d")
    TRC_MSG(RADIO_WAKEUP_TIMER__3,"Radio Wakeup timer > 3")
    TRC_MSG(RFMDEVT_HCC_WRITENVRAMDATA,"RFMDevt_HCC_WriteNvramData")
    TRC_MSG(ONE_SCO_IN_CONNECTED,"one sco in connected")
    TRC_MSG(CHECK_HS_AG_POLICY,"Check HS_AG policy")
    TRC_MSG(JSR82_SESSION_DISCONNECT_SERVICE,"JSR82 session disconnect service")
    TRC_MSG(JSR82_EMPTY_CHANNEL_FIND,"jsr82 empty Channel find")
    TRC_MSG(NO_NAME_REQUEST_COMPLETE_EVENT_MAKE_NAME_CANCEL_COMMAND,"No name request complete event, make name cancel command")
    TRC_MSG(ACL_LINK_EXISTS_MAY_DUE_TO_AFTER_BONDING_PROCEDURE_THEN_CONNECT_SPP_IMMEDIATELY_SET_DISCFLAG_AS_FALSE,"ACL link exists may due to After Bonding Procedure Then connect SPP immediately: set discFlag as FALSE")
    TRC_MSG(DEVICE_IN_DATABASE_BT_DEBUGx02X,"Device in Database :%02x")
    TRC_MSG(LINK_NO_BT_DEBUGx02X,"link no :%02x,")
    TRC_MSG(NAME_CALLBACK_REMOVE_MTKBMCNAME_CANCEL_TIMERFUNC,"name callback, remove MTKBMC(name_cancel_timer).func")
    TRC_MSG(NODE_STILL_IN_THE_OPLIST,"Node still in the opList")
    TRC_MSG(RECORD_INDEXBT_DEBUGx02XBT_DEBUGx02X,"record index:%02x,:%02x")
    TRC_MSG(UATRAN_HCI_COMMAND_WAS_NOT_ACKNOWLEDGED_WITH_AN_EVENT,"UATRAN: HCI Command was not acknowledged with an event")
    TRC_MSG(LINK_NUMBER_NOT_IN_DISCONNECTED_STATEBT_DEBUGx02X,"link number not in disconnected state:%02x")
    TRC_MSG(THE_INDEXBT_DEBUGx02X,"the index:%02x")
    TRC_MSG(POWER_CONTROL_COMPLETED,"Power control completed")
    TRC_MSG(UATRAN_ACL_DATA_LENGTH__xD,"UATRAN: ACL data length = %d")
    TRC_MSG(SET_MTKACCCTLCACCLINK,"Set MTKACCCTLC(accLink)")
    TRC_MSG(CHECK_SIMAP_POLICY,"Check SIMAP policy")
    TRC_MSG(START_INQUIRY_COMMAND_BT_DEBUGx02X,"Start inquiry command :%02x")
    TRC_MSG(UATRAN_NO_EVENT_RECEIVER_BUFFER_AVAILABLE,"UATRAN: No Event receiver buffer available")
    TRC_MSG(RFCOMM_LAYER_FOR_INCOMING_CONNECTION_EXEC_SERVICE_LEVEL_SECURITY,"RFCOMM layer for incoming connection: Exec Service Level security")
    TRC_MSG(HOST_WAKEUP_COMPLETED,"Host wakeup completed")
    TRC_MSG(WAKUP_OPCODE_BT_DEBUGx04X,"wakup opcode :%04x")
    TRC_MSG(BDADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X,"bdaddr:%02x,%02x,%02x")
    TRC_MSG(CANCELLING_STATE_SHOW_FAILED,"Cancelling state, show failed.")
    TRC_MSG(SESSION_CREATE_COMPLETED,"Session create completed")
    TRC_MSG(BTACCCTRLCHECKCONNECTPOLICY_DENY,"BTAccCtrlCheckConnectPolicy Deny")
    TRC_MSG(JSR82_SESSION_TX_2_DATA,"JSR82 session tx 2 data")
    TRC_MSG(THE_AUTHENTICATION_STATUSBT_DEBUGx02X,"The authentication status:%02x")
    TRC_MSG(THE_INPUT_SERV_CHNLBT_DEBUGx02X,"The input serv_chnl:%02x")
    TRC_MSG(BTEVENT_AUTHENTICATE_CNF_TRC,"BTEVENT_AUTHENTICATE_CNF")
    TRC_MSG(USBTRAN_ACL_BUFFER_NOW_AVAILABLE,"USBTRAN: ACL Buffer Now Available")
    TRC_MSG(TRANS_NO_SCO_BUFFERS,"TRANS: no SCO buffers")
    TRC_MSG(BT_JSR82_HANDLESESSIONAPENABLESERVICE,"bt_jsr82_HandleSessionApEnableService")
    TRC_MSG(SCOCON_IS_ZERO,"SCOCON is zero")
    TRC_MSG(BT_JSR82_DISABLE_SERVICE_REQ_SIZEBT_DEBUGx02X,"bt_jsr82_disable_service_req size:%02x")
    TRC_MSG(REJECT_OP_IS_NOT_EMPTY,"Reject Op is not empty")
    TRC_MSG(IN_MEHANDLELINKACCEPTOP2ND_MECPENDCONSxD,"In MeHandleLinkAcceptOp():2nd MEC(pendCons)=%d")
    TRC_MSG(BTBBTESTITEMBT_DEBUGx02X,"BTBBTestItem:%02x")
    TRC_MSG(REQ_NAMEBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X,"req name,%02x,%02x,%02x,%02x,%02x,%02x,")
    TRC_MSG(MECPENDCONS_0,"MEC(pendCons) !=0")
    TRC_MSG(WRITE_MODE_BT_DEBUGx02X,"Write mode :%02x")
    TRC_MSG(MTKACCCTLCACCCTRLSETBT_DEBUGx02X,"MTKACCCTLC(accCtrlSet):%02x")
    TRC_MSG(CLEAR_MUX_FLAG_XMIT_FLAG2,"Clear MUX_FLAG_XMIT flag#2")
    TRC_MSG(RFMDCMD_HCC_RESET3500,"RFMDcmd_HCC_RESET3500")
    TRC_MSG(NO_AVAILABLE_REMDEV,"No available remDev")
    TRC_MSG(EMPTY_REMDEV,"Empty remDev")
    TRC_MSG(FAKESIM_RECEIVES_BT_SIM_CONNECT_REQ,"FakeSim receives BT_SIM_CONNECT_REQ")
    TRC_MSG(BDADDRx08Xx08Xx08X,"bdaddr:%08x,%08x,%08x")
    TRC_MSG(CURRENT_TX_STREAM_STATEBT_DEBUGx02X,"current Tx Stream state:%02x")
    TRC_MSG(CURRENT_MODE_BT_DEBUGx02XERROR_CODEBT_DEBUGx02X,"current mode :%02x,error_code:%02x")
    TRC_MSG(IF_RADIO_WAKEUP_NO_RESPONSE_WE_WILL_GEN_A_FAKE_EVENT_AND_TRY_TO_WAKEUP_AGAIN,"If Radio Wakeup no response, we will gen a fake event and, try to wakeup again")
    TRC_MSG(RSP_RESULT_BT_DEBUGx02X,"rsp_result :%02x")
    TRC_MSG(OPEN_RFCOMM_CHANNEL_FAILED,"open rfcomm channel failed")
    TRC_MSG(RFMDEVT_HCC_CHANGEBAUDRATEBT_DEBUGx02X,"RFMDevt_HCC_ChangeBaudRate:%02x")
    TRC_MSG(CONNMGRSNIFFTIMEOUTHANDLER,"ConnMgrSniffTimeoutHandler")
    TRC_MSG(IN_MEHANDLELINKCONNECTOPMECPENDCONSxD,"In MeHandleLinkConnectOp():MEC(pendCons)=%d")
    TRC_MSG(INQUIRY_IDLE_TIMER_TIMEOUT,"inquiry idle timer timeout")
    TRC_MSG(BT_JSR82_CMGRSERVERCALLBACK,"bt_jsr82_CmgrServerCallback")
    TRC_MSG(CON_HDLBT_DEBUGx02X_RX_DATA_LEN_xD,"con_hdl:%02x, Rx data len :%d")
    TRC_MSG(AVDTP_HDL_RSPBT_DEBUGx02X,"AVDTP Hdl Rsp:%02x")
    TRC_MSG(IN_RFMUXCHECKNEXTTXQUEUES_PACKETSINTRANSITxD_ON_DLCIxD,"In RfMuxCheckNextTxQueues(), packetsInTransit=%d, on DLCI=0x%02x")
    TRC_MSG(RFCOMM_CREATE_COMPLETED,"RFCOMM create completed")
    TRC_MSG(IN_MEHANDLELINKREJECTOP2ND_MECPENDCONSxD,"In MeHandleLinkRejectOp():2nd MEC(pendCons)=%d")
    TRC_MSG(HFP_AUTO_DISCONNECT_BLACK_LISTxD,"hfp_auto_disconnect_black_list:%d")
    TRC_MSG(L2CAP_OPEN_CHANNEL_FAILED,"L2CAP open Channel failed")
    TRC_MSG(CON_IDBT_DEBUGx02X,"Con id:%02x")
    TRC_MSG(RFCOMM_OPEN_CHANNEL_FAILED,"RFCOMM open Channel failed")
    TRC_MSG(NOT_GOOBALHANDLER,"not goobalHandler")
    TRC_MSG(NAME_LENx08X,"name_len:%08x")
    TRC_MSG(IN_RF_SENDDATA_CALL_RFMUXCHECKTXQUEUES,"In RF_SendData(): call RfMUXCheckTxQueues")
    TRC_MSG(NO_SIGNAL_PKT3,"No signal pkt3")
    TRC_MSG(HID_ROLE_STATEBT_DEBUGx02X,"HID Role_state:%02x")
    TRC_MSG(GAPTESTER_SET_DISCOVERY_WITH_NAME_MODE,"GapTester set discovery with name mode")
    TRC_MSG(REJECT_OP_IN_LIST_REMOTE_THE_REJECT_OP_FROM_LIST,"Reject Op in list, remote the reject Op from list")
    TRC_MSG(LINK_REJECTBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X,"Link Reject:%02x,%02x,%02x,%02x,%02x,%02x")
    TRC_MSG(CHECK_LINKBT_DEBUGx02X,"check link:%02x")
    TRC_MSG(STRINGBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X,"string:%02x,%02x,%02x,%02x")
    TRC_MSG(RECV_SET_PIN_CODE_RSP_TIMEOUT_VALUE_WITH_ERR0,"Recv SET PIN CODE RSP TIMEOUT Value with err=0")
    TRC_MSG(BLACKLIST_x0D,"BlackList :%0d")
    TRC_MSG(LINK_SUPERVISION_HDLBT_DEBUGx02X,"Link supervision hdl:%02x")
    TRC_MSG(UATRAN_HOST_IS_READY_TO_ENTER_SLEEP_MODE,"UATRAN: Host is ready to enter sleep mode")
    TRC_MSG(CHECK_RFCOMM_TESTER_POLICY,"Check RFCOMM Tester policy")
    TRC_MSG(TX_DATA_COMPLETED,"Tx data Completed")
    TRC_MSG(RFCOMM_SERVER,"RFCOMM SERVER")
    TRC_MSG(BTACCCTRLUNSET,"BTAccCtrlUnset")
    TRC_MSG(PREVIOUS_NAME_REQUEST_ON_GOING_CANCEL_IT,"previous name request on going, cancel it")
    TRC_MSG(FAKESIM_RECEIVES_BT_SIM_RESET_REQ_DUE_TO_SET_TRANSPORT_PRO_TYPE,"FakeSim receives BT_SIM_RESET_REQ due to SET_TRANSPORT_PRO_TYPE")
    TRC_MSG(SET_SPP_TX_SIZE_xD,"Set SPP Tx size :%d")
    TRC_MSG(DURING_PAIRING_NOT_ALLOW_ROLE_SWITCH,"During pairing, not allow role switch")
    TRC_MSG(SELECT_APDU_AND_FILE_IDBT_DEBUGx02X_BT_DEBUGx02X,"Select APDU and FILE ID=%02x %02x")
    TRC_MSG(RX_DATA_IND,"Rx data ind")
    TRC_MSG(PTR1_STATUS_IDLE_RETURN_DIRECTLY,"ptr1 status idle, return directly")
    TRC_MSG(BT_JSR82_SESSIONAPDISCONNECTINDEVENT,"bt_jsr82_SessionApDisConnectIndEvent")
    TRC_MSG(GET_RESPONSE_APDU_AND_P3_LENBT_DEBUGx02X,"Get Response APDU and P3 len=%02x")
    TRC_MSG(CHECK_FAX_POLICY,"Check FAX policy")
    TRC_MSG(THE_TIMER_LOOKS_LIKE_SOME_ERRORS,"The timer looks like some errors")
    TRC_MSG(UATRAN_NO_ACL_RECEIVER_BUFFER_AVAILABLE,"UATRAN: No ACL receiver buffer available")
    TRC_MSG(BTBMCHECKBONDINGSTATEWHENDISCONNECTEDBT_DEBUGx02X,"btbmCheckBondingStateWhenDisconnected,%02x")
    TRC_MSG(WRITE_BT_CODx08X,"Write Cod:%08x")
    TRC_MSG(GAPTESTER_SET_FILTER_CODBT_DEBUGx04X,"GapTester set filter cod=%04X")
    TRC_MSG(SET_SPP_TIMER_xD,"Set SPP Timer :%d")
    TRC_MSG(CHARxDBT_DEBUGx02X,"Char[%d]:%02x")
    TRC_MSG(CANCEL_REMOTE_NAME_OPERATION,"Cancel Remote Name Operation")
    TRC_MSG(R_VERSION_BT_DEBUGx02X,"r version :%02x")
    TRC_MSG(L2CAP_ID_BT_DEBUGx02X,"l2cap_id :%02x")
    TRC_MSG(INQUIRY_CANCEL,"inquiry cancel")
    TRC_MSG(IDENTIFY_BT_DEBUGx02X,"identify :%02x")
    TRC_MSG(IN_MEHANDLELINKREJECTOPIN_REJECTMECPENDCONSxD,"In MeHandleLinkRejectOp()#IN_REJECT:MEC(pendCons)=%d")
    TRC_MSG(INQUIRY_COMPLETED,"inquiry Completed")
    TRC_MSG(THE_INPUT_PSMBT_DEBUGx04X,"The input PSM:%04x")
    TRC_MSG(IN_BTBMGAPSETAUTHENTICATION_FORCE_TO_LEVEL_3_WITH_ENCRYPTION_OFF,"In BTBMGapSetAuthentication(): force to Level 3 with encryption off")
    TRC_MSG(BUFFER_SIZExD,"Buffer size:%d")
    TRC_MSG(JSR82_SESSION_DISABLE_SERVICE,"JSR82 session disable service")
    TRC_MSG(SENDRAWPACKETB,"SendRawPacket:B")
    TRC_MSG(CHECK_HS_GW_POLICY,"Check HS_GW policy")
    TRC_MSG(AVDTP_STREAMSENDRAWPACKETBT_DEBUGx02X,"AVDTP_StreamSendRawPacket:%02x")
    TRC_MSG(FAKESIM_RECEIVES_BT_SIM_POWEROFF_REQ,"FakeSim receives BT_SIM_POWEROFF_REQ")
    TRC_MSG(PS_TYPE_BT_DEBUGx02X,"ps_type :%02x")
    TRC_MSG(RF_TEST_COMMAND_COMPLETED,"RF test command completed")
    TRC_MSG(NO_UPF_FILE,"No UPF file")
    TRC_MSG(WAIT_FOR_LINK_CONNECT_CNF_OF_THIS_SPP_CLIENT_CREATE_ACL,"Wait for LINK_CONNECT_CNF of this SPP client create ACL")
    TRC_MSG(HFG_EVENT_REPORT_MIC_VOLUME_TRC,"HFG_EVENT_REPORT_MIC_VOLUME")
    TRC_MSG(PIPE_xD_RESET,"Pipe %d reset.")
    TRC_MSG(UART_SETTING_SPEED_TO_xD,"UART:  Setting speed to %d")
    TRC_MSG(IN_SPPQUERYCALLBACK_CALL_SPPCONNECT_FAILED_STATUSxD,"In SPPQueryCallback(), call sppConnect() failed. status=%d")
    TRC_MSG(RECV_DEACTIVE_REQ_CONNECTING_IS_INCOMING_BUT_NOT_READY_TO_BE_CONNECTED_TO_NOFITY_SIMSERVER,"Recv Deactive_req, Connecting is incoming but not ready to be connected to nofity SimServer")
    TRC_MSG(SENDING_HANDSHAKE_PACKET,"Sending  HandShake packet")
    TRC_MSG(RFCHANNEL_IS_CLOSED_SO_SIM_SERVERAPDURSP_FAILED_IS_OK,"RFChannel is closed, so SIM_ServerApduRsp() failed is ok")
    TRC_MSG(HS_OPEN_SCOL,"HS Open SCOl")
    TRC_MSG(GETPRINTERATTR_SOAP_REQUEST__BPP_SOAP_BUFF_SIZE,"GetPrinterAttr SOAP request > BPP_SOAP_BUFF_SIZE)")
    TRC_MSG(WE_SHALL_CHECK_THE_PTA_COMMAND,"We shall check the pta command")
    TRC_MSG(UART_WROTE_xD_BYTES,"UART: Wrote %d bytes")
    TRC_MSG(BT_RFTEST_OP_TXRX_TEST_TRC,"BT_RFTEST_OP_TXRX_TEST")
    TRC_MSG(HS_CLOSE_SCOL,"HS Close SCOl")
    TRC_MSG(SIMSERVERS_TEST_MODExD,"SimServer's test mode=%d")
    TRC_MSG(HFG_EVENT_AUDIO_DISCONNECTED_TRC,"HFG_EVENT_AUDIO_DISCONNECTED")
    TRC_MSG(SPPCLIENT_RECV_DISCONNECT_REQ_AND_WAIT_FOR_RF_CLOSED_EVENT,"SPPClient recv DISCONNECT_REQ and wait for RF_CLOSED event")
    TRC_MSG(HFG_EVENT_GET_LAST_VOICE_TAG_TRC,"HFG_EVENT_GET_LAST_VOICE_TAG")
    TRC_MSG(SIMULATE_APP_WRITE_FIRST_DATA_TO_SPP_SERVER_WRITTEN_LENxD_AND_STRxS_ON_SPPCLIENT_PORTxD,"Simulate APP write first data to SPP Server, written len=%d and str=%s on SPPClient port=%d")
    TRC_MSG(HFG_EVENT_GENERATE_DTMF_TRC,"HFG_EVENT_GENERATE_DTMF")
    TRC_MSG(BT_EM_STATEBT_DEBUGx02X,"bt_em_state:%02x")
    TRC_MSG(DDB_UPFOPEN,"DDB_UPFOpen")
    TRC_MSG(IN_BT_SPPCLIENT_CMGR_EVENT_CALLBACK_EVENTxD_IS_FOR_SPPOSDEV_INXxD,"In bt_sppclient_cmgr_event_callback(): event=%d is for sppOsDev inx=%d")
    TRC_MSG(PARMLEN_xD,"ParmLen: %d")
    TRC_MSG(RFCHANNEL_IS_CLOSED_SO_SIM_SERVERSIMONRSP_FAILED_IS_OK,"RFChannel is closed, so SIM_ServerSimOnRsp() failed is ok")
    TRC_MSG(IN_PRIVATE_TEST_MODE_CHECK_THE_SIM_CARD_IS_INSERTED,"In private test mode: Check the sim card is inserted")
    TRC_MSG(HSCONN,"hsconn")
    TRC_MSG(USB_WAIT_TIMEOUT,"USB: Wait timeout")
    TRC_MSG(INJECT_SPP_CONNECT_REQ_WITH_SRV_CHNL_NUM__xD_FOR_SPP_CLIENT_TEST,"Inject SPP_CONNECT_REQ with srv_chnl_num = %d for SPP client test")
    TRC_MSG(HFG_EVENT_ENABLE_VOICE_RECOGNITION_TRC,"HFG_EVENT_ENABLE_VOICE_RECOGNITION")
    TRC_MSG(DOING_LAST_NUMBER_DIAL,"doing last number dial")
    TRC_MSG(USING_SIMSERVERSENDDISCIND_FIRST_TO_DO_DEACTIVE_REQUEST,"Using SimServerSendDiscInd() first to do deactive request")
    TRC_MSG(HFG_EVENT_SERVICE_CONNECT_REQ_TRC,"HFG_EVENT_SERVICE_CONNECT_REQ")
    TRC_MSG(IN_BT_SIM_OPENSTATE_RESET_CNF_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD,"In bt_sim_openstate_reset_cnf_hdlr(): RF_CloseChannel failed, status=%d")
    TRC_MSG(UART_WRITE_xD_BYTES,"UART: Write() %d bytes.")
    TRC_MSG(SDP_QUERY_FOR_SPP_CLIENT_IS_ERROR_WITH_BD_ADDRBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X,"SDP query for SPP client is error with bd_addr=%02x,%02x,%02x,%02x,%02x,%02x")
    TRC_MSG(HFG_EVENT_REPORT_SPK_VOLUME_TRC,"HFG_EVENT_REPORT_SPK_VOLUME")
    TRC_MSG(IN_SPPA_GETBYTESCASE2_SET_READYTOREAD_TO_FALSE,"In Sppa_GetBytes():case2 Set readyToRead to FALSE")
    TRC_MSG(ONLY_ONE_SIM_CARD_IS_SUPPORTED_IN_OUR_CURRENT_DESIGN_SELECT_ID_0,"Only one SIM card is supported in our current design, Select ID_0")
    TRC_MSG(SETUP_HID_HANDSHACK_PAYLOAD_PACKET,"[HID ADP] Setup HID Handshack payload packet")
    TRC_MSG(MSG_ID_BT_HSG_DEACTIVATE_REQ_TRC,"MSG_ID_BT_HSG_DEACTIVATE_REQ")
    TRC_MSG(MSG_ID_BT_HSG_SVOLUMEDOWN_REQ_TRC,"MSG_ID_BT_HSG_SVOLUMEDOWN_REQ")
    TRC_MSG(CMEVENT_AUDIO_LINK_DIS_SCO_INIT_COMMANDBT_DEBUGx02XSTATUSBT_DEBUGx02X,"CMEVENT_AUDIO_LINK_DIS SCO init command:%02x,status:%02x")
    TRC_MSG(RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIM_DISCONNECT_CNF_02,"Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_02")
    TRC_MSG(USB_BULKREAD_REQ_xD_RET_xD_BYTES,"USB: bulkRead: req %d, ret %d bytes")
    TRC_MSG(SENDPUSH_DOCUMENT_STATUS__xD,"Send/Push Document status = %d")
    TRC_MSG(SUBUNIT_ID_xD,"Subunit ID: %d")
    TRC_MSG(BT_RFTEST_OP_ENABLED_WHITEN_COMPLETED,"BT_RFTEST_OP_ENABLED_WHITEN COMPLETED")
    TRC_MSG(AG_CONNECTED_TRC,"AG_CONNECTED")
    TRC_MSG(DOCUMENT_FILE_PATH__NULL,"Document File path == NULL")
    TRC_MSG(FILE_HANDLEx08X,"file_handle:%08x")
    TRC_MSG(SIMSERVERSENDCONNRSPERR_FAILED_STATUSxD,"SimServerSendConnRspErr() failed, status=%d")
    TRC_MSG(DOCUMENT_TYPE_ERROR,"Document Type Error")
    TRC_MSG(HFG_EVENT_QUERY_NETWORK_OPERATOR_TRC,"HFG_EVENT_QUERY_NETWORK_OPERATOR")
    TRC_MSG(IN_SPPA_GETBYTES_DATAREADxDLENGTHxD,"In Sppa_GetBytes(): DataRead=%d,Length=%d")
    TRC_MSG(SPP_AUTH_RSP_FROM_MMI_OF_PORTxD_AND_ITS_RESULTxD,"SPP_AUTH_RSP from MMI of port=%d and its result=%d")
    TRC_MSG(DISC_CNF_CASE2,"DISC_CNF case2")
    TRC_MSG(IN_BT_SPPCLIENT_CMGR_EVENT_CALLBACK_RECV_LINK_CON_CNF_STATUSxD,"In bt_sppclient_cmgr_event_callback(): recv LINK_CON_CNF status=%d")
    TRC_MSG(CSRUSB_SENDING_COMMAND_COMPLETE_EVENT_FOR_RESET,"CSRUSB: Sending Command Complete event for reset")
    TRC_MSG(UART_DEINITIALIZED,"UART: Deinitialized")
    TRC_MSG(USE_MMI_SPP_SCO_SDP_PROCESS_HDLER_SETS_1_FOR_TESTING_MODE,"Use MMI SPP SCO sdp process hdler sets 1: For Testing Mode")
    TRC_MSG(TRY_TO_OPEN_SCO_HANDLERBT_DEBUGx02X,"Try to open sco handler:%02x")
    TRC_MSG(SIM_ACCESS_PROFILE_IS_ACTIVATED_COMPLETELY,"SIM Access Profile is activated completely")
    TRC_MSG(RECEIVE_SENDDOCUMENT_COMPLETE_IN_BT_BPP_STATE_STATUS_DISCONNECTING_STATUS,"Receive SendDocument complete in BT_BPP_STATE_STATUS_DISCONNECTING status.")
    TRC_MSG(DATA_FROM_PEER_DEVICE_IS_ALREADY_RECEIVED_NOW_RECV_UART_OWNER_CNF_FOR_SERVER_PORT,"Data from peer device is already received, now: Recv Uart_OWNER_CNF for Server Port")
    TRC_MSG(USING_RF_CLOSECHANNEL_FIRST_TO_DO_DEACTIVE_REQUEST,"Using RF_CloseChannel() first to do deactive request")
    TRC_MSG(HSINIT,"hsinit")
    TRC_MSG(SPPOSDEV_INXxD_AND_STATExD,"sppOsDev inx=%d, and state=%d")
    TRC_MSG(POWER_OFF_CNF_HDLR_AND_SET_OFF_CARDSTATUSBT_DEBUGx02X,"power_off_cnf_hdlr() and set off: cardstatus=%02X")
    TRC_MSG(THE_SAME_PTA_ACTION,"the same pta action")
    TRC_MSG(USB_CTRLWRITE_REQ_xD_RET_xD_BYTES,"USB: ctrlWrite: req %d, ret %d bytes")
    TRC_MSG(BDC_IS_NULL_SPP_CLIENT_DOES_NOT_CALL_CMGR_CREATEDATALINK,"BDC is NULL, SPP client does not call CMGR_CreateDataLink()")
    TRC_MSG(NEW_STATE_AG_CONNECTED,"new state AG_CONNECTED")
    TRC_MSG(MSG_ID_BT_HSG_CONNECT_REQ_TRC,"MSG_ID_BT_HSG_CONNECT_REQ")
    TRC_MSG(HFG_EVENT_REDIAL_TRC,"HFG_EVENT_REDIAL")
    TRC_MSG(IN_SPPOS_DEVRX_SET_READYTOREAD_FALSE,"In SPPOS_DevRx(): Set readyToRead FALSE")
    TRC_MSG(USB_BULKWRITE_REQ_xD_RET_xD_BYTES,"USB: bulkWrite: req %d, ret %d bytes")
    TRC_MSG(DISCONNECT_CNF_HDLR_CARDSTATUSBT_DEBUGx02X,"disconnect_cnf_hdlr(): cardstatus=%02X")
    TRC_MSG(RFCHANNEL_IS_CLOSED_SO_SIM_SERVERSETTRANSPROTRSP_FAILED_IS_OK,"RFChannel is closed, so SIM_ServerSetTransProtRsp() failed is ok")
    TRC_MSG(BPP_ADP_CNTX_DEINIT_FS_DELETE_FAILED,"BPP ADP cntx deinit FS_Delete FAILED")
    TRC_MSG(NEW_STATE_AG_DISCONNECTING,"new state AG_DISCONNECTING")
    TRC_MSG(MSG_ID_BT_HSG_BUTTONPRESS_REQ_TRC,"MSG_ID_BT_HSG_BUTTONPRESS_REQ")
    TRC_MSG(DATA_FROM_PEER_DEVICE_IS_ALREADY_RECEIVED_NOW_RECV_UART_OWNER_CNF_FOR_CLIENT_PORT,"Data from peer device is already received, now: Recv Uart_OWNER_CNF for Client Port")
    TRC_MSG(RFCHANNEL_IS_CLOSED_SO_SIM_SERVERRESETSIMRSP_FAILED_IS_OK,"RFChannel is closed, so SIM_ServerResetSimRsp() failed is ok")
    TRC_MSG(IN_BT_SIM_RESET_CNF_HDLR_SIM_SERVER_STATE_OPENCOUND_NOT_SEND_SIM_SET_TRANSPORT_PROTOCOL_TYPE_RESPONSE_STATUSxD,"In bt_sim_reset_cnf_hdlr(): SIM_SERVER_STATE_OPEN:Cound not send SIM Set Transport Protocol Type response, status:%d")
    TRC_MSG(HFGA_TX_RESPONSE_ADDRxX,"hfga_tx: response addr=%x")
    TRC_MSG(HFGA_TX_RESPONSEPDATA_ADDRxX,"hfga_tx: response->p.data addr=%x")
    TRC_MSG(HFGA_ESTABLISH_SERVICE_LEVEL_CONNECTION_TIMEOUT_HDLER,"hfga_establish_service_level_connection_timeout_hdler")
    TRC_MSG(DISC_CNF_CASE5_NOT_YET_RECEIVE_SIM_CONNECT_CNF_AND_DISC_HAPPENS,"DISC_CNF case5: Not yet receive SIM_CONNECT_CNF and DISC happens")
    TRC_MSG(RECEIVE_SENDDOCUMENT_COMPLETE_IN_WRONG_STATE,"Receive SendDocument complete in WRONG state.")
    TRC_MSG(UART_READ_xD_BYTES,"UART: Read %d bytes")
    TRC_MSG(RECV_SPP_CON_REQ_AND_ACL_LINK_IS_ALREADY_ESTABLISHED_CALL_SPPCONNECT_FAILED_STATUSxD,"Recv SPP_CON_REQ and ACL link is already established, call sppConnect() failed. status=%d")
    TRC_MSG(HSBUTTON,"hsbutton")
    TRC_MSG(USB_INTREAD_REQ_xD_RET_xD_BYTES,"USB: intRead: req %d, ret %d bytes")
    TRC_MSG(BT_SIMAP_AUTH_RSPRESULT_xD,"bt_simap_auth_rsp->result =%d")
    TRC_MSG(BT_PARMxD__xD,"Parm[%d] = %d")
    TRC_MSG(HFG_EVENT_LIST_CURRENT_CALLS_TRC,"HFG_EVENT_LIST_CURRENT_CALLS")
    TRC_MSG(RECEIVED_AVRCP_EVENT_TYPE_xD,"Received AVRCP Event, Type: %d")
    TRC_MSG(HFG_EVENT_DIAL_NUMBER_TRC,"HFG_EVENT_DIAL_NUMBER")
    TRC_MSG(THE_SAME_FREQ,"the same freq")
    TRC_MSG(BT_DEBUGx04X,"%04x")
    TRC_MSG(HFG_EVENT_RESPONSE_COMPLETE_TRC,"HFG_EVENT_RESPONSE_COMPLETE")
    TRC_MSG(HFG_EVENT_AT_COMMAND_DATA_TRC,"HFG_EVENT_AT_COMMAND_DATA")
    TRC_MSG(CREATEJOB_REQUEST_SIDES_FLAG_ERROR,"CreateJob request Sides flag error)")
    TRC_MSG(RECV_DEACTIVE_REQ_THE_RFCOMM_AND_SIMSERVER_ARE_ALREADY_IN_CLOSED_STATE,"Recv Deactive_req, the RFCOMM and SimServer are already in CLOSED state")
    TRC_MSG(HFG_EVENT_SERVICE_DISCONNECTED_TRC,"HFG_EVENT_SERVICE_DISCONNECTED")
    TRC_MSG(ACL_LINK_IS_ALREADY_EXISTED_SET_DISCFLAGTRUE_IN_CMGR_CREATEDATALINK,"ACL Link is already existed, set discFlag=TRUE in CMGR_CreateDataLink()")
    TRC_MSG(ORG_CARDSTATUS_IS_ON_SO_POWER_OFF_IS_STILL_SENT_TO_SIM_BUT_ACTUALLY_CARD_IS_OFF_BY_OTHER_MODULE,"Org cardstatus is on, so POWER_OFF is still sent to SIM, but actually card is off by other module")
    TRC_MSG(UPF_SETADDR_0,"UPF_SETADDR !=0")
    TRC_MSG(IN_BT_SIM_OPENSTATE_POWER_ON_CNF_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD,"In bt_sim_openstate_power_on_cnf_hdlr(): RF_CloseChannel failed, status=%d")
    TRC_MSG(RECV_DISC_REQ_FROM_MMI_ALTHOUGH_SIMSERVER_IS_CLOSED_BUT_IT_WAITS_FOR_SIM_TASKS_DISC_CNF,"Recv Disc_req from MMI, although SimServer is closed, but it waits for SIM task's DISC_CNF")
    TRC_MSG(HS_DISCONNECT_CALL,"HS Disconnect Call")
    TRC_MSG(IN_BT_SIM_RESET_CNF_HDLR_SIM_SERVER_STATE_OPENCOUND_NOT_SEND_SIM_POWER_ON_RESPONSE_STATUSxD,"In bt_sim_reset_cnf_hdlr(): SIM_SERVER_STATE_OPEN:Cound not send SIM POWER ON response, status:%d")
    TRC_MSG(SPP_CLIENT_CMGR_CREATEDATALINK_FAILED_STATUSxD,"SPP client: CMGR_CreateDataLink failed, status=%d")
    TRC_MSG(IN_BT_SIMAP_DEACTIVEATE_REQ_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD,"In bt_simap_deactiveate_req_hdlr(): RF_CloseChannel failed, status=%d")
    TRC_MSG(IN_BT_SIM_APDU_CNF_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD,"In bt_sim_apdu_cnf_hdlr(): RF_CloseChannel failed, status=%d")
    TRC_MSG(HFGA_TX_AT_BUFF_BUF_ADDRxX,"hfga_tx: at_buff buf addr=%x")
    TRC_MSG(IN_BT_SIM_OPENSTATE_SETT_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD,"In bt_sim_openstate_setT_hdlr(): RF_CloseChannel failed, status=%d")
    TRC_MSG(RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIMAP_DISCONNECT_REQ_HDLR_01,"Release SIM Access Profile connect_id in bt_simap_disconnect_req_hdlr()_01")
    TRC_MSG(LINK_CNF_IS_FOR_ANOTHER_PROFILES_REQUEST_NOT_SPP_CLIENT,"LINK_CNF is for another profile's request, not SPP client")
    TRC_MSG(IN_BT_SPPCLIENT_CMGR_LINK_CLOSE_TRY_TO_REMOVE_BUT_CMGRHANDLER_IS_NOT_FOUND,"In bt_sppclient_cmgr_link_close(): try to remove: But CMGRHandler is not found")
    TRC_MSG(BT_EM_STATE1BT_DEBUGx02X,"bt_em_state1:%02x")
    TRC_MSG(IN_BT_SIMAP_DISCONNECT_REQ_HDLRERROR_MMI_HAS_NO_ENTRY_TO_DISCONNECT_THIS_SAP,"In bt_simap_disconnect_req_hdlr():Error! MMI has no entry to disconnect this SAP")
    TRC_MSG(HFG_EVENT_DISABLE_NREC_TRC,"HFG_EVENT_DISABLE_NREC")
    TRC_MSG(RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIM_DISCONNECT_CNF_01,"Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_01")
    TRC_MSG(RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIM_DISCONNECT_CNF_00,"Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_00")
    TRC_MSG(IN_BT_SPPCLIENT_CMGR_LINK_CLOSE_BDC_IS_ALREADY_NULL,"In bt_sppclient_cmgr_link_close(): bdc is already null")
    TRC_MSG(HCI_PROCESS_CALL_RADIO_HOST_WAKEUP_FUNCTION,"HCI_Process: call radio host wakeup function")
    TRC_MSG(IN_BT_SIMAP_DISCONNECT_REQ_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD,"In bt_simap_disconnect_req_hdlr(): RF_CloseChannel failed, status=%d")
    TRC_MSG(DISC_CNF_CASE6,"DISC_CNF case6")
    TRC_MSG(SUBUNIT_TYPE_xD,"Subunit Type: %d")
    TRC_MSG(NEW_STATE_AG_IDLE,"new state AG_IDLE")
    TRC_MSG(MMI_SPP_SDP_WITH_ATTRIBUTEID0X0310__SUPPORT_CAPABILITIES,"MMI SPP Sdp with attributeID=0x0310 : Support Capabilities")
    TRC_MSG(RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIM_DISCONNECT_CNF_05,"Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_05")
    TRC_MSG(DOCUMENT_FILE_OPEN_FAILED,"Document File OPEN Failed")
    TRC_MSG(RECV_DEACTIVE_REQ_ALTHOUGH_SIMSERVER_IS_CLOSED_BUT_IT_WAITS_FOR_SIM_TASKS_DISC_CNF,"Recv Deactive_req, although SimServer is closed, but it waits for SIM task's DISC_CNF")
    TRC_MSG(OPCODE_xD,"OpCode: %d")
    TRC_MSG(UART_DEINIT_START,"UART: Deinit start")
    TRC_MSG(SPPCLIENT_RECV_DEACTIVATE_REQ_AND_WAIT_FOR_RF_CLOSED_EVENT,"SPPClient recv DEACTIVATE_REQ and wait for RF_CLOSED event")
    TRC_MSG(COULD_NOT_ALLOCATE_MEMORY_FOR_SOAP_RESPONSE_SIZE__BPP_SOAP_BUFF_SIZE,"Could not allocate memory for SOAP response (size > BPP_SOAP_BUFF_SIZE)")
    TRC_MSG(SPPCLIENT_RECV_DEACTIVATE_REQ_CALL_SPP_CLOSE_FAILED,"SPPClient recv DEACTIVATE_REQ, call SPP_Close() failed")
    TRC_MSG(INDEXBT_DEBUGx02XBT_DEBUGx02X,"index:%02x,%02x")
    TRC_MSG(DISCONNECTING_PLEASE_WAIT,"Disconnecting, please wait....")
    TRC_MSG(NO_OS_NOTIFYEVM_CALL_IN_10_SEC_WAITING,"No OS_NotifyEvm() call in 10 sec, waiting...")
    TRC_MSG(BT_DEBUGx02X,"%02x")
    TRC_MSG(MSG_ID_BT_HSG_MVOLUMEUP_REQ_TRC,"MSG_ID_BT_HSG_MVOLUMEUP_REQ")
    TRC_MSG(RESUMPTION_ERROR_xD,"Resumption error: %d")
    TRC_MSG(BT_SPP_UART_PLUGOUT_CNF_FROM_MMI_OF_PORTxD,"BT_SPP_UART_PLUGOUT_CNF from MMI of port=%d")
    TRC_MSG(HFG_EVENT_AUDIO_CONNECTED_TRC,"HFG_EVENT_AUDIO_CONNECTED")
    TRC_MSG(HSMVU,"hsmvu")
    TRC_MSG(STATUS_OF_SIMSERVERSENDCONNRSPERR_xD,"Status of SimServerSendConnRspErr =%d")
    TRC_MSG(USE_MMI_SPP_SCO_SDP_PROCESS_HDLER_SETS_0_FOR_SPP_CLIENT_APPLICATION,"Use MMI SPP SCO sdp process hdler sets 0: For SPP Client Application")
    TRC_MSG(MMI_ACCEPTS_THIS_SAP_CONNECTION_IN_BT_SIMAP_AUTH_RSP_HDLR,"MMI accepts this SAP connection in bt_simap_auth_rsp_hdlr")
    TRC_MSG(HFG_EVENT_MEMORY_DIAL_TRC,"HFG_EVENT_MEMORY_DIAL")
    TRC_MSG(STRING_INDEXxD_BT_DEBUGx02X,"string index:%d,: %02x")
    TRC_MSG(ATR_TIMEOUTSIMSERVERSTATExDFLAGSBT_DEBUGx02X,"atr_timeout,simServerState=%d,flags=%02x")
    TRC_MSG(HFGA_TX_RESPONSE_BUF_ADDRxX,"hfga_tx: response buf addr=%x")
    TRC_MSG(GETEVENT_SOAP_REQUEST__2K,"GetEvent SOAP request > 2K)")
    TRC_MSG(MSG_ID_BT_HSG_MVOLUMEDOWN_REQ_TRC,"MSG_ID_BT_HSG_MVOLUMEDOWN_REQ")
    TRC_MSG(DOCUMENT_FILE_LENGTH__0,"Document File Length == 0")
    TRC_MSG(HFG_EVENT_ENABLE_CALLER_ID_TRC,"HFG_EVENT_ENABLE_CALLER_ID")
    TRC_MSG(DISC_CNF_CASE0,"DISC_CNF case0")
    TRC_MSG(SPP_CLIENT_WITH_PORTxD_TRY_TO_DISCONNECT,"SPP client with port=%d, try to disconnect")
    TRC_MSG(READ_SIZExD,"read_size:%d")
    TRC_MSG(UART_WRITE_EVENT,"UART: Write event")
    TRC_MSG(UPF_SETADDRBT_DEBUGx02X,"UPF_SETADDR:%02x")
    TRC_MSG(ERROR_SUBSTATExD_OF_CONNECT_PENDING_IN_BT_SIM_RESET_CNF_HDLR,"Error substate=%d of CONNECT_PENDING in bt_sim_reset_cnf_hdlr()")
    TRC_MSG(HFG_EVENT_CALL_HOLD_TRC,"HFG_EVENT_CALL_HOLD")
    TRC_MSG(PTA_ACTIONxD,"pta_action:%d")
    TRC_MSG(DISC_CNF_CASE3_RECEIVE_SIM_CONNECT_CNF_PREVIOUSLY_AND_DISC_HAPPENS,"DISC_CNF case3: Receive SIM_CONNECT_CNF previously and DISC happens")
    TRC_MSG(CMEVENT_AUDIO_LINK_CON_SCO_INIT_COMMANDBT_DEBUGx02X,"CMEVENT_AUDIO_LINK_CON SCO init command:%02x")
    TRC_MSG(RFCHANNEL_IS_CLOSED_SO_SIM_SERVERSIMOFFRSP_FAILED_IS_OK,"RFChannel is closed, so SIM_ServerSimOffRsp() failed is ok")
    TRC_MSG(MSG_ID_BT_HSG_SVOLUMEUP_REQ_TRC,"MSG_ID_BT_HSG_SVOLUMEUP_REQ")
    TRC_MSG(IN_SPPA_HANDLERWAIT_FOR_SDP_QUESRY_RSP_TO_QUERYCALLBACK,"In sppa_handler():Wait for SDP quesry rsp to queryCallback")
    TRC_MSG(RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIMAP_DEACTIVATE_REQ_HDLR,"Release SIM Access Profile connect_id in bt_simap_deactivate_req_hdlr")
    TRC_MSG(BT_SIM_DISCONNECT_CNF_HDLRSIMSERVER_IS_AVALIABLE_AGAIN,"bt_sim_disconnect_cnf_hdlr():SIMServer is avaliable again")
    TRC_MSG(IN_GRACEFUL_DISC_TIMEOUTNOT_IN_POWER_ON_STATE,"In graceful_disc_timeout:Not in POWER ON state")
    TRC_MSG(PTRAFHxDPTRPTAxD,"ptr->afh:%d,ptr->pta:%d")
    TRC_MSG(FS_OPEN_BT_UPF_ADDR,"FS_Open BT_UPF_ADDR")
    TRC_MSG(NO_AVAIALBE_SPP_CLIENT_OSDEV_FOR_SPP_CONNECT_REQ,"No avaialbe SPP Client OsDev for SPP_CONNECT_REQ")
    TRC_MSG(MMI_SPP_SDP_WITH_ATTRIBUTEID0X0004__PROTOCOLDESCRIPTORLIST,"MMI SPP Sdp with attributeID=0x0004 : ProtocolDescriptorList")
    TRC_MSG(HFG_EVENT_HANDSFREE_FEATURES_TRC,"HFG_EVENT_HANDSFREE_FEATURES")
    TRC_MSG(STARTING_OUTGOING_CALL,"Starting outgoing call....")
    TRC_MSG(IN_BT_SIMAP_WAIT_REQ_IN_GRACEFUL_DISCONNECT_PROCEDURE_TIMEOUT_HANDLERCLOSING_THE_CONNECTION_WITH_IMMD_TYPE,"In bt_simap_wait_req_in_graceful_disconnect_procedure_timeout_handler():Closing the connection with immd type")
    TRC_MSG(IN_SPPA_HANDLER_BT_MUST_SEND_UART_READY_TO_READ_TO_MMI,"In sppa_handler(): BT must send UART_READY_TO_READ to MMI")
    TRC_MSG(A_BT_JSR82_SESSIONHANDLER,"a bt_jsr82_SessionHandler")
    TRC_MSG(SPPOS_FLUSHRX,"SPPOS_FlushRx")
    TRC_MSG(UNABLE_TO_BUILD_SOAP_COMMAND,"Unable to build SOAP Command")
    TRC_MSG(TRY_TO_DISCONNECT_SCO_HANDLERBT_DEBUGx02X,"Try to disconnect sco handler:%02x")
    TRC_MSG(REJECT_THE_WAITING_CALL,"Reject the waiting call")
    TRC_MSG(IN_BT_SIMAP_DISCONNECT_REQ_HDLRALREADY_DISC_PENDING_IGNORE_THIS_REQUEST,"In bt_simap_disconnect_req_hdlr():Already disc pending, ignore this request")
    TRC_MSG(HFG_EVENT_ENABLE_CALL_WAITING_TRC,"HFG_EVENT_ENABLE_CALL_WAITING")
    TRC_MSG(BT_RFTEST_OP_POWER_TEST_TRC,"BT_RFTEST_OP_POWER_TEST")
    TRC_MSG(SENDING_HANDSHAKE_PACKET_WIT_ERROR_STATUSxD,"Sending HandShake packet wit error status=%d")
    TRC_MSG(ONLY_ONE_SIM_CARD_IS_SUPPORTED_IN_OUR_CURRENT_DESIGN_BUT_DEFINE_MORE_THAN_ONE,"Only one SIM card is supported in our current design, but define more than one!")
    TRC_MSG(RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIM_DISCONNECT_CNF_04,"Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_04")
    TRC_MSG(TIMER_IS_STARTED_BY_SOMEONE_DURING_POWER_OFF_PROCEDURE,"Timer is started by someone during power off procedure")
    TRC_MSG(SET_SPP_SCO_CON_REQ_BD_ADDR_WITH_LAP_BT_DEBUGx04X_UAPBT_DEBUGx04XNAPBT_DEBUGx04X,"Set SPP SCO CON Req Bd_addr with lap =%04X, uap=%04X,nap=%04X")
    TRC_MSG(DISC_SPP_AUDIO_LINK_FIRST_IF_AUDIO_LINK_IS_CONNECTED,"Disc SPP audio link first if audio link is connected")
    TRC_MSG(IN_BT_SIM_RESET_CNF_HDLR_SIMSERVERSENDCONNRSPERR_FAILED_STATUSxD,"In bt_sim_reset_cnf_hdlr: SimServerSendConnRspErr failed, status=%d")
    TRC_MSG(SPP_UART_OWNER_CNF_FROM_MMI_OF_PORTxD,"SPP_UART_OWNER_CNF from MMI of port=%d")
    TRC_MSG(IN_BT_SIM_POWER_OFF_CNF_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD,"In bt_sim_power_off_cnf_hdlr(): RF_CloseChannel failed, status=%d")
    TRC_MSG(RECEIVED_AVRCP_OPERANDS_TYPE_xD,"Received AVRCP Operands, Type: %d")
    TRC_MSG(CMGR_CREATEDATALINK_STATUSBT_DEBUGx02X,"CMGR_CreateDataLink status:%02x")
    TRC_MSG(DEVICE_IDLE_PRESS_BUTTON_TO_INITIATE_OUTGOING_CALL,"Device Idle.  Press BUTTON to initiate outgoing call")
    TRC_MSG(BT_DISC_CNF_CASE1,"DISC_CNF case1")
    TRC_MSG(REGISTER_SPP_SCO_CLIENT_NUM_OF_ENTRIES_xD,"Register SPP SCO Client num of entries =%d")
    TRC_MSG(RECV_SIMAP_DISC_REQ_USING_IMMDEDIAYE_DISC_TYPE,"Recv SIMAP_DISC_REQ, using Immdediaye Disc Type")
    TRC_MSG(ADDRESSBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X,"Address:%02x,%02x,%02x,%02x,%02x,%02x")
    TRC_MSG(FIND_THE_SQT_OWNER_OF_THIS_QUERYCALLBACK_ITS_INDEXxD,"Find the sqt owner of this querycallback, its index=%d")
    TRC_MSG(GET_THE_RETURNED_HID_TRANSACTION_HANDSHAKE_PACKET,"[HID ADP] Get the returned HID Transaction HandShake packet")
    TRC_MSG(HFG_EVENT_HANGUP_TRC,"HFG_EVENT_HANGUP")
    TRC_MSG(BT_DISC_CNF_CASE4,"DISC_CNF case4")
    TRC_MSG(APDU_RESP_FROM_SIM_TASK_IS_NOT_ACCESSIBLE_PHYSICAL_ERROR,"APDU resp from SIM task is not accessible (physical error)")
    TRC_MSG(HFG_EVENT_ANSWER_CALL_TRC,"HFG_EVENT_ANSWER_CALL")
    TRC_MSG(IN_BT_SIM_RESET_CNF_HDLR_CTxD,"In bt_sim_reset_cnf_hdlr(), CT=%d")
    TRC_MSG(GRACEFUL_DISC_TIMEOUTSIMSERVERSTATExDSUBSTATEBT_DEBUGx02X,"graceful_disc_timeout,simServerState=%d,substate=%02x")
    TRC_MSG(IN_ATR_TIMEOUTNOT_IN_POWER_ON_STATE,"In atr_timeout:Not in POWER ON state")
    TRC_MSG(NUM_SPP_DEVSxD,"NUM_SPP_DEVS=%d")
    TRC_MSG(SPPOS_FLUSHTX,"SPPOS_FlushTx")
    TRC_MSG(RECV_DEACTIVATE_REQ_CHECK_DISC_WITH_GRACEFUL_TIMER_IS_RUNNING_OR_NOT,"Recv Deactivate Req, check disc with graceful timer is running or not!")
    TRC_MSG(IN_SPPA_GETBYTESCASE1_SET_READYTOREAD_TO_TRUE_AND_READMORExD,"In Sppa_GetBytes():case1 Set readyToRead to TRUE and ReadMore=%d")
    TRC_MSG(BT_FS_CREATEDIR,"FS_CreateDir")
    TRC_MSG(IN_BT_SPPCLIENT_CMGR_EVENT_CALLBACK_RECV_EVENT_TYPExD,"In bt_sppclient_cmgr_event_callback(): recv event type=%d")
    TRC_MSG(UART_READ_EVENT,"UART: Read event")
    TRC_MSG(HFG_EVENT_SERVICE_CONNECTED_TRC,"HFG_EVENT_SERVICE_CONNECTED")
    TRC_MSG(DISC_SPP_CHNL_FIRST_EVEN_THE_AUDIO_LINK_IS_CONNECTED,"Disc SPP chnl first even the audio link is connected")
    TRC_MSG(RELEASE_SIM_ACCESS_PROFILE_CONNECT_ID_IN_BT_SIM_DISCONNECT_CNF_03,"Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_03")
    TRC_MSG(EM_OPERATIONBT_DEBUGx02XBT_DEBUGx02X,"EM operation:%02x,%02x")
    TRC_MSG(TRY_TO_DISCONNECT_SCO_HANDLER,"Try to disconnect sco handler")
    TRC_MSG(IN_BT_SIM_CONNECT_CNF_HDLRNOT_EXPECT_TO_RECEIVE_BT_SIM_CONNECT_CNF,"In bt_sim_connect_cnf_hdlr():Not Expect to receive BT_SIM_CONNECT_CNF")
    TRC_MSG(WAIT_FOR_SDP_QUESRY_RSP_TO_QUERYCALLBACK,"Wait for SDP quesry rsp to queryCallback")
    TRC_MSG(POWER_OFF_CNF_HDLR_CARDSTATUSBT_DEBUGx02X,"power_off_cnf_hdlr(): cardstatus=%02X")
    TRC_MSG(IN_BT_SIMAP_WAIT_REQ_IN_GRACEFUL_DISC_PROCEDURE_TIMEOUT_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD,"In bt_simap_wait_req_in_graceful_disc_procedure_timeout_hdlr(): RF_CloseChannel failed, status=%d")
    TRC_MSG(HFG_EVENT_ENABLE_EXTENDED_ERRORS_TRC,"HFG_EVENT_ENABLE_EXTENDED_ERRORS")
    TRC_MSG(NEW_STATE_AG_OUTGOING,"new state AG_OUTGOING")
    TRC_MSG(IN_BT_SIMAP_WAIT_ATR_CONNECT_PROCEDURE_TIMEOUT_HDLR_RF_CLOSECHANNEL_FAILED_STATUSxD,"In bt_simap_wait_atr_connect_procedure_timeout_hdlr(): RF_CloseChannel failed, status=%d")
    TRC_MSG(MMI_REJECTS_THIS_SAP_CONNECTION_IN_BT_SIMAP_AUTH_RSP_HDLR,"MMI rejects this SAP connection in bt_simap_auth_rsp_hdlr")
    TRC_MSG(UART_SEND_HCI_COMMAND_x02X,"Uart send Hci cmd with opcode=%02X")
    /* framework */
    TRC_MSG(BT_FRM_PANIC, "=====[BT][PANIC %d]=====")
    TRC_MSG(BT_SEND_MSG_TO_UPPER_LAYER, "BT_BT_send_msg_to_upper_layer dest_mod=%d, sap_id=%d")


/* AVDTP TRACE START */
    TRC_MSG( BT_AVDTP_DISCOVERY_REQ, "BT_AVDTP_DISCOVERY_REQ" )
    TRC_MSG( BT_AVDTP_DISCOVERY_IND, "BT_AVDTP_DISCOVERY_IND" )
    TRC_MSG( BT_AVDTP_DISCOVERY_RSP, "BT_AVDTP_DISCOVERY_RSP" )    
    TRC_MSG( BT_AVDTP_DISCOVERY_CFM, "BT_AVDTP_DISCOVERY_CFM" )        
    TRC_MSG( BT_AVDTP_GET_CAP_REQ, "BT_AVDTP_GET_CAP_REQ" )
    TRC_MSG( BT_AVDTP_GET_CAP_IND, "BT_AVDTP_GET_CAP_IND" )
    TRC_MSG( BT_AVDTP_GET_CAP_RSP, "BT_AVDTP_GET_CAP_RSP" )    
    TRC_MSG( BT_AVDTP_GET_CAP_CFM, "BT_AVDTP_GET_CAP_CFM" )   
    TRC_MSG( BT_AVDTP_SET_CONFIG_REQ, "BT_AVDTP_SET_CONFIG_REQ" )
    TRC_MSG( BT_AVDTP_SET_CONFIG_IND, "BT_AVDTP_SET_CONFIG_IND" )
    TRC_MSG( BT_AVDTP_SET_CONFIG_RSP, "BT_AVDTP_SET_CONFIG_RSP" )    
    TRC_MSG( BT_AVDTP_SET_CONFIG_CFM, "BT_AVDTP_SET_CONFIG_CFM" )      
    TRC_MSG( BT_AVDTP_GET_CONFIG_REQ, "BT_AVDTP_GET_CONFIG_REQ" )
    TRC_MSG( BT_AVDTP_GET_CONFIG_IND, "BT_AVDTP_GET_CONFIG_IND" )
    TRC_MSG( BT_AVDTP_GET_CONFIG_RSP, "BT_AVDTP_GET_CONFIG_RSP" )    
    TRC_MSG( BT_AVDTP_GET_CONFIG_CFM, "BT_AVDTP_GET_CONFIG_CFM" )  
    TRC_MSG( BT_AVDTP_RECONFIG_REQ, "BT_AVDTP_RECONFIG_REQ" )
    TRC_MSG( BT_AVDTP_RECONFIG_IND, "BT_AVDTP_RECONFIG_IND" )
    TRC_MSG( BT_AVDTP_RECONFIG_RSP, "BT_AVDTP_RECONFIG_RSP" )    
    TRC_MSG( BT_AVDTP_RECONFIG_CFM, "BT_AVDTP_RECONFIG_CFM" )      
    TRC_MSG( BT_AVDTP_OPEN_REQ, "BT_AVDTP_OPEN_REQ" )
    TRC_MSG( BT_AVDTP_OPEN_IND, "BT_AVDTP_OPEN_IND" )
    TRC_MSG( BT_AVDTP_OPEN_RSP, "BT_AVDTP_OPEN_RSP" )    
    TRC_MSG( BT_AVDTP_OPEN_CFM, "BT_AVDTP_OPEN_CFM" )         
    TRC_MSG( BT_AVDTP_START_REQ, "BT_AVDTP_START_REQ" )
    TRC_MSG( BT_AVDTP_START_IND, "BT_AVDTP_START_IND" )
    TRC_MSG( BT_AVDTP_START_RSP, "BT_AVDTP_START_RSP" )    
    TRC_MSG( BT_AVDTP_START_CFM, "BT_AVDTP_START_CFM" )     
    TRC_MSG( BT_AVDTP_CLOSE_REQ, "BT_AVDTP_CLOSE_REQ" )
    TRC_MSG( BT_AVDTP_CLOSE_IND, "BT_AVDTP_CLOSE_IND" )
    TRC_MSG( BT_AVDTP_CLOSE_RSP, "BT_AVDTP_CLOSE_RSP" )    
    TRC_MSG( BT_AVDTP_CLOSE_CFM, "BT_AVDTP_CLOSE_CFM" )        
    TRC_MSG( BT_AVDTP_ABORT_REQ, "BT_AVDTP_ABORT_REQ" )
    TRC_MSG( BT_AVDTP_ABORT_IND, "BT_AVDTP_ABORT_IND" )
    TRC_MSG( BT_AVDTP_ABORT_RSP, "BT_AVDTP_ABORT_RSP" )    
    TRC_MSG( BT_AVDTP_ABORT_CFM, "BT_AVDTP_ABORT_CFM" )       
    TRC_MSG( BT_AVDTP_SUSPEND_REQ, "BT_AVDTP_SUSPEND_REQ" )
    TRC_MSG( BT_AVDTP_SUSPEND_IND, "BT_AVDTP_SUSPEND_IND" )
    TRC_MSG( BT_AVDTP_SUSPEND_RSP, "BT_AVDTP_SUSPEND_RSP" )    
    TRC_MSG( BT_AVDTP_SUSPEND_CFM, "BT_AVDTP_SUSPEND_CFM" )          
    TRC_MSG( BT_AVDTP_NO_RESOURCE, "BT_AVDTP NO Resource available" )      
    TRC_MSG( BT_AVDTP_CHANNEL_IS_ZERO, "AVDTP chnl = 0" )        
    TRC_MSG( BT_AVDTP_REG_L2CAP_FAILED, "AVDTP reg l2cap failed" )     
    TRC_MSG( BT_AVDTP_NO_RESOURCE_AVAILABLE, "AVDTP: No resource available in AvdtpSigHandleCommand" ) 
    TRC_MSG( BT_AVDTP_REMOVE_INUSE_LIST, "Remove the stream from the in-use list" )
    TRC_MSG( BT_AVDTP_SIGNAL_OPEN, "AVDTP_SIG_OPEN" )
    TRC_MSG( BT_AVDTP_SIGNAL_TX_DONE,  "AVDTP: Signal TX Done" )
    TRC_MSG( BT_AVDTP_SIGNAL_TX_ERROR,  "AVDTP: Signal TX Error or Timeout" )
    TRC_MSG( BT_AVDTP_SIGNAL_CMD_RECV,  "AVDTP: Signal Command Received :%02x" )
    TRC_MSG( BT_AVDTP_SIGNAL_RSP_RECV,  "AVDTP: Signal Response Received" )
    TRC_MSG( BT_AVDTP_SIGNAL_REJ_RECV,  "AVDTP: Signal Reject Received" )
    TRC_MSG( BT_AVDTP_SIGNAL_CMD_LENGTH_ERROR,  "AVDTP: Invalid Signal Command Length" )
    TRC_MSG( BT_AVDTP_SIGNAL_RSP_LENGTH_ERROR,  "AVDTP: Invalid Signal Response Length" )
    TRC_MSG( BT_AVDTP_SIGNAL_CONNECTED,  "AVDTP: Signal Channel Connectedn" )
    TRC_MSG( BT_AVDTP_SIGNAL_DISCONNECTED,  "AVDTP: Signal Channel Disconnected" )
    TRC_MSG( BT_AVDTP_STREAM_CONNECTED,  "AVDTP: Stream Connected" )
    TRC_MSG( BT_AVDTP_STREAM_DISCONNECTED,  "AVDTP: Stream Disconnect" )
    TRC_MSG( BT_AVDTP_DATA_RECEIVED,  "AVDTP: Stream Data Received = %02x" ) 
    /* AVDTP TESTER*/
    TRC_MSG( BT_AVDTPTS_EVENT, "AVDTP TESTER callback event :%02x" ) 
    TRC_MSG( BT_AVDTPTS_CONNECT_REQ,"AVDT_ConnectReq" )
    TRC_MSG( BT_AVDTPTS_CREATE_CONN, "try to create AVDTP connection" )
    TRC_MSG( BT_AVDTPTS_FAILED_CONN, "failed to create connection" )
    TRC_MSG( BT_AVDTPTS_RECONFIG_ERR_HDL, "AVDT_ReConfigure_Req Invalid Stream Handler" )    
    TRC_MSG( BT_AVDTPTS_CLOSE_ERR_HDL, "AVDT_Close_Req Invalid Stream Handler" )
    TRC_MSG( BT_AVDTPTS_START_ERR_HDL, "AVDT_Start_Req Invalid Stream Handler" )
    TRC_MSG( BT_AVDTPTS_SUSPEND_ERR_HDL, "AVDT_Suspend_Req Invalid Stream Handler" )
    TRC_MSG( BT_AVDTPTS_ABORT_ERR_HDL, "AVDT_Abort_Req Invalid Stream Handler" )
    TRC_MSG( BT_AVDTPTS_EVENT_CONNECT, "MTK AVDTP_EVENT_CONNECT" )
    TRC_MSG( BT_AVDTPTS_EVENT_CONNECTED, "MTK AVDTP_EVENT_CONNECT Be connected" )
    TRC_MSG( BT_AVDTPTS_SEID_INFO, "seid :%02x, inUse:%02x" ) 
    TRC_MSG( BT_AVDTPTS_MEDIA_INFO, "mediaType :%02x, streamType :%02x" )  
    TRC_MSG( BT_AVDTPTS_EVENT_DISCOVERY_CNF, "MTK AVDTP_EVENT_DISCOVER_CNF error code:%02x" )  
    TRC_MSG( BT_AVDTPTS_CODEC_TYPE, "Parms->p.capability->type  AVDTP_SRV_CAT_MEDIA_CODEC." )              
    TRC_MSG( BT_AVDTPTS_EVENT_CAP_CNF, "MTK AVDTP_EVENT_GET_CAP_CNF Error:%02x" )            
    TRC_MSG( BT_AVDTPTS_EVENT_SET_CFG_CNF, "MTK AVDTP_EVENT_SET_CFG_CNF error code:%02x" )
    TRC_MSG( BT_AVDTPTS_EVENT_GET_CFG_CNF, "MTK AVDTP_EVENT_GET_CFG_CNF error code:%02x" )
    TRC_MSG( BT_AVDTPTS_EVENT_STREAM_RECONFIG_CNF, "MTK AVDTP_EVENT_STREAM_RECONFIG_CNF error code:%02x" )  
    TRC_MSG( BT_AVDTPTS_EVENT_STREAM_OPEN, "MTK AVDTP_EVENT_STREAM_OPEN error code:%02x" )
    TRC_MSG( BT_AVDTPTS_EVENT_SECURITY_CNF, "MTK AVDTP_EVENT_STREAM_SECURITY_CNF error code:%02x" )  
    TRC_MSG( BT_AVDTPTS_NO_FREE_STREAM, "No available freeStreamInfoList" )
    TRC_MSG( BT_AVDTPTS_EVENT_STREAM_STARTED, "MTK AVDTP_EVENT_STREAM_STARTED error code:%02x" )         
    TRC_MSG( BT_AVDTPTS_EVENT_STREAM_SUSPENDED, "MTK AVDTP_EVENT_STREAM_SUSPENDED error code:%02x" )
/* AVDTP TRACE END */

/* HCI TRACE START */
TRC_MSG(BT_HCI_TRACE_START,"BT_HCI_TRACE_START")  /* MBT LOG FILTER. DO NOT MODIFY */
    
    TRC_MSG(FUNC_UARTTRAN_SENDDATA,"UARTTRAN_SendData()")
    TRC_MSG(FUNC_MTKUART_TRANSMIT_DATA,"mtkuartTransmitData()")
    TRC_MSG(FUNC_UART_WRITE,"UART_Write(), buffer=0x%x, length=%d")
    TRC_MSG(FUNC_HCI_PACKET_SENT,"HciPacketSent()")
    TRC_MSG(FUNC_HCI_PROCESS,"HCI_Process()")
    TRC_MSG(FUNC_HCI_PROCESS_SENT_PACKETS,"HciProcessSentPackets()")
    TRC_MSG(FUNC_HCI_REGISTER_RADIO_HANDLER,"HCI_RegisterRadioHandler()")
    TRC_MSG(FUNC_HCI_CHECK_FOR_TX_DATA_SEND,"HciCheckForTxDataSend()")
    TRC_MSG(FUNC_SEND_HCI_PACKETS,"SendHciPackets()")
    TRC_MSG(FUNC_L2CAP_HCI_TX_DONE,"L2CAP_HciTxDone()")
    TRC_MSG(BTLOG_HCI_COMMAND_COMPLETE_EVENT_OPCODE,"BTLOG:HCI:HCIEVENT_INFO:HciProcessEvent_CmdComplete_opCode=%04X")
    TRC_MSG(BTLOG_HCI_HARDWARE_ERROR_EVENT_ERRCODE,"BTLOG:HCI:HCIEVENT_INFO:HciProcessEvent_Hardware_Error_errcode=0x%02X")
    TRC_MSG(BTLOG_HCI_HCIINIT_HANDLE_COMMAND_COMPLETE_EVENT,"BTLOG:HCI:HCIEVENT_INFO:HCC_Init_HandleCommandComplete")
    TRC_MSG(BTLOG_HCI_HCIINIT_HANDLE_COMMAND_COMPLETE_EVENT_HCC_RESET,"BTLOG:HCI:HCIEVENT_INFO:HCC_Init_CommandComplet_HCC_RESET")
    TRC_MSG(BTLOG_HCI_HCIINIT_HANDLE_COMMAND_COMPLETE_EVENT_HCC_READ_BUFFER_SIZE,"BTLOG:HCI:HCIEVENT_INFO:HCC_Init_CommandComplet_HCC_READ_BUFFER_SIZE")
    TRC_MSG(BTLOG_HCI_HCIINIT_HANDLE_COMMAND_COMPLETE_EVENT_HCC_SET_CTRLR_TO_HOST_FLOW_CTRL,"BTLOG:HCI:HCIEVENT_INFO:HCC_Init_CommandComplet_HCC_SET_CTRLR_TO_HOST_FLOW_CTRL")
    TRC_MSG(BTLOG_HCI_HCIINIT_HANDLE_COMMAND_COMPLETE_EVENT_HCC_HOST_BUFFER_SIZE,"BTLOG:HCI:HCIEVENT_INFO:HCC_Init_CommandComplet_HCC_HOST_BUFFER_SIZE")
    TRC_MSG(BTLOG_HCI_HCIINIT_HANDLE_COMMAND_COMPLETE_EVENT_HCC_WRITE_SCO_FC_ENABLE,"BTLOG:HCI:HCIEVENT_INFO:HCC_Init_CommandComplet_HCC_WRITE_SCO_FC_ENABLE")
    TRC_MSG(BTLOG_HCI_CMD_STATUS_EVENT_PARMS_STATUS_NUM_HCICMD_PKTS_OPCODE,"Recv HCI CMD Status Event: P1_Status=%02X,P2_NUM_HCICMD_PKT=%02X,P3_OpCode=%04X")
    TRC_MSG(BTLOG_HCI_HOST_NUM_COMPLETED_PACKETS_HANDLE_PACKETS,"BTLOG_UART_DUMP:HCC_HOST_NUM_COMPLETED_PACKETS handle=0x%02x, packets=%d")   /* UART_DUMP */
    TRC_MSG(HCI_INVALID_HCI_HANDLE_IN_SENT_PACKET_LIST,"HCI:  Invalid HCI handle in sent packet list")
    TRC_MSG(HCI_EVNT_HCIHANDLECOMMANDCOMPLETE_HCC_HOST_BUFFER_SIZE,"HCI_EVNT:  HciHandleCommandComplete: HCC_HOST_BUFFER_SIZE")
    TRC_MSG(HCI_EVNT_HCIHANDLECOMMANDCOMPLETE_HCC_SET_CTRLR_TO_HOST_FLOW_CTRL,"HCI_EVNT:  HciHandleCommandComplete: HCC_SET_CTRLR_TO_HOST_FLOW_CTRL")
    TRC_MSG(HCI_EVNT_HCIHANDLECOMMANDCOMPLETE_HCC_RESET,"HCI_EVNT:  HciHandleCommandComplete: HCC_RESET")
    TRC_MSG(HCI_EVNT_HCIHANDLECOMMANDCOMPLETE_HCC_READ_BUFFER_SIZE,"HCI_EVNT:  HciHandleCommandComplete: HCC_READ_BUFFER_SIZE")
    TRC_MSG(HCI_EVNT_HCIHANDLECOMMANDCOMPLETE,"HCI_EVNT:  HciHandleCommandComplete")
    TRC_MSG(HCI_EVNT_HCIHANDLECOMMANDCOMPLETE_HCC_WRITE_SCO_FC_ENABLE,"HCI_EVNT:  HciHandleCommandComplete: HCC_WRITE_SCO_FC_ENABLE")
    TRC_MSG(HCI_SEND_HCI_COMMAND_BT_DEBUGx02X,"hci: send hci command %04x")
    TRC_MSG(HCIPROCESSEVENT_HCE_COMMAND_COMPLETE,"HciProcessEvent: HCE_COMMAND_COMPLETE")
    TRC_MSG(UART_SEND_HCI_COMMAND_BT_DEBUGx02X,"hci: uart send hci command %04x")
    TRC_MSG(HCI_RECEIVED_DATA_FOR_AN_INVALID_HCI_HANDLE_IGNORED,"HCI: Received data for an invalid HCI handle (ignored)")
    TRC_MSG(HCI_SET_BUFFER_SIZE_COMPLETE,"HCI: Set Buffer Size Complete")
    TRC_MSG(HCI_WRITE_SCO_FLOW_CONTROL_ENABLE_COMPLETE,"HCI: Write SCO Flow Control Enable Complete")
    TRC_MSG(HCI_READ_BUFFER_COMPLETE_ACLTXPKTLENxD,"HCI: Read Buffer Complete: aclTxPktLen=%d,")
    TRC_MSG(HCI_SET_FLOW_CONTROL_COMPLETE,"HCI: Set Flow Control Complete")
    TRC_MSG(HCI_SENDING_HCC_RESET,"HCI:  Sending HCC_RESET")
    TRC_MSG(HCI_PROCESS_FALURE,"HCI_Process: falure")
    TRC_MSG(HCI_PROCESS_CALL_RADIO_WAKE_UP_FUNCTION,"HCI_Process: call radio wake up function")
    TRC_MSG(HCI_PROCESS_HCICHECKFORTXCMD,"HCI_Process: HciCheckForTxCmd")
    TRC_MSG(HCI_HCI_USB_TX_BUFFER_SIZExD_MAY_NOT_BE,"HCI: HCI_USB_TX_BUFFER_SIZE(%d) may not be")
    TRC_MSG(HCI_PACKET_HANDLED_TRC,"HCI_PACKET_HANDLED")
    TRC_MSG(WRONG_LINK_TYPE,"Wrong link type")
    TRC_MSG(WIFI_SETTING_IS_MADE,"Wifi setting is made")
    TRC_MSG(IF_HOST_WAKEUP_NO_RESPONSE_WE_WILL_GEN_A_FAKE_EVENT_AND_TRY_TO_WAKEUP_AGAIN,"If Host Wakeup no response, we will gen a fake event and, try to wakeup again")

TRC_MSG(BT_HCI_TRACE_END,"BT_HCI_TRACE_END")  /* MBT LOG FILTER. DO NOT MODIFY */
/* HCI TRACE END */

/* L2CAP TRACE START */
TRC_MSG(BT_L2CAP_TRACE_START,"BT_L2CAP_TRACE_START")  /* MBT LOG FILTER. DO NOT MODIFY */

    TRC_MSG(FUNC_L2CAP_PROCESS_REQ_OP,"L2Cap_ProcessReq() op=0x%x")
    TRC_MSG(FUNC_L2CAP_STATE_MACHINE_CID_EVENT,"L2Cap_StateMachine() Cid=0x%x, event=0x%x, state=0x%x")
    TRC_MSG(FUNC_L2CAP_STATE_CONFIG_CID_EVENT,"L2CapState_CONFIG() Cid=0x%x, event=0x%x")
    TRC_MSG(FUNC_L2CAP_STATE_OPEN_CID_EVENT,"L2CapState_OPEN() Cid=0x%x, event=0x%x")
    TRC_MSG(FUNC_L2CAP_HANDLE_CONFIG_REQ_CID,"L2Cap_HandleConfigReq() Cid=0x%x")
    TRC_MSG(FUNC_L2CAP_SEND_AUTO_CONFIG_RSP_CID,"L2CAP SendAutoConfigRsp() cid=0x%x")
    TRC_MSG(FUNC_L2CAP_INIT,"L2CAP_Init")
    TRC_MSG(FUNC_L2CAP_DEINIT,"L2CAP_Deinit")
    TRC_MSG(FUNC_L2CAP_NOTIFY_USER_AND_CLOSE_CHANNEL,"L2Cap_NotifyUserAndCloseChannel: Status=0x%X, inUse=%d, flags=0x%X, state=0x%X")
    TRC_MSG(FUNC_L2CAP_GETSYSPKT,"L2Cap_GetSysPkt: priority=%d")
    TRC_MSG(FUNC_L2CAP_BUILDSFRAME,"L2Cap_BuildSFrame: remoteCid=0x%X, flags2=0x%X")
    TRC_MSG(FUNC_L2CAP_SENDSFRAME,"L2Cap_SendSFrame: remoteCid=0x%X, flags=0x%X")
    TRC_MSG(FUNC_L2CAP_SECACCESSRSP,"L2Cap_SecAccessRsp: event=%d, flags=0x%X, state=%d")
    TRC_MSG(L2CAP_FREECHANNEL_LINK_REFCOUNT_DISCFLAG,"L2Cap_FreeChannel: link refcount=%d, discFlags=%d")
    TRC_MSG(L2CAP_BUILDSFRAME_INUSE,"L2Cap_BuildSFrame: N(R) in I frame, Channel->inUse=%d")
    TRC_MSG(L2CAP_BUILDSFRAME_FCS,"L2Cap_BuildSFrame: S frame fcs=0x%04X")
    TRC_MSG(L2CAP_SENDSFRAME_STATUS,"L2Cap_SendSFrame: status=0x%X")
    TRC_MSG(L2CAP_SENDSFRAME_NO_PACKET,"L2Cap_SendSFrame: No S frame system packet")

    TRC_MSG(BTLOG_L2CAP_DISC_PENDING_PKT_HANDLED,"L2CapState_W4_DISC_CNF(): LLC_TX_DONE")
    TRC_MSG(BTLOG_L2CAP_CON_PENDING_PKT_HANDLED,"L2CapState_W4_CON_CNF(): LLC_TX_DONE")
    TRC_MSG(BTLOG_L2CAP_CONFIG_PKT_HANDLED,"L2CapState_CONFIG(): LLC_TX_DONE")
    TRC_MSG(L2CAP_L2CAP_FREECHANNELx04X_PSM_x04X_FLAGS_x04X,"L2CAP: L2Cap_FreeChannel(0x%04x), PSM 0x%04x, Flags 0x%04x")
    TRC_MSG(L2CAP_FREE_OPEN_TIMER,"l2cap free open timer")
    TRC_MSG(L2CAP_TESTER_DISCONN_REQ,"l2cap tester disconn req")
    TRC_MSG(L2CAP_GROUP_DATA_REQUEST,"L2CAP Group Data Request")
    TRC_MSG(L2CAP_VALIDATEOPTIONS_OPTION_xD_LEN_xD,"L2CAP: ValidateOptions() Option %d, Len %d")
    TRC_MSG(L2CAP_SENDDISCONNECTREQBT_DEBUGx04X_SENT_PACKET,"L2CAP: SendDisconnectReq(%04x) Sent Packet.")
    TRC_MSG(L2CAP_NOTIFYPSM_CONSUMED_NOTIFICATION_EVENT_xX,"L2CAP: NotifyPsm() Consumed notification event=0x%x.")
    TRC_MSG(L2CAP_INITIALIZING_FOR_xD_PROTOCOLS_FOR_xD_GROUPS_FOR_xD_DEVICES_WITH_xD_CHANNELS,"L2CAP: Initializing for %d protocols, for %d groups, for %d devices, with %d channels.")
    TRC_MSG(L2CAP_PSM_REGISTERED_BT_DEBUGx04X,"L2CAP: PSM Registered %04x.")
    TRC_MSG(L2CAP_TIMER_HALTED_BY_DISCONNECTREQ_STATE_xD,"L2CAP: Timer Halted by DisconnectReq, state %d")
    TRC_MSG(L2CAP_UPDATERXWINDOW_EXISTING_xD_AVAIL_xD,"L2CAP: UpdateRxWindow() existing %d, avail %d.")
    TRC_MSG(L2CAP_RECEIVED_xD_BYTES,"L2CAP: Received %d bytes.")
    TRC_MSG(L2CAP_PROCESSRSP_RECEIVED_RESPONSE_TO_UNKNOWN_REQUEST_IDENT_BT_DEBUGx02X,"L2CAP: ProcessRsp() Received Response to unknown request (Ident %02x)")
    TRC_MSG(L2CAP_UPDATERXWINDOW_MPU_xD_SEGLENGTH_xD_BUFFERED_xD,"L2CAP: UpdateRxWindow() MPU %d, segLength %d, buffered %d.")
    TRC_MSG(L2CAP_PROCESSRSPBT_DEBUGx04X_RESPONSE_CID_DID_NOT_MATCH_EXPECTED_CID_OPCODE_xD,"L2CAP: ProcessRsp(%04x) Response CID did not match expected CID (Opcode %d).")
    TRC_MSG(L2CAP_DISCARDING_DATA_FROM_UNKNOWN_HCIHANDLE,"L2CAP: Discarding data from unknown HciHandle.")
    TRC_MSG(L2CAP_SENDCONFIGREQBT_DEBUGx04X_SENT_PACKET,"L2CAP: SendConfigReq(%04x) Sent Packet.")
    TRC_MSG(L2CAP_SENDCONNECTREQBT_DEBUGx04X_SENT_PACKET,"L2CAP: SendConnectReq(%04x) Sent Packet.")
    TRC_MSG(L2CAP_SENDDISCONNECTRSPBT_DEBUGx04X_SENT_PACKET,"L2CAP: SendDisconnectRsp(%04x) Sent Packet.")
    TRC_MSG(L2CAP_STATE_MACHINEBT_DEBUGx04X_EVENT_LLC_DISC_REQ,"L2CAP: State Machine(%04x) Event LLC_DISC_REQ.")
    TRC_MSG(L2CAP_PROCESSNRBT_DEBUGx02X_ACKNUM__xD_UNACKED__xD,"L2CAP: ProcessNr(%02x) acknum = %d, unacked = %d.")
    TRC_MSG(L2CAP_PROCESSGROUPDATABT_DEBUGx04X_DATALEN_xD,"L2CAP: ProcessGroupData(%04x) DataLen %d")
    TRC_MSG(L2CAP_CHANNELRXBT_DEBUGx04X__DROPPED_DATA__NO_CHANNEL,"L2CAP: ChannelRx(%04x) ** DROPPED Data ** No Channel!")
    TRC_MSG(L2CAP_RECEIVED_CONFIGRSPNEG_DISCONNECTING,"L2CAP: Received ConfigRspNeg, Disconnecting....")
    TRC_MSG(L2CAP_GETNEXTSEGMENTBT_DEBUGx02X_SDU_xX_SEGMENT_xD_OF_xD_NS__xD,"L2CAP: GetNextSegment(%02x) SDU=0x%x. Segment %d of %d: N(S) = %d.")
    TRC_MSG(L2CAP_SENDFEATURESREQBT_DEBUGx04X_SENT_PACKET,"L2CAP: SendFeaturesReq(%04x) Sent Packet.")
    TRC_MSG(L2CAP_INDICATING_xD_BYTE_PACKET_TO_UPPER_LAYER,"L2CAP: Indicating %d byte packet to upper layer.")
    TRC_MSG(L2CAP_GETINFOBT_DEBUGx04X_SENT_PACKET_IDENT_xD,"L2CAP: GetInfo(%04x) Sent Packet, Ident %d.")
    TRC_MSG(L2CAP_CONFIGBT_DEBUGx04X_STATE_ADVANCED_TO_OPEN,"L2CAP: CONFIG(%04x) State advanced to OPEN")
    TRC_MSG(L2CAP_HANDLERXERRORxX_HCIHANDLE_BT_DEBUGx04X,"L2CAP: HandleRxError(0x%x) hciHandle %04x")
    TRC_MSG(L2CAP_RECEIVED_UNSOLICITED_CONFIGURATION_RESPONSE,"L2CAP: Received unsolicited Configuration Response.")
    TRC_MSG(L2CAP_DUPLICATE_REQUEST_IGNORED_CID_BT_DEBUGx04X_OPCODE_BT_DEBUGx02X_IDENT_BT_DEBUGx02XxS,"L2CAP: Duplicate Request ignored, Cid %04x, Opcode %02x, Ident %02x")
    TRC_MSG(L2CAP_ACCEPTSDUDATA_ACCEPTED_xD_OF_xD_BYTES,"L2CAP: AcceptSduData() Accepted %d of %d bytes.")
    TRC_MSG(L2CAP_RECEIVED_CONFIGRSPNEG_FOR_FLOW_CONTROL_OPTION,"L2CAP: Received ConfigRspNeg for Flow Control Option.")
    TRC_MSG(L2CAP_PROCESSCHANNELDATABT_DEBUGx04X_DATALEN_xD,"L2CAP: ProcessChannelData(%04x) DataLen %d.")
    TRC_MSG(L2CAP_DISCACLLINK,"L2CAP_DiscAclLink")
    TRC_MSG(L2CAP_ISSUEHCIREQUESTTOSEND_HCI_REQUEST_TO_SEND_CALLED,"L2Cap_IssueHciRequestToSend() HCI_Request to send called!")
    TRC_MSG(L2CAP_PINGBT_DEBUGx04X_SENT_PACKET_IDENT_xD,"L2CAP: Ping(%04x) Sent Packet, Ident %d.")
    TRC_MSG(L2CAP_SENDING_LONE_CONFIGREQ_TO_SOLICIT_MORE_RESPONSES,"L2CAP: Sending Lone ConfigReq to solicit more responses.")
    TRC_MSG(L2CAP_SEND_CONFIG_REQUEST,"L2CAP: Sent config request")
    TRC_MSG(L2CAP_START_A_DISC_TIMER_BT_L2CAP_DISCONNECT_TIMEOUT_500MS,"L2CAP start a disc timer BT_L2CAP_DISCONNECT_TIMEOUT_500MS")
    TRC_MSG(L2CAP_START_A_DISC_TIMER_BT_L2CAP_DISCONNECT_TIMEOUT_50S,"L2CAP start a disc timer BT_L2CAP_DISCONNECT_TIMEOUT_50S")
    TRC_MSG(STATUSBT_DEBUGx02X,"status:%02x")
    TRC_MSG(RTX_SECONDS,"Rtx seconds")
    TRC_MSG(ERTX_20_SECONDS,"ERTX 20 seconds")
    TRC_MSG(ERTX_60_SECONDS,"ERTX 60 seconds")
    TRC_MSG(PSM_ALLOW,"PSM allow")
    TRC_MSG(RTX_TIMEOUT_IN_SNIFF_MODE,"RTX timeout in sniff mode")
    TRC_MSG(PSM_NO_ALLOW,"PSM No allow")
    /* L2CAP TESTER*/
    TRC_MSG( BT_L2CAPTS_INIT, "L2CAP Testing:  Enter Init function" )     
    TRC_MSG( BT_L2CAPTS_UNABLEREG, "L2CAP Testing:  Unable to register with L2CAP" )     
    TRC_MSG( BT_L2CAPTS_DISCONNECTREQ, "L2CA_DisconnectReq" )     
    TRC_MSG( BT_L2CAPTS_INFOREQ, "L2CA_InfoReq" )     
    TRC_MSG( BT_L2CAPTS_ECHOREQ, "L2CA_EchoReq" )         
    TRC_MSG( BT_L2CAPTS_SENDDATAREQ, "L2CA SendData" )  
    TRC_MSG( BT_L2CAPTS_CONNECTREQ, "L2CAP connect Req cid :%02x" )  
    TRC_MSG( BT_L2CAPTS_EVENT, "L2CAP l2capTesterL2Callback event :%02x" ) 
    TRC_MSG(GROUP_REMOVE_REQUEST,"Group remove request")
    TRC_MSG(ACL_LINK_CREATE_SUCCESSFULLY,"ACL link create successfully")
    TRC_MSG(STR_DATA_LENxD,"str data len=%d")
    TRC_MSG(CALL_BTTESTER_SENDMSG,"call btTester_sendMsg")
    TRC_MSG(GROUP_ADD_REQUEST,"Group add request")

TRC_MSG(BT_L2CAP_TRACE_END,"BT_L2CAP_TRACE_END")  /* MBT LOG FILTER. DO NOT MODIFY */
/* L2CAP TRACE END */

/* RFCOMM TRACE START */
TRC_MSG( BT_RFCOMM_TRACE_START,"BT_RFCOMM_TRACE_START")  /* MBT LOG FILTER. DO NOT MODIFY */

    TRC_MSG( BT_RFCOMMM_RECV_SABM, "RFCOMM:  SABM received at DLCI=0x%02x of Mux=0x%02x" )
    TRC_MSG( BT_RFCOMMM_RECV_DISC, "RFCOMM:  DISC received at DLCI=0x%02x of Mux=0x%02x" ) 
    TRC_MSG( BT_RFCOMMM_RECV_INVALID_LENGTH, "RFCOMM:  Invalid receive length, disconnecting..." )
    TRC_MSG( BT_RFCOMMM_DM_REPORT, "RFCOMM:  DM is received at DLCI %d of mux %d" )
    TRC_MSG( BT_RFCOMMM_INVALID_EVENT, "RFCOMM:  Invalid event for DLCI=0x%02x Mux=0x%02x" )
    TRC_MSG( BT_RFCOMMM_DLC_UP, "RFCOMM: UA is received at DLCI=0x%02x of Mux=0x%02x, sending MSC" ) 
    TRC_MSG( BT_RFCOMMM_DLC_REJECT, "RFCOMM: DM is received at DLCI=0x%02x of Mux=0x%02x" )
    TRC_MSG( BT_RFCOMMM_INVALID_EVENT_FOR_DLC, "RFCOMM:  Invalid event for DLCI=0x%02x Mux=0x%02x" )
    TRC_MSG( BT_RFCOMMM_UA_SEND, "RFCOMM:  UA_F sent successfully to DLCI=0x%02x on Mux=0x%02x, now sending MSC" )
    TRC_MSG( BT_RFCOMMM_SEND_MSC, "RFCOMM:  Sending MSC" )
    TRC_MSG( BT_RFCOMMM_MSC_CAN_NOT_SEND, "RFCOMM:  L2CAP did not allow MSC to be sent" )
    TRC_MSG( BT_RFCOMMM_RECV_DISC_FOR_DLC, "RFCOMM:  DISC received at DLCI=0x%02x of Mux=0x%02x" )
    TRC_MSG( BT_RFCOMMM_DLCI_DISCONNECT, "RFCOMM:  DLCI=0x%02x on Mux=0x%02x disconnected" )
    TRC_MSG( BT_RFCOMMM_SABM_SEND, "RFCOMM:  SABM sent successfully to DLCI=0x%02x on Mux=0x%02x" )
    TRC_MSG( BT_RFCOMMM_NEGO_FAILED, "RFCOMM:  Negotiation failed" )
    TRC_MSG( BT_RFCOMMM_OUT_OF_RESOURCE, "RFCOMM:  Out of resources on connect request for Mux=0x%02x" )
    TRC_MSG( BT_RFCOMMM_ALLOCATED_DLCI, "RFCOMM:  Allocated incoming DLCI=0x%02x on Mux=0x%02x" )
    TRC_MSG( BT_RFCOMMM_MUX_NOT_REGJSTERED, "RFCOMM:  Service %d not registered on connect request for Mux=0x%02x" )
    TRC_MSG( BT_RFCOMMM_CMD_UNALLOCATED_MUX, "RFCOMM:  Command for unallocated channel on Mux=%d" )
    TRC_MSG( BT_RFCOMMM_SABM_SENT, "RFCOMM:  Sending SABM to DLCI=0 for Mux=0x%02x" )
    TRC_MSG( BT_RFCOMMM_MUX_UP, "RFCOMM:  Mux=0x%02x up" )
    TRC_MSG( BT_RFCOMMM_CANNT_SEND_NEGO, "RFCOMM:  Could not send negotiation to DLCI=0x%02x on Mux=0x%02x " )
    TRC_MSG( BT_RFCOMMM_NOGO_SEND_SUCCESS, "RFCOMM:  Negotiation sent successfully to DLCI=0x%02x on Mux=0x%02x" ) 
    TRC_MSG( BT_RFCOMMM_CONN_DLCI_REJECT, "RFCOMM:  Connection to DLCI=0 on Mux=0x%02x rejected (or invalid event)" )
    TRC_MSG( BT_RFCOMMM_SEND_UA, "RFCOMM:  Sending UA_F to DLCI=0 on Mux=0x%02x" )
    TRC_MSG( BT_RFCOMMM_INVALUD_UNINIT_MUX, "RFCOMM:  Invalid event for uninitialized Mux=0x%02x" )
    TRC_MSG( BT_RFCOMMM_L2CAP_DISCONNECT, "RFCOMM:  L2CAP disconnect, shutting down mux" )
    TRC_MSG( BT_RFCOMMM_DISC_MUX, "RFCOMM:  DISC (shutdown) for Mux=0x%02x" )
    TRC_MSG( BT_RFCOMMM_RECV_SABMDM, "RFCOMM:  Received SABM or DM for channel 0 on connected session" )
    TRC_MSG( BT_RFCOMMM_INVALID_EVENT_OF_MUX, "RFCOMM:  Invalid event for uninitialized Mux=0x%02x" )
    TRC_MSG( BT_RFCOMMM_SEND_CONNECT_REJECT, "RFCOMM:  Sending connect reject on Mux=0x%02x" )
    TRC_MSG( BT_RFCOMMM_INCOMING_CONN, "RFCOMM:  Incoming connection, initializing Mux=0x%02x" )
    TRC_MSG( BT_RFCOMMM_L2CAP_DISCONNECT_EVENT, "RFCOMM:  L2CAP Disconnected Event ")
    TRC_MSG( BT_RFCOMMM_INVALID_FCS, "RFCOMM:  Invalid FCS, shutting down Mux=0x%02x " )
    TRC_MSG( BT_RFCOMMM_INVALUD_RX_LENGTH, "RFCOMM:  Invalid length in RX data, shutting down Mux=0x%02x " )
    TRC_MSG( BT_RFCOMMM_SEND_DM_F, "RFCOMM:  Sending DM_F to DLCI=0x%02x on Mux=0x%02x" )
    TRC_MSG( BT_RFCOMMM_RE_FLOWCTL_DISC, "RFCOMM:  Remote tried to renegotiate flow control, disconnecting L2CAP" )
    TRC_MSG( BT_RFCOMMM_RX_MSC, "Rx MSC, DLC Flag=0x%04X" )
    TRC_MSG( BT_RFCOMMM_INVALID_FLOWCTRL, "RFCOMM:  Invalid flow control command received" )
    TRC_MSG( BT_RFCOMMM_INVALID_LENGTH, "RFCOMM:  Invalid length, disconnecting L2CAP" )
    TRC_MSG( BT_RFCOMMM_INVALUD_PARM_LENGTH, "RFCOMM:  Invalid parm length, disconnecting L2CAP" )
    TRC_MSG( BT_RFCOMMM_UNABLE_REG_L2CAP, "RFCOMM:  Unable to register with L2CAP." )
    TRC_MSG( BT_RFCOMMM_INITIZED, "RFCOMM:  Initialized." )
    TRC_MSG( BT_RFCOMMM_DEINITED, "RFCOMM:  Deinitialized." )
    TRC_MSG( BT_RFCOMMM_CHNL_REGED_NOT_USED, "RFCOMM:  A channel was requested, but not used" )
    TRC_MSG( BT_RFCOMMM_REG_CHNL_SERV, "RFCOMM:  Registered channel on service %d" )
    TRC_MSG( BT_RFCOMMM_FAILED_REG_CHNL, "RFCOMM:  Failed to registered channel on service %d" )
    TRC_MSG( BT_RFCOMMM_DE_REG_CHNL, "RFCOMM:  Deregistered channel from service %d" )
    TRC_MSG( BT_RFCOMMM_DE_REG_ALL_CHNL, "RFCOMM:  Deregistered all channels from service %d" )
    TRC_MSG( BT_RFCOMMM_CHNL_REQ_PREVIOUS, "RFCOMM:  Service channel requested previously" )
    TRC_MSG( BT_RFCOMMM_CHNL_REQ_FIRST, "RFCOMM:  Service channel requested for the first time" )
    TRC_MSG( BT_RFCOMMM_MUX_FREEED, "RFCOMM:  Mux=0x%02x freed" )
    TRC_MSG( BT_RFCOMMM_ALLOCATED_DLCI_ON_MUX, "RFCOMM: Allocated DLCI=0x%02x on Mux=0x%02x" )
    TRC_MSG( BT_RFCOMMM_COULD_NOT_L2CAP_SHUTDOWN, "RFCOMM:  Could not disconnect from L2CAP, shutting down mux" )
    TRC_MSG( BT_RFCOMMM_LINK_LOSS, "RFCOMM:  Link loss timer fired, shutting down mux: aclTxPacketsLeft=%d" )
    TRC_MSG( BT_RFCOMMM_TX_CREDIT_OVERFLOW, "RFCOMM:  txCredit overflow" )
    TRC_MSG( BT_RFCOMMM_DATA_RECV_NO_CREDIT, "RFCOMM:  Data received from device with no credit" )
    TRC_MSG( BT_RFCOMMM_STOP3, "stop 3" )            
    TRC_MSG( BT_RFCOMMM_NO_MSC, "no MSC" )
    TRC_MSG( BT_RFCOMMM_TX_NUMBER_MINUS, "MUX(MuxId).numTxPackets-- = :%d" )
    TRC_MSG( BT_RFCOMMM_CLEAR_MUX_FLAG_XMIT1, "Clear MUX_FLAG_XMIT_01")
    TRC_MSG( BT_RFCOMMM_CLEAR_MUX_FLAG_XMIT2, "Clear MUX_FLAG_XMIT_02, with status=%d , on DLCI=0x%02x")
    TRC_MSG( BT_RFCOMMM_CLEAR_MUX_FLAG_XMIT3, "Clear MUX_FLAG_XMIT_03")
    TRC_MSG( BT_RFCOMMM_SPP_SENDTORFCOMM_DATA, "In sendToRfComm, data ready to send=%d")
    TRC_MSG( BT_RFCOMMM_SPPOS_TX_EMPTY, "In sendToRfComm(): call SPPOS_DevTxEmpty")
    TRC_MSG( BT_RFCOMM_MUX_NON_USER_NON_CREDIT_PKT_HANDLED,"RfMuxStateMachine(): RFCOMM Non-User and Non-Credit Pkt Handled")
    TRC_MSG( BT_RFCOMM_DISC_PENDING_PKT_HANDLED,"RfDlcStateDiscPending(): Pkt Handled with cmdrsp=0x%02X")
    TRC_MSG( BT_RFCOMM_RECV_MSC_REQ_RSP_REPORT_RFEVENT_OPEN, "RFCOMM DLC: Recv MSC Req and Rsp, report RFEVENT_OPEN at inx=%d")
    TRC_MSG( BT_RFCOMM_RECV_MSC_CNF_DLC_FLAG,"RfCtlHandleCnf: Recv MSC Rsp, DLC Flag=0x%04X")
    TRC_MSG( BT_RFCOMM_RECV_MSC_REQ_DLC_FLAG,"RfCtlHandleMSCReq: Recv MSC Req, DLC Flag=0x%04X")
    TRC_MSG( BT_RFCOMM_DISC_PENDING_RECV_EVENT,"RfDlcStateDiscPending: DLCI=0x%02x, MuxId=0x%02x,Recv Event=0x%02x, MUX flags=0x%x")
    TRC_MSG( BT_RFCOMM_DISC_PENDING_NOT_CHANGE_STATE,"Not Change DLC Disc Penging to Disconnected inx=0x%x") 
    TRC_MSG( BT_RFCOMM_CHECK_UNRETURNED_DISC_PKT,"RfDlcStateDiscPending: Check if Disc Pkt on L2CaptxQuest or btPacketList, inx=%d")
    TRC_MSG( BT_RFCOMM_DISC_PENDING_NOT_CHANGE_RESULT,"Find a non returned DISC Req: hciHandle=%08X,aclTxPacketsLeft=%d")
    TRC_MSG( BT_RFCOMM_START_TIMER_SEND_CMD_ON_DLCI_OF_MUX_TIME,"RFCOMM: start timer, send cmd=0x%02x on DLCI=0x%02x of Mux=0x%02x time=%dsec")
    TRC_MSG( BT_RFCOMM_RESTART_TIMER,"RFCOMM: restart")
    TRC_MSG( BT_RFCOMM_DISCARD_DISC_ON_DLCI_OF_MUX,"RFCOMM: discard DISC on DLCI=0x%02x of Mux=0x%02x and clear CHNL_FLAG_DISC_QUEUED")
    TRC_MSG( BT_RFCOMM_DISC_IS_QUEUED_ON_DLCI_OF_MUX,"RFCOMM DISC is queued on dlci=0x%02x of MUX=0x%02x and set CHNL_FLAG_DISC_QUEUED")
    TRC_MSG( BT_RFCOMM_CHNL_FLAG_DISC_QUEUED_IS_CLEARED,"RFCOMM CHNL_FLAG_DISC_QUEUED is cleared")    
    /* Add by stanley: 2007-02-16 */
    TRC_MSG( BT_RFCOMMM_NEW_TXCREDIT, "Recv txCredit, new txCredit=%d, call RfMUXCheckTxQueues" )
    TRC_MSG( BT_RFCOMMM_PKT_RETURNED, "RfAppCallback:Pkt on DLCI=0x%02x returned with status=0x%x,len=%d,call RfMUXCheckTxQueues" )
    TRC_MSG( BT_RFCOMMM_SPP_PKT_RETURNED, "In defaultEventHandler():PKT_RETURNED,sentdata=%d on DLCI=0x%02x" )
    TRC_MSG( BT_RFCOMMM_CHECKTXQUEUE, "In RfMUXCheckTxQueues():packetsInTransit=%d")
    TRC_MSG( BT_RFCOMMM_CHECK_NEXT_TXQUEUE_EMPTY_DLCI, "In RfMUXCheckNextTxQueue() on DLCI=0x%02x ,is Empty")
    TRC_MSG( BT_RFCOMMM_CHECK_NEXT_TXQUEUE_FLOWOFF_DLCI, "In RfMUXCheckNextTxQueue() on DLCI=0x%02x, is FlowOff")
    TRC_MSG( BT_RFCOMMM_PKT_INTRANSMIT_DLCI, "In RfMuxCheckNextTxQueues(), packetsInTransit=%d, on DLCI=0x%02x")
    TRC_MSG( BT_RFCOMMM_RF_SENDDATA_CHECK_TXQUEUE, "In RF_SendData(): DLCI=0x%02x,len=%d,call RfMUXCheckTxQueues")
    TRC_MSG( BT_RFCOMMM_SENDDATA_INTERNAL_DLCI_TXCREDIT, "In RfMUXCheckNextTxQueue(): on DLCI=0x%02x, left txCredit=%d")
    TRC_MSG( BT_RFCOMMM_SPPA_GETBYTES_DATAREAD_LEN, "In Sppa_GetBytes(): DataRead=%d,Length=%d")
    TRC_MSG( BT_RFCOMMM_SPPA_GETBYTES_CASE1, "In Sppa_GetBytes():case1 Set readyToRead to TRUE and ReadMore=%d")
    TRC_MSG( BT_RFCOMMM_SPPA_GETBYTES_CASE2, "In Sppa_GetBytes():case2 Set readyToRead to FALSE")
    TRC_MSG( BT_RFCOMMM_SET_READYTOREAD_FALSE, "In SPPOS_DevRx(): Set readyToRead FALSE")
    TRC_MSG( BT_RFCOMMM_SPPOS_FLUSHRX, "SPPOS_FlushRX")
    TRC_MSG( BT_RFCOMMM_SPPOS_FLUSHTX, "SPPOS_FlushTX")
    TRC_MSG( BT_RFCOMM_OPENCLI_FUNC_ENTRY, "In RF_OpenClientChannel() with entry=%d")
    TRC_MSG( BT_RFCOMM_DISC_L2CAP_REJECT_SABM_DLC_COUNT_ZERO, "Disc L2CAP at MuxID=0x%02x,due to reject SABM and dlcCout is 0")
    TRC_MSG( BT_RFCOMM_CREDIT_PKT_SENT_DONE,"BT_LOG_RFCOMM_CREDIT_PKT_SENT_DONE")

    TRC_MSG(RFCOMM_IN_COMING_CONNECTION_AUTHENTICATED_HAS_ALREADY_COMPLETED,"RFCOMM in coming connection, Authenticated has already completed")
    TRC_MSG(RFCOMM_SEND_ACK_RESPONSE,"RFCOMM Send ACK response:0x%02x")
    TRC_MSG(SERVER_CHANNEL_IS_NOT_ALLOWED,"Server channel is not allowed.")
    TRC_MSG(RFISDLCFLOWONTXCREIDT0_ON_DLCIxD,"RfIsDlcFlowOn(),txCreidt=0 on DLCI=0x%02x")
    TRC_MSG(RF01084421, "RF Deregister Security Record")    
    TRC_MSG(CLIENT_REGISTRATION_SECURITY_RECORDBT_DEBUGx02X,"Client Registration security record:%02x")
    TRC_MSG(CLIENT_DEREGISTRATION_SECURITY_RECORDBT_DEBUGx02X,"Client DeRegistration security record:%02x")
    TRC_MSG(DEREGISTRATION_SECURITY_RECORD_STATUSBT_DEBUGx02X,"DeRegistration security record status:%02x")
    TRC_MSG(RFL2CALLBACKL2EVENT_CLOSED_FOR_SECURITY_SERVICE_LEVEL2_TO_CHECK_PARING_STATE,"RfL2Callback(L2EVENT_DISCONNECTED)")
    /* RFCOMM TESTER*/
    TRC_MSG( BT_RFCOMMTS_INIT, "RFCOMM TESTER INIT" )   
    TRC_MSG( BT_RFCOMMTS_OPENCLIENT, "RFCOMM TESTER Open RFCOMM Channel" ) 
    TRC_MSG( BT_RFCOMMTS_REGSERVER, "RFCOMM TESTER Regsiter RFCOMM server" ) 
    TRC_MSG( BT_RFCOMMTS_ERROR_STRING, "RFCOMM TESTER unknown string" ) 
    TRC_MSG( BT_RFCOMMTS_EVENT, "RFCOMM TESTER callback event :%02x" ) 
    TRC_MSG( BT_RFCOMMTS_PKT_SENT, "RFCOMM TESTER PACKET SENT" ) 
    TRC_MSG( BT_RFCOMMTS_CLOSE, "RFCOMM TESTER CLOSE CHANNEL" ) 
    TRC_MSG( BT_RFCOMMTS_RLS, "RFCOMM TESTER Send RLS" ) 
    TRC_MSG( BT_RFCOMMTS_SENDDATA, "RFCOMM TESTER Send data" ) 
    TRC_MSG( BT_RFCOMMTS_NO_BUFFER, "RFCOMM TESTER no buffer to send data" )    
    TRC_MSG( BT_RFCOMMTS_MSC, "RFCOMM TESTER Send msc:%02x" ) 
    TRC_MSG( BT_RFCOMMTS_SENDPN, "RFCOMM TESTER Send PN" ) 
    TRC_MSG(IN_RFCOMM_INJECT_STR_CHANGEPKTTYPE,"In RFCOMM inject str: changepkttype")

TRC_MSG( BT_RFCOMM_TRACE_END,"BT_RFCOMM_TRACE_END")  /* MBT LOG FILTER. DO NOT MODIFY */
/* RFCOMM TRACE END */

/* SDP TRACE START */
TRC_MSG(BT_SDP_TRACE_START,"BT_SDP_TRACE_START")  /* MBT LOG FILTER. DO NOT MODIFY */

    TRC_MSG(BT_SDAP_REMOVE_LINK_HDLER,"BT_LOG_Try to RemoveEntryList sdapMeHandler")
    TRC_MSG(BT_SDP_QUERY_FAILED_CASE,"BT_LOG_SDP_QUERY_FAILED_CASE=%d")
    TRC_MSG(BT_SDP_REMOVE_RECORD_NOT_IN_LIST,"BT_LOG_Record is not in the SDPS records List")
    TRC_MSG(BT_LOG_SDAP_SSA_RAW_RETRY_COUNT,"SDAP_SSA_Raw():Wait for Link disconnected,count=%d")
    TRC_MSG(BT_LOG_QUERY_SA_RAW_CB_RECORD_COUNT,"query_sa_raw_cb:currentServiceRecordCount=%d")
    TRC_MSG(BT_LOG_QUERY_SA_RAW_CB_CONT_STATE_LEN,"query_sa_raw_cb:ContStateLen from ss rsp =%d")
    TRC_MSG(BT_LOG_QUERY_SA_RAW_CB_ATTRLIST_COUNT_CONTSTATE_LEN_CASE,"query_sa_raw_cb:attributelist count=%d,contStateLen=%d,case=%d")
    TRC_MSG(BT_LOG_QUERY_SA_RAW_CB_CONSTATE_LEN_FROM_SA_RSP_CASE,"query_sa_raw_cb:ContStateLen from sa rsp =%d,case=%d")
    TRC_MSG(BT_LOG_QUERY_SA_RAW_CB_CONTINUE_SDP_FAILED_STATUS,"query_sa_raw_cb:Continue sdp query failed, stauts=%d")
    TRC_MSG(BT_LOG_QUERY_SA_RAW_CB_LINK_CON_CNF_FAILED,"query_ssa_raw_cb:Link connect cnf with error")
    TRC_MSG(BT_LOG_SDP_CLIENT_QUERY_DATALEN_PTR,"SendSdpClientQuery():Dump Data: data len=%d and ptr=%08X")
    TRC_MSG(SDP_CLIENT_PACKET_RETURNED,"SDP Client: Packet returned")
    TRC_MSG(SDP_CLIENT_DEINITIALIZED,"SDP Client:  Deinitialized.")
    TRC_MSG(SDP_CLIENT_SUCCESSFULLY_STARTED_L2CAP,"SDP Client: Successfully started L2CAP")
    TRC_MSG(SDP_CLIENT_QUERY_FAILED_TO_START_NO_CONNECTION,"SDP Client: Query failed to start no connection")
    TRC_MSG(SDP_CLIENT_CONNECTION_DISCONNECTED,"SDP Client: Connection disconnected")
    TRC_MSG(SDP_CLIENT_NO_MORE_TOKENS_SO_DISCONNECTING_L2CAP,"SDP Client: No more tokens so disconnecting L2CAP")
    TRC_MSG(SDP_CLIENT_RECEIVED_RESPONSE,"SDP Client: received response")
    TRC_MSG(SDP_CLIENT_L2CAP_CONNECTION_HAS_COME_UP,"SDP Client: L2CAP connection has come up")
    TRC_MSG(SDP_CLIENT_FAILED_TO_START_L2CAP_STATUS__xD,"SDP Client: Failed to start L2CAP status = %d")
    TRC_MSG(SDP_CLIENT_SENDING_QUERY_PACKET,"SDP Client: Sending query packet")
    TRC_MSG(SDP_SERVER_ATTRIB_SEARCH_RCV_BAD_CONTINUATION_STATE,"SDP Server: Attrib search rcv bad continuation state")
    TRC_MSG(SDP_SERVER_ATTRIB_SEARCH_STORING_HEADER_INTO_SCRATCH,"SDP Server: Attrib Search storing header into scratch")
    TRC_MSG(SDP_SERVER_SENDING_AN_ERROR_ERROR__xX,"SDP Server: Sending an error. error=0x%x")
    TRC_MSG(SDP_SERVER_HANDLESERVSEARCHATTRIB__RCV_BAD_CONTINUATION_STATE,"SDP Server: HandleServSearchAttrib - rcv bad continuation state")
    TRC_MSG(SDP_SERVER_SERSEARATTRREQ__QUERY_PARAMETERS_ARE_NOT_VALID,"SDP Server: SerSearAttrReq - query parameters are not valid")
    TRC_MSG(SDP_SERVER_SENDING_CONT_STATE_0,"SDP Server: Sending cont state 0")
    TRC_MSG(SDP_SERVER_SERVICE_SEARCH_RCV_CONT_STATE_SIZE__xD_VAL__xD,"SDP Server: Service Search rcv cont state size = %d val = %d")
    TRC_MSG(SDP_SERVER_SERVICE_SEARCH_RCV_CONINUATION_STATE__0,"SDP Server: Service Search rcv coninuation state = 0")
    TRC_MSG(SDP_SERVER_B_SCRATCH__xD,"SDP Server: B scratch = %d")
    TRC_MSG(SDP_SERVER_HANDLESERVATTRIB__BAD_PARAMETER_LEN,"SDP Server: HandleServAttrib - bad parameter len")
    TRC_MSG(SDP_SERVER_SENDING_CONT_STATE__xD,"SDP Server: Sending cont state = %d")
    TRC_MSG(SDP_SERVER_DEINITIALIZED,"SDP Server:  Deinitialized.")
    TRC_MSG(SDP_SERVER_HANDLESERVSEARCHATTRIB__BAD_PARAMETER_LEN,"SDP Server: HandleServSearchAttrib - bad parameter len")
    TRC_MSG(SDP_SERVER_QUERY_LEN_IS_SHORT,"SDP Server: query len is short")
    TRC_MSG(SDP_SERVER_STOREATTRIB__STORING_ID_0_INTO_SCRATCH,"SDP Server: StoreAttrib - storing ID 0 into scratch")
    TRC_MSG(SDP_SERVER_INCOMING_L2CAP_CONNECTION_REJECTED,"SDP Server: Incoming L2CAP connection rejected")
    TRC_MSG(SDP_SERVER_L2CAP_SENDDATA_CALL_FAILED_ERROR__xX,"SDP Server: L2CAP_SendData call failed. error=0x%x")
    TRC_MSG(SDP_SERVER_CONNECTION_COMPLETE,"SDP Server: Connection complete")
    TRC_MSG(SDP_SERVER_CONNECTION_DISCONNECTED,"SDP Server: Connection disconnected")
    TRC_MSG(SDP_SERVER_ATTRIB_SEARCH_RCV_CONTINUATION_STATE__0,"SDP Server: Attrib Search rcv continuation state = 0")
    TRC_MSG(SDP_SERVER_INVALID_RECORD_HANDLE,"SDP Server: Invalid record handle")
    TRC_MSG(SDP_SERVER_COPYING_THE_SCRATCH_INTO_A_PACKET_LENxD,"SDP Server: Copying the scratch into a packet len:%d")
    TRC_MSG(SDP_SERVER_INCOMING_L2CAP_CONNECTION_ACCEPTED,"SDP Server: Incoming L2CAP connection accepted")
    TRC_MSG(SDP_SERVER_REMDEVSDPSERVINFOTOTALATTRIBSIZE__xD,"SDP Server: remDev->sdpServInfo->totalAttribSize = %d")
    TRC_MSG(SDP_SERVER_MATCH_FOUND,"SDP Server: Match found")
    TRC_MSG(SDP_SERVER_QUERY_PARAMETERS_ARE_NOT_VALID,"SDP Server: query parameters are not valid")
    TRC_MSG(SDP_SERVER_HANDLESERVSEARCHATTRIB__RCV_CONT_STATE_SIZE__xD_VAL__xD,"SDP Server: HandleServSearchAttrib - rcv cont state size = %d val = %d")
    TRC_MSG(SDP_SERVER_HANDLESERVSEARCH__BAD_PARAMETER_LEN,"SDP Server: HandleServSearch - bad parameter len")
    TRC_MSG(SDP_SERVER_ATTRIBUTE_ID__xD_MARKED,"SDP Server: Attribute ID = %d marked")
    TRC_MSG(SDP_SERVER_ATTRIBUTE_ID__2_MARKED,"SDP Server: Attribute ID = 2 marked")
    TRC_MSG(SDP_SERVER_A_SCRATCH__xD,"SDP Server: A scratch = %d")
    TRC_MSG(SDP_SERVER_SERVICE_SEARCH_RCV_BAD_CONTINUATION_STATE,"SDP Server: service search rcv bad continuation state")
    TRC_MSG(SDP_SERVER_MATCH_NOT_FOUND,"SDP Server: Match not found")
    TRC_MSG(SDP_SERVER_STOREATTRIB__STORING_ID_2_INTO_SCRATCH,"SDP Server: StoreAttrib - storing ID 2 into scratch")
    TRC_MSG(SDP_SERVER_ATTRIB_SEARCH_RCV_CONT_STATE_SIZE__xD_VAL__xD,"SDP Server: Attrib Search rcv cont state size = %d val = %d")
    TRC_MSG(SDP_SERVER_PACKET_RETURNED,"SDP Server: packet returned")
    TRC_MSG(SDP_SERVER_RECEIVED_DATA,"SDP Server: received data")
    TRC_MSG(SDP_SERVER_ATTRIBUTE_ID__0_MARKED,"SDP Server: Attribute ID = 0 marked")
    TRC_MSG(SDP_SERVER_SERVICE_SEARCH_RCV_CONTINUATION_STATE__0,"SDP Server: Service Search rcv continuation state = 0")
    TRC_MSG(SDP_SERVER_QUERY_PARMETERS_LEN_IS_BAD,"SDP Server: query parmeters len is bad")
    TRC_MSG(SDP_SERVER_STOREATTRIB__STORING_ID_1_INTO_SCRATCH,"SDP Server: StoreAttrib - storing ID 1 into scratch")
    TRC_MSG(A_SDP_SERVER_REMDEVSDPSERVINFOTOTALATTRIBSIZE__xD,"A SDP Server: remDev->sdpServInfo->totalAttribSize = %d")
    TRC_MSG(B_SDP_SERVER_SCRATCH__xD,"B SDP Server: scratch = %d")
    TRC_MSG(C_SDP_SERVER_SCRATCH__xD,"C SDP Server: scratch = %d")
    TRC_MSG(RECORD_HANDLERBT_DEBUGx04X,"record handler:%04x")
    TRC_MSG(OFFSETxD_FINALxDSTATExD,"offset:%d, final:%d,state:%d")
    TRC_MSG(SERVICE_REG_RECORD_HANDLERBT_DEBUGx04X,"service reg record handler:%04x")
    TRC_MSG(SERVICE_ATTRIBUTE_IDBT_DEBUGx04X,"Service attribute id:%04X")
    TRC_MSG(SERVICE_SEARCH_FAILED,"Service search Failed")
    TRC_MSG(SERVICE_SEARCH_COMPLETEBT_DEBUGx02X_TOTAL_VALUE_LENBT_DEBUGx02X,"Service search complete:%02X, total value len:%02X")
    TRC_MSG(SERVICE_SEARCH_FAILED_NO_SERVICES,"Service search Failed, no services")
    TRC_MSG(PARSE_NEXT,"PARSE  NEXT")
    TRC_MSG(FOUND_SERVICE_RECORD_OF_BT_DEBUGx04X,"Found service record of %04X")
    TRC_MSG(PSI_INFORMATION_STORED_IN_DB_NOW,"PSI information stored in DB now")
    TRC_MSG(RESULTBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02XBT_DEBUGx02X,"Result:%02X,%02X,%02X,%02X,%02X,%02X")
    TRC_MSG(PARSE_COMPLETE_WITH_ERROR,"PARSE COMPLETE with error")
    TRC_MSG(DO_SDAP_SERVICE,"Do SDAP service")
    TRC_MSG(SERVICE_SEARCH_COMPLETE_STATUS__BT_DEBUGx02X_TOKEN_VALUE_LENBT_DEBUGx02X,"Service search complete status = %02X, token value len:%02X")
    TRC_MSG(PARSE_COMPLETE,"PARSE COMPLETE")
    TRC_MSG(SDPSERVER_REMOVED_RECORD_IS_MARKED_SETTING_CONT_STATE_TO_0_FOR_REMDEV_xD,"SdpServer: Removed record is marked setting cont state to 0 for remdev %d")
    TRC_MSG(SDPFINDUUIDINATTRIB_MAX_RECURSION_LEVEL_EXCEEDED,"SdpFindUUidInAttrib: max recursion level exceeded")
    TRC_MSG(SDP_QUERY_NO_SERVICES,"SDP Query No services")
    TRC_MSG(FTP_SERV_CHANNELx02X,"FTP serv channel:%02x")
    TRC_MSG(REGFTP,"regftp")
    TRC_MSG(SDP_REG_RESULTx02X,"SDP reg result:%02x")
    TRC_MSG(OPP_SERV_CHANNELx02X,"OPP serv channel:%02x")
    TRC_MSG(DEREGISTRATION_RESULTx02X,"DeRegistration result:%02x")
    TRC_MSG(UNKNOWN_MESSAGE,"Unknown message")
    TRC_MSG(DEREGFTP,"deregftp")
    TRC_MSG(DEREGOPP,"deregopp")
    TRC_MSG(SDPDBA_RX_CMD_STRING,"sdpdba  rx cmd string")
    TRC_MSG(REGISTRATION_RESULTx02X,"Registration result:%02x")
    TRC_MSG(REGOPP,"regopp")
    TRC_MSG(SDAP_MULTIPLE_REQUEST_TIMEOUT_C,"sdap multiple request timeout C")
    TRC_MSG(IN_SDAP_SERVICESEARCHSINGLEATTRIBUTE_SET_DISCFLAG_AS_FALSE,"In SDAP_ServiceSearchSingleAttribute(): set discFlag as FALSE")
    TRC_MSG(RESTART_SDAP_MULTIPLE_REQ_TIMER_D,"restart sdap multiple req timer D")
    TRC_MSG(FOR_A2DP_AGAIN_UUIDx4X,"for A2DP again, uuid=%4x")
    TRC_MSG(IN_QUERY_SDAP_SERVICE_SEARCH_ALL_CALLBACK_SET_DISCLEVEL_BT_L2CAP_DISCONNECT_TIMEOUT_50S,"In query_sdap_service_search_all_callback(): set discLevel BT_L2CAP_DISCONNECT_TIMEOUT_50S")
    TRC_MSG(CONTINUE_TO_PARSING_SDP_RSP_RESULT,"Continue to parsing SDP Rsp result")
    TRC_MSG(SDAP_NOT_FINSIHED_REJECT_THE_OPEATION,"SDAP not finsihed, reject the opeation.")
    TRC_MSG(SDPCLIENTQUERYTIMEOUT_TIMEOUTBT_DEBUGx02X,"SdpClientQueryTimeout timeout:%02x")
    TRC_MSG(SDAP_MULTIPLE_REQUEST_TIMEOUT_F,"sdap multiple request timeout F")
    TRC_MSG(FOR_A2DP_AGAIN_RSP_BACKUUIDBT_DEBUGx04X,"for A2DP again, rsp back,uuid=%04x")
    TRC_MSG(IN_QUERY_SDAP_SEARCH_ATTRIBUTE_CALLBACK_RECV_SPP_QUERY_RSP,"In query_sdap_search_attribute_callback(): Recv SPP Query RSP")
    TRC_MSG(SDAP_MULTIPLE_REQUEST_TIMEOUT_A,"sdap multiple request timeout A")
    TRC_MSG(RESTART_SDAP_MULTIPLE_REQ_TIMER_B,"restart sdap multiple req timer B")
    TRC_MSG(CBT_DEBUGx02XDBT_DEBUGx02X,"c:%02x,d:%02x")
    TRC_MSG(RESTART_SDAP_MULTIPLE_REQ_TIMER_E,"restart sdap multiple req timer E")
    TRC_MSG(RESET_SDAP_MULTI_REQ_INDEX_FOR_A2DP_SDP_QUERY_AGAIN,"Reset sdap_multi_req_index for A2DP sdp query again")
    TRC_MSG(CONTINUATION_STATE,"continuation state")
    TRC_MSG(NOT_IN_MULTIPLE_SDAP_REQUEST,"Not in multiple SDAP request")
    TRC_MSG(ABT_DEBUGx02XBBT_DEBUGx02X,"a:%02x,b:%02x")
    TRC_MSG(RESTART_SDAP_MULTIPLE_REQ_TIMER_F,"restart sdap multiple req timer F")
    TRC_MSG(SDAP_REMOVE_LINKCALLBACK_SDAPMEHANDLER,"Sdap remove linkcallback: sdapMeHandler")

TRC_MSG(BT_SDP_TRACE_END,"BT_SDP_TRACE_END")  /* MBT LOG FILTER. DO NOT MODIFY */
/* SDP TRACE END */
/* STACK TRACE END */

/* BPP TRACE START */
	/* BPP EXT. ADP */
    TRC_MSG(BT_BPP_EXT_ENABLE,"[BPP_EXT] btmtk_bpp_enable: original bpp_state(%d)")
    TRC_MSG(BT_BPP_EXT_DISABLE,"[BPP_EXT] btmtk_bpp_disable: original bpp_state(%d)")
    TRC_MSG(BT_BPP_EXT_AUTH_RSP,"[BPP_EXT] btmtk_bpp_auth_response: current bpp_state(%d), get_auth_ind(%d), hprinter(%d)")
    TRC_MSG(BT_BPP_EXT_GET_ATT, "[BPP_EXT] btmtk_bpp_getprinterattribute: current bpp_state(%d)), addr(%02x:%02x:%02x:%02x:%02x:%02x), attMask(%02x), ReqBefore(%d))")
    TRC_MSG(BT_BPP_EXT_PRINT, "[BPP_EXT] btmtk_bpp_print: current bpp_state(%d)), addr(%02x:%02x:%02x:%02x:%02x:%02x), ReqBefore(%d))")
    TRC_MSG(BT_BPP_EXT_SEND_PRINT_REQ, "[BPP_EXT] BPP send print req: PrintModel(%d), MIME type(%d), ObjSize(%d)")
    TRC_MSG(BT_BPP_EXT_DISC, "[BPP_EXT] btmtk_bpp_disconnect: current bpp_state(%d)")
    TRC_MSG(BT_BPP_EXT_CONN_CNF, "[BPP_EXT] bt_bpp_connect_cnf: current bpp_state(%d), Result(%d)")
    TRC_MSG(BT_BPP_EXT_GET_ATT_CNF, "[BPP_EXT] bt_bpp_getprinterattribute_cnf: current bpp_state(%d), Result(%d)")
    TRC_MSG(BT_BPP_EXT_PRINT_CNF, "[BPP_EXT] bt_bpp_print_cnf: current bpp_state(%d), Result(%d)")
    TRC_MSG(BT_BPP_EXT_DISC_CNF, "[BPP_EXT] bt_bpp_disconnect_cnf: current bpp_state(%d), Result(%d)")
    TRC_MSG(BT_BPP_EXT_DISC_IND, "[BPP_EXT] bt_bpp_disconnect_ind: current bpp_state(%d)")
    TRC_MSG(BT_BPP_EXT_AUTH_IND, "[BPP_EXT] btmtk_bpp_handle_auth_ind: hprinter(%d)")
    TRC_MSG(BT_BPP_EXT_PROGRESS_IND, "[BPP_EXT] btmtk_bpp_handle_progress_ind: hprinter(%d), TxProgress(%d),total(%d)")
    TRC_MSG(BT_BPP_EXT_JOB_STATUS_IND, "[BPP_EXT] btmtk_bpp_handle_job_status_ind: hprinter(%d), PrintJobState(%d), PrinterState(%d), PrinterStateReasons(%d)")
    TRC_MSG(BT_BPP_EXT_PRINTER_SUPPORT_MIMETYPE, "[BPP_EXT] printer SUPPORT doctype:(%d)")	
    TRC_MSG(BT_BPP_EXT_PRINTER_NOT_SUPPORT_MIMETYPE, "[BPP_EXT] printer NOT SUPPORT doctype:(%d)")	
    TRC_MSG(BT_BPP_EXT_COMPOSE_IMAGE, "[BPP_EXT]bpp_compose_image_to_xhtml_file...")	
    TRC_MSG(BT_BPP_EXT_COMPOSE_OBJECT, "[BPP_EXT]bpp_compose_object_to_xhtml_file...")	
    TRC_MSG(BT_BPP_EXT_COMPOSING_RETURN, "[BPP_EXT]bpp compose xhtml return (%d)")	
    TRC_MSG(BT_BPP_EXT_DOCTYPE_CHECK_NOT_SAME_PRINTER, "[BPP_EXT]bt_bpp_printer_support_doctype: not the SAME printer!, return FALSE")	
    TRC_MSG(BT_BPP_EXT_CAPABILITY_GOTTEN_RETURN, "[BPP EXT]bt_bpp_printer_capability_gotten return(%d)")
    TRC_MSG(BT_BPP_EXT_HDLE_MSG, "[BPP_EXT]btmtk_bpp_handle_message(%d)...")	
    TRC_MSG(BT_BPP_EXT_CONNECT_CNF, "[BPP EXT]BPP Connect CNF for hprinter:%d result:%d")
    TRC_MSG(BT_BPP_EXT_DISCONNECT_CNF, "[BPP EXT]BPP DISConnect CNF for hprinter:%d result:%d")
    TRC_MSG(BT_BPP_EXT_DISCONNECT_IND, "[BPP EXT]BPP DISConnect IND for hprinter(%d) !")
    TRC_MSG(BT_BPP_EXT_ENABLE_CB, "[BPP EXT]bt_bpp_enable_req_cb,cnf_code=%d,cntx_state=%d,sdc_state=%d")
    TRC_MSG(BT_BPP_EXT_DISABLE_CB, "[BPP EXT]bt_bpp_disable_req_cb,cnf_code=%d,cntx_state=%d,sdc_state=%d")
    TRC_MSG(BT_BPP_EXT_GETATTR_CB, "[BPP EXT]bt_bpp_getprinterattr_req_cb,cnf_code=%d,cntx_state=%d,sdc_state=%d")
    TRC_MSG(BT_BPP_EXT_PRINT_CB, "[BPP EXT]bt_bpp_print_req_cb,cnf_code=%d,cntx_state=%d,sdc_state=%d")
    TRC_MSG(BT_BPP_EXT_DISCONNECT_CB, "[BPP EXT]bt_bpp_disconnect_req_cb,cnf_code=%d,cntx_state=%d,sdc_state=%d")
    TRC_MSG(BT_BPP_EXT_CANCEL_CB, "[BPP EXT]bt_bpp_cancel_req_cb,cnf_code=%d,cntx_state=%d,sdc_state=%d")
    TRC_MSG(BT_BPP_EXT_IS_DEV_CONNECTED, "[BPP EXT]btmtk_bpp_is_dev_connected, cntx_state=%d")
    TRC_MSG(BT_BPP_EXT_IS_CONNECTED, "[BPP EXT]btmtk_bpp_is_connected, cntx_state=%d")


	/* BPP INT. ADP */
   TRC_MSG(BPP_ADP_ENTRY_MSG_HDLR,"[BPP ADP]bpp_adp_msg_hdlr, cur_oper=%d, cur hprinter=0x%x")
   TRC_MSG(BPP_ADP_ENTRY_EVENT_CALLBACK, "[BPP ADP]bpp_adp_event_callback:ParmHPrint=0x%x,ParmEvent=%d,ParmOper=%d,CntxHPrinter=0x%x,CntxOper=%x")
   TRC_MSG(BPP_ADP_CONNECT_CONFIRM, "[BPP ADP]bpp_adp_connect_confirm,cnf_code=(%d)")
   TRC_MSG(BPP_ADP_GET_ATTR_CONFIRM, "[BPP ADP]bpp_adp_get_attr_confirm(),cnf_code=(%d)")
   TRC_MSG(BPP_ADP_STATUS_IND, "[BPP ADP]bpp_adp_status_ind")
   TRC_MSG(BPP_ADP_PRINT_DOC_CONFIRM, "[BPP ADP]bpp_adp_print_doc_confirm,cnf_code=(%d)")
   TRC_MSG(BPP_ADP_DISC_CONFIRM, "[BPP ADP]bpp_adp_disconnect_confirm,cnf_code=%d")
   TRC_MSG(BPP_ADP_DISC_IND, "[BPP ADP]bpp_adp_disconnect_ind")
    TRC_MSG(BPP_ADP_ALLOC_CM_CONNID,"[BPP ADP]BTBMProfileAllocateConnIndex return (%d)")
    TRC_MSG(BPP_ADP_RELEASE_CM_CONNID,"[BPP ADP]BTBMProfileReleaseConnIndex :(%d)")
    TRC_MSG(BPP_ADP_ENTRY_INIT, "[BPP ADP] bpp_adp_init...")
   TRC_MSG(BPP_ADP_SEND_MSG2APP, "[BPP ADP]BPP_ADP_SEND_MSG2APP,msg_id:%d")
   TRC_MSG(BPP_ADP_CANCEL_CONFIRM, "[BPP ADP]bpp_adp_cancel_confirm,cnf_code=%d")
 
	/* BPP profile */
    TRC_MSG(BPP_CONNECT_ENTRY_PRINTER, "[BPP]bpp_connect_printer,printer_handler=0x%x")
    TRC_MSG(BPP_MAX_PRINTER_NUM_REACHED, "[BPP]existed printer num=(%d), max_num=(%d)")
    TRC_MSG(BPP_GOEP_REGISTERCLIENT_RETURN,"[BPP]GOEP_RegisterClient return (%d)")
    TRC_MSG(BPP_GOEP_TPCONNECT_RETURN,"[BPP]GOEP_TpConnect return (%d)")
    TRC_MSG(BPP_GOEP_CONNECT_RETURN,"[BPP]GOEP_Connect return (%d)")
    TRC_MSG(BPP_GET_PRINTER_ATTR, "[BPP]bpp_get_printer_attribute(), attr_bitmask=(0x%x),prt_handle=0x%x, printer=0x%x, printer->state=(%d)")
    TRC_MSG(BPP_GOEP_PULL_RETURN,"[BPP] GOEP_Pull return (%d)")    		
    TRC_MSG(BPP_ENTRY_PRINT_OBJECT,"[BPP]bpp_print_object():model=%d,mime=%d,objsize=%d,prt_handle=0x%x,printer=0x%x,state=%d")
    TRC_MSG(BPP_SIMPLEPUSH_PRINT, "[BPP]bpp_simple_push_print...")
    TRC_MSG(BPP_GOEP_PUSH_RETURN, "[BPP]GOEP_Push() objectLen=(%d), return (%d)")
    TRC_MSG(BPP_ENTRY_CREATE_JOB, "[BPP]bpp_create_job...")
    TRC_MSG(BPP_PROGRESS_RSP_RECEIVED, "[BPP]bpp_progress_rsp_received:prt_handle=0x%x,printer=0x%x,state=%d")
    TRC_MSG(BPP_CANCEL,"[BPP]bpp_cancel:prt_handle=0x%x,printer=0x%x,state=%d")
    TRC_MSG(BPP_DISCONNECT_PRINTER,"[BPP]bpp_disconnect_printer:prt_handle=0x%x,printer=0x%x,state=%d")
    TRC_MSG(BPP_ACCEPT_AUTHCHAL,"[BPP]bpp_accept_authentication:prt_handle=0x%x,printer=0x%x,state=%d")
    TRC_MSG(BPP_REJECT_AUTHCHAL,"[BPP]bpp_reject_authentication:prt_handle=0x%x,printer=0x%x,state=%d")
    TRC_MSG(BPP_JOBCHNL_CALLBACK,"[BPP]bpp_job_channel_callback,event->handler:0x%x,event:(%d),printer:0x%x,state=(%d),stschnl=0x%x,sts_state=(%d)")
    TRC_MSG(BPP_STATUSCHNL_CALLBACK,"[BPP]bpp_status_channel_callback,event->handler:0x%x,event:(%d),printer:0x%x,job_state=(%d),sts_state=(%d)")
    TRC_MSG(BPP_ENTRY_OBEX_CONNECT, "[BPP]bpp_obex_connect: channel=%d, pauth=0x%x")
    TRC_MSG(BPP_DISC_STATUS_CHANNEL,"[BPP]bpp_disc_status_channel, status_channel=0x%x, state=(%d)")
    TRC_MSG(BPP_DISC_JOG_CHANNEL,"[BPP]bpp_disc_job_channel, disc_type=%d, printer->state=(%d)")
    TRC_MSG(BPP_DISC_JOBCHNL_RETURN,"[BPP]bpp_disc_job_channel return (%d)")
    TRC_MSG(BPP_ENTRY_PULL, "[BPP]bpp_pull....")
    TRC_MSG(BPP_DEINIT_PRINTER, "[BPP]bpp_deinit_printer (0x%x) ")
    TRC_MSG(BPP_GETEVENT_RESP, "[BPP]bpp_parse_get_event_rsp_soap() ret:%d, printer_state:%d, job_state:%d, state_reason:%d")
    TRC_MSG(BPP_ENTRY_SEND_DOC, "[BPP]bpp_send_doc...")
    TRC_MSG(BPP_DESTORY_STATUSCHNL, "[BPP]bpp_destory_status_channel...")
    TRC_MSG(BPP_FS_OPEN_HANDLE_INLINE_ITEM, "[BPP]bpp_get_inline_item(), pfile_obj->fh:%d")
    TRC_MSG(BPP_CREATEJOB_SOAPRSP_JOB_ID, "[BPP]create_job_rsp_soap, job_id:%d")
    TRC_MSG(BPP_CREATE_JOB_INFO_OPERATION_STATUS, "[BPP]create_job_rsp_soap, value:%d, ret:%d")
    TRC_MSG(BPP_READ_XHTML_MEET_INVLID_IMAGE_FILE_HANDLER, "[BPP]bpp_read_xhtml() invlid image file handler, pdu_out:%d")
    TRC_MSG(BPP_RESULT_OF_READ_DATA, "[BPP]bpp_compose_multiplexed_data(), pdu_out:%d, psend_obj->total_size_send:%d")
    TRC_MSG(BPP_CREATE_JOB_END, "[BPP]bpp_create_job_end")
    TRC_MSG(BPP_CREATE_JOB_INFO, "[BPP]bpp_create_job info, job_id:%d, ret:%d")
    TRC_MSG(BPP_OBS_WRITE_SOAPRSP, "[BPP]bpp_obs_write_soaprsp,recv_soap_len::%d,current_req:%d")
    TRC_MSG(BPP_WRITE_SOAPRSP_FAILED, "[BPP]bpp_obs_write_soaprsp return failed; try_again=%d,fh=%d; fs_write=%d")
    TRC_MSG(BPP_PARSE_SOAPRSP_RETURN,"[BPP] bpp_parse_rsp_soap: xml_parse return: (%d)")
    TRC_MSG(BPP_LOADDATA_FROMFILE_FAILED,"[BPP]bpp_load_data_from_file read file error(%d),Sfile remain size %d")
    TRC_MSG(BPP_IS_SOAP_COMPLETE_INFO1,"[BPP]bpp_is_soap_complete() content_header_len %d,body_len %d,buf_len %d")            
    TRC_MSG(BPP_IS_SOAP_COMPLETE_INFO2,"[BPP]bpp_is_soap_complete() soap_rsp_len %d,buf_len %d")
    TRC_MSG(BPP_DEINIT_PRINTER_WITH_STSCHNL, "[BPP]bpp_destory_printer error, sts channel exist, state: %d")
    TRC_MSG(BPP_TPDISCONNECT_STSCHNL_RETURN, "[BPP]GOEP_TpDisconnect status channel return(%d)")
    TRC_MSG(BPP_TPDISCONNECT_JOBCHNL_RETURN, "[BPP]GOEP_TpDisconnect job channel return(%d)")
    TRC_MSG(BPP_DISCONNECT_PRINTER_RETURN, "[BPP] bpp_disconnect_printer return(%d)")
    TRC_MSG(BPP_CONNECT_STATUS_CHANNEL, "[BPP]bpp_connect_status_channel...")
    TRC_MSG(BPP_WAIT_FOR_STSCHNL_DISCONNECTED, "[BPP] WAIT for status channel disconnected!")
    TRC_MSG(BPP_STSCHNL_GETEVENT_FINISH, "[BPP]status channel: job status: completed or aborted, call GOEP_ClientAbort(). evt=%d,sts_state=%d")
    TRC_MSG(BPP_CREATEJOBEND_STATE_ERROR,"[BPP]!!!bpp_create_job_end: but status_channel->state =(%d)")					
    TRC_MSG(BPP_START_GET_EVENT, "[BPP]bpp_get_event...")
    TRC_MSG(BPP_EMBED_OBJECT_INTO_XHTML, "[BPP]bpp_embed_object_into_xhtml, raw type=(%d)")
    TRC_MSG(BPP_COMPOSE_XHTML_FAILED, "[BPP]bpp_compose_object_into_xhtml FAILED, ret=%d")
    TRC_MSG(BPP_EXEC_GET_PRINTER_ATTR, "[BPP]bpp_exec_get_printer_attributes: attr_bitmask=0x%x, printer=0x%x, printer state=(%d)")
    TRC_MSG(BPP_ENTRY_EXEC_PRINT_OBJECT, "[BPP]bpp_exec_print_object:model=%d,mime=%d,objsize=%d,printer state=(%d)")
    TRC_MSG(BPP_PRINTER_CAPA_GOTTEN_RETURN,"[BPP]bpp_printer_capability_gotten return:%d")
    TRC_MSG(BPP_PRINTER_SUPPORT_MIMETYPE, "[BPP]printer SUPPORT doc type:(%d)")
    TRC_MSG(BPP_PRINTER_NOT_SUPPORT_MIMETYPE, "[BPP]printer does NOT SUPPORT doc type:(%d)!")
    TRC_MSG(BPP_GET_PRINTER_ATTR_END, "[BPP]bpp_get_printer_attr_end!")
    TRC_MSG(BPP_PRE_PROCESS_OBJECT_DATA, "[BPP]bpp_pre_process_object_data...")
    TRC_MSG(BPP_PRE_PROCESS_OBJECT_DATA_RETURN, "[BPP]bpp_pre_process_object_data return(%d)")
    TRC_MSG(BPP_COMPOSE_VCARD2XHTML, "[BPP]bpp_compose_vcard_to_xhtml...")
    TRC_MSG(BPP_PARSE_VCARD_FILE2STRUCT_RETURN, "[BPP]btmtk_vcard_parse_file_to_struct return (%d)")
    TRC_MSG(BPP_IS_UTF8_TEXT_RETURN, "[BPP]bpp_is_file_utf8_encoding return (%d)")
    TRC_MSG(BPP_GET_FILE_CHARSET_RETURN, "[BPP]btmtk_chset_get_file_encoding return(%d)")
    TRC_MSG(BPP_CONVERT_FILE_TO_UTF8, "[BPP]bpp_convert_filecontent_to_utf8...")
    TRC_MSG(BPP_CONVERT_TO_UTF8_RETURN, "[BPP]btmtk_chset_set_file_encoding return(%d)")
    TRC_MSG(BPP_PRE_PRECESS_OBJECTDATA_FAILED,"[BPP]bpp_pre_process_object_data FAILED(%d)!")		

/* BPP TRACE END */

/* HFG & HSG TRACE START */
    TRC_MSG(BT_HFG_API_INIT, "[HFG][API] hfg_init") 
    TRC_MSG(BT_HFG_API_REGISTER, "[HFG][API] hfg_register(0x%X, 0x%X, %d)") 
    TRC_MSG(BT_HFG_API_DEREGISTER, "[HFG][API] hfg_deregister(0x%X)")
    TRC_MSG(BT_HFG_API_CREATE_SERVICE_LINK, "[HFG][API] hfg_create_service_link(0x%X, 0x%02X%02X%02X%02X%02X%02X)")
    TRC_MSG(BT_HFG_API_DISCONNECT_SERVICE_LINK, "[HFG][API] hfg_disconnect_service_link(0x%X) : state=0x%X")
    TRC_MSG(BT_HFG_API_CREATE_AUDIO_LINK, "[HFG][API] hfg_create_audio_link(0x%X) : state=0x%X, IsAudioUp=%d")
    TRC_MSG(BT_HFG_API_DISCONNECT_AUDIO_LINK, "[HFG][API] hfg_disconnect_audio_link(0x%X) : state=0x%X, IsAudioUp=%d")
    TRC_MSG(BT_HFG_API_ACCEPT_CONNECT, "[HFG][API] hfg_accept_connect(0x%X)")
    TRC_MSG(BT_HFG_API_REJECT_CONNECT, "[HFG][API] hfg_reject_connect(0x%X)")
    TRC_MSG(BT_HFG_API_SET_INDICATOR, "[HFG][API] hfg_set_indicator_value(0x%X, %d, %d, 0x%X) : bHeadset=%d")
    TRC_MSG(BT_HFG_API_SEND_RESULT, "[HFG][API] hfg_send_hf_results(0x%X, %d, %d, %d, 0x%X, %d)")
    TRC_MSG(BT_HFG_API_ENABLE_SNIFF_MODE, "[HFG][API] hfg_enable_sniff_mode(0x%X, %d)")
    TRC_MSG(BT_HFG_CBK_SDP_QUERY, "[HFG][CBK] hfgQueryCallback(0x%X, %d, %d, 0x%X)")
    TRC_MSG(BT_HFG_CBK_CMGR_CALLBACK, "[HFG][CBK] HfgServiceConnectionCallback : Channel=0x%X, event=%d, status=%d")
    TRC_MSG(BT_HFG_CBK_RF_CALLBACK, "[HFG][CBK] HfgRfCallback : Channel=0x%X, event=%d, status=%d")
    TRC_MSG(BT_HFG_INFO_SDP_QUERY_COMPLETE, "[HFG][INFO] SDP query complete. Channel no=%d")
    TRC_MSG(BT_HFG_REGISTER_HFG_SUCCESS, "[HFG][INFO] hfg_register success : Channel=0x%X")
    TRC_MSG(BT_HFG_INFO_REGISTER_SDP, "[HFG][INFO] HfgRegisterSdpServices(%d)")
    TRC_MSG(BT_HFG_INFO_DEREGISTER_SDP, "[HFG][INFO] HfgDeregisterSdpServices(%d)")
    TRC_MSG(BT_HFG_INFO_REGISTER_SERVER_CHANNEL, "[HFG][INFO] HfgRegisterServerChannel(0x%X)")
    TRC_MSG(BT_HFG_INFO_DEREGISTER_SERVER_CHANNEL, "[HFG][INFO] HfgDeregisterServerChannel(0x%X)")
    TRC_MSG(BT_HFG_INFO_OPEN_ACL_CHANNEL, "[HFG][INFO] HfgOpenChannel(0x%X, 0x%02X%02X%02X%02X%02X%02X)")
    TRC_MSG(BT_HFG_INFO_OPEN_ACL_CHANNEL_SUCCESS, "[HFG][INFO] CMGR_CreateDataLink return SUCCESS (ACL is already created in stack)")
    TRC_MSG(BT_HFG_INFO_CLOSE_ACL_CHANNEL, "[HFG][INFO] HfgCloseChannel(0x%X)")
    TRC_MSG(BT_HFG_INFO_START_SERVICE_QUERY, "[HFG][INFO] HfgStartServiceQuery(0x%X, %d) : bHeadset=%d")
    TRC_MSG(BT_HFG_INFO_AUDIO_EXIST, "[HFG][INFO] Audio connection already exists")
    TRC_MSG(BT_HFG_INFO_NO_AUDIO_CONNECTION, "[HFG][INFO] No audio connection exist")
    TRC_MSG(BT_HFG_INFO_AUDIO_CONENCTING, "[HFG][INFO] Connecting audio is on going")
    TRC_MSG(BT_HFG_INFO_AUDIO_DISCONENCTING, "[HFG][INFO] Disconnecting audio is on going")
    TRC_MSG(BT_HFG_INFO_CALLBACK_TO_ADP, "[HFG][INFO] HfgAppCallback(0x%X, %d, %d, %d)")
    TRC_MSG(BT_HFG_INFO_CHANGE_STATE, "[HFG][INFO] Change state from 0x%X to 0x%X")
    TRC_MSG(BT_HFG_INFO_SEND_RESULT, "[HFG][INFO] sendResults(0x%X, 0x%X) : CMD=0x%X")
    TRC_MSG(BT_HFG_INFO_AT_SEND_RESULT, "[HFG][INFO] AtSendResults(0x%X, 0x%X, %d) : CMD=0x%X")
    TRC_MSG(BT_HFG_INFO_AT_SEND_COMPLETE, "[HFG][INFO] AtSendComplete(0x%X, 0x%X)")
    TRC_MSG(BT_HFG_INFO_AT_SEND_REMAIN_DATA, "[HFG][INFO] Send remain data : remain=%d")
    TRC_MSG(BT_HFG_INFO_RESPONSE_QUEUE_EMPTY, "[HFG][INFO] Response queue is empty")
    TRC_MSG(BT_HFG_INFO_RESPONSE_QUEUE_NOT_EMPTY, "[HFG][INFO] Response queue is not empty")
    TRC_MSG(BT_HFG_INFO_SEND_RF_PACKET, "[HFG][INFO] AtSendRfPacket(0x%X, 0x%X)")
    TRC_MSG(BT_HFG_INFO_PARSE_COMMAND, "[HFG][INFO] AtParseCommand(0x%X, 0x%X, %d, 0x%X)")
    TRC_MSG(BT_HFG_INFO_AT_DECODE_CONTINUE, "[HFG][INFO] AT ecode state is set to continue")
    TRC_MSG(BT_HFG_INFO_RF_PACKET, "[HFG][INFO] Rf Packet : len=%d, data=%s")
    TRC_MSG(BT_HFG_INFO_FLUSH_RESPONSE, "[HFG][INFO] HfgHfgFlushRespQueue(0x%X)")
    TRC_MSG(BT_HFG_INFO_DISCONNECTING, "[HFG][INFO] HfgDisconnecting(0x%X) : state=0x%X")
    TRC_MSG(BT_HFG_INFO_DISCONNECTING_SDP, "[HFG][INFO] SDP query ongoing")
    TRC_MSG(BT_HFG_INFO_DISCONNECTING_SCO_CONNECT, "[HFG][INFO] SCO connecting ongoing")
    TRC_MSG(BT_HFG_INFO_DISCONNECTING_SCO_DISCONNECT, "[HFG][INFO] SCO disconnecting ongoing")
    TRC_MSG(BT_HFG_INFO_DISCONNECTING_RFCOMM_CONFIRM, "[HFG][INFO] Substate is I2/O3. Waiting RFCOMM confirm")
    TRC_MSG(BT_HFG_INFO_DISCONNECTING_CMGR_CONFIRM, "[HFG][INFO] Substate is O1. Waiting CMGR data link confirm")
    TRC_MSG(BT_HFG_INFO_DISCONNECTING_REMOVE_AUDIO, "[HFG][INFO] Remove audio link : %d")
    TRC_MSG(BT_HFG_INFO_DISCONNECTING_DEREGISTER_SCO, "[HFG][INFO] Deregister SCO handler")
    TRC_MSG(BT_HFG_INFO_DISCONNECTING_CLOSE_RF, "[HFG][INFO] Close RFCOMM channel : %d")
    TRC_MSG(BT_HFG_INFO_ALLOC_RF_CHANNEL, "[HFG][INFO] HfgAllocRfChannel()")
    TRC_MSG(BT_HFG_INFO_FREE_RF_CHANNEL, "[HFG][INFO] HfgFreeRfChannel(0x%X)")
    TRC_MSG(BT_HFG_INFO_CHANNEL_STATE, "[HFG][INFO] state=0x%X, linkFlags=0x%X, flags=0x%X, queryFlags=0x%X")
    TRC_MSG(BT_HFG_INFO_CONNECT_TIMER_CANCELED, "[HFG][Info] HFG connection timer canceled")
    TRC_MSG(BT_HFG_WARN_WRONG_CLASS_ID, "[HFG][WARN] Wrong class id : correct=0x%X, wrong=0x%X")
    TRC_MSG(BT_HFG_WARN, "[HFG][WARN] file=%d, line=%d") 
    TRC_MSG(BT_HFG_WARN_1, "[HFG][WARN] file=%d, line=%d, p1=%d") 
    TRC_MSG(BT_HFG_WARN_CHANNEL_NOT_REGISTERED, "[HFG][WARN] Channel not registered : Channel=0x%X")
    TRC_MSG(BT_HFG_WARN_CHANNEL_ALREADY_REGISTERED, "[HFG][WARN] Channel already registered : Channel=0x%X")
    TRC_MSG(BT_HFG_WARN_NO_CONNECTION, "[HFG][WARN] No connection : Channel=0x%X")
    TRC_MSG(BT_HFG_WARN_REJECT_CHANNEL_FAIL, "[HFG][WARN] RF_RejectChannel failed : status=%d")
    TRC_MSG(BT_HFG_WARN_ACCEPT_CHANNEL_FAIL, "[HFG][WARN] RF_AcceptChannel failed : status=%d")
    TRC_MSG(BT_HFG_WARN_OPEN_CHANNEL_FAIL, "[HFG][WARN] RF_OpenClientChannel failed : status=%d")
    TRC_MSG(BT_HFG_WARN_INVALID_INDICATOR_VAL, "[HFG][WARN] Invalid indicator value : ind=%d, min=%d, max=%d, value=%d")
    TRC_MSG(BT_HFG_WARN_INDICATOR_REPORT_DISABLED, "[HFG][WARN] Indicator report is disabled")
    TRC_MSG(BT_HFG_WARN_INVALID_INDICATOR, "[HFG][WARN] Invalid indicator : %d")
    TRC_MSG(BT_HFG_WARN_RESPONSE_ALREADY_QUEUED, "[HFG][WARN] Response already queued : response=0x%X")   
    TRC_MSG(BT_HFG_WARN_SEND_RF_PACKET_FAILED, "[HFG][WARN] RF_SendData failed : status=%d")   
    TRC_MSG(BT_HFG_WARN_ME_ENCODE_FAIL, "[HFG][WARN] ME_Encode failed : status=%d")
    TRC_MSG(BT_HFG_WARN_ME_DECODE_FAIL, "[HFG][WARN] ME_Decode failed : status=%d")
    TRC_MSG(BT_HFG_WARN_UNRECOGNIZED_SDP_ATTR, "[HFG][WARN] Unrecognized SDP attribute : %d")
    TRC_MSG(BT_HFG_ERROR_UNEXPECTED_STATE, "[HFG][ERR] Unexpected state : file=%d, line=%d, Channel=0x%X, state=0x%X")
    TRC_MSG(BT_HFG_ERROR, "[HFG][ERR] file=%d, line=%d") 
    TRC_MSG(BT_HFG_ERROR_1, "[HFG][ERR] file=%d, line=%d, p1=%d") 
    TRC_MSG(BT_HFG_ERROR_NO_FREE_RESPONSE, "[HFG][ERR] HfgAllocResponse : Run out of free response slot")
    TRC_MSG(BT_HFG_ERROR_INSERT_FREE_RESPONSE, "[HFG][ERR] HfgAllocResponse : Insert response already in the free response queue")
    TRC_MSG(BT_HFG_CIEV_REQ, "=====[BTAP][BT_HFG_CIEV_REQ]===== indication: %d, value: %d, cid: %d") 
    TRC_MSG(BT_HFG_RING_REQ, "=====[BTAP][BT_HFG_RING_REQ]===== aNoLen: %d")
    TRC_MSG(BT_HFG_REJECT_IND, "=====[BTAP][BT_HFG_REJECT_IND]=====")
    TRC_MSG(BT_HFG_ANSWER_IND, "=====[BTAP][BT_HFG_ANSWER_IND]=====")
    TRC_MSG(BT_HFG_AT_CMD_IND, "=====[BTAP][BT_HFG_AT_CMD_IND]=====")
    TRC_MSG(BT_HFG_CHLD_IND, "=====[BTAP][BT_HFG_CHLD_IND]=====")
    /* HFG ADP */
    TRC_MSG(BT_HFG_ADP_STATUS, "[HFP_ADP] hfg status: hfg_state=%d, hsg_state=%d, hfg_active=%d, hsg_active=%d, sco_exist=%d")
    TRC_MSG(BT_HFG_ADP_STATE_CHANGE_IND, "[HFP_ADP] hfg state change: %d --> %d")   
    TRC_MSG(BT_HFG_ADP_ACTIVATE_TIMEOUT_HDLER, "[HFP_ADP] hfg activate_timeout_hdler")   
    TRC_MSG(BT_HFG_ADP_DEACTIVATE_TIMEOUT_HDLER, "[HFP_ADP] hfg deactivate_timeout_hdler")      
    TRC_MSG(BT_HFG_ADP_CONNECT_TIMEOUT_HDLER, "[HFP_ADP] hfg connect_timeout_hdler")   
    TRC_MSG(BT_HFG_ADP_DISCONNECT_TIMEOUT_HDLER, "[HFP_ADP] hfg disconnect_timeout_hdler")   
    TRC_MSG(BT_HFG_ADP_SCO_CONNECT_TIMEOUT_HDLER, "[HFP_ADP] sco_connect_timeout_hdler")   
    TRC_MSG(BT_HFG_ADP_SCO_DISCONNECT_TIMEOUT_HDLER, "[HFP_ADP] sco_disconnect_timeout_hdler")      
    TRC_MSG(BT_HFG_ADP_START_TIMER, "[HFP_ADP] start timer, timer_id=%d, timer_duration=%d")      
    TRC_MSG(BT_HFG_ADP_STOP_TIMER, "[HFP_ADP] stop timer, timer_id=%d")      
    TRC_MSG(BT_HFG_ADP_HFP_VERSION, "[HFP_ADP] hfg version: hfp version=0x%04x")   
    TRC_MSG(BT_HFG_ADP_HFP_CONNECT_CNF_ACCEPT, "[HFP_ADP] hfga_connect_accept_confirmation_accept: hfp channel=0x%x, rfc channel=0x%x")   
    TRC_MSG(BT_HFG_ADP_HFP_CONNECT_CNF_REJECT, "[HFP_ADP] hfga_connect_accept_confirmation_reject: rfc channel=0x%x")   
    TRC_MSG(BT_HFG_ADP_HFP_REJECT_RFC_ALC_FAILED, "[HFP_ADP] Reject RFCOMM open indication: rfc channel=0x%x, create data link failed")   
    TRC_MSG(BT_HFG_ADP_HFP_REJECT_RFC_GET_HFG_CH_FAILED, "[HFP_ADP] Reject RFCOMM open indication: rfc channel=0x%x, get closed hfp channel failed")   
    TRC_MSG(BT_HFG_ADP_HFP_REJECT_RFC_SCO_REG_FAILED, "[HFP_ADP] Reject RFCOMM open indication: rfc channel=0x%x, register sco handler failed")   
    TRC_MSG(BT_HFG_ADP_HFP_CHANNEL_STATE, "[HFP_ADP] HFP channel state: hfp channel=0x%x, state=%d")   
    TRC_MSG(BT_HFG_ADP_HFP_STORE_REMOTE_DEV, "[HFP_ADP] Store remote device: remote device, nap=0x%04x, uap=0x%02x, lap=0x%06x,")   
    TRC_MSG(BT_HFG_ADP_HFP_RESET_REMOTE_DEV, "[HFP_ADP] Reset remote device")   
    TRC_MSG(BT_HFG_ADP_HFP_REACH_MAX_QUEUED_BUFFER_SIZE, "[HFP_ADP] Reach max queued buffer size, disconnect HFP")   
    TRC_MSG(BT_HFG_ADP_HFP_FREE_QUEUED_BUFFER, "[HFP_ADP] free queued buffer, buffer=%x")   
    TRC_MSG(BT_HFG_ADP_HFP_FREE_ALL_QUEUED_BUFFER, "[HFP_ADP] free all queue buffer, queued buffer size=%d")   
    TRC_MSG(BT_HFG_ADP_HFP_RESET_QUEUED_BUFFER, "[HFP_ADP] reset queue buffer, reset buffer=%x, queued buffer size=%d")   
    TRC_MSG(BT_HFG_ADP_HFP_STORE_RFCOMM_CHANNEL, "[HFP_ADP] hfga_store_rf_channel, rfChannel=%x")   
    TRC_MSG(BT_HFG_ADP_HFP_CLOSE_CHANNEL, "[HFP_ADP] HfgCloseChannel Channel=%x, Channel->state=%x")   
    TRC_MSG(BT_HFG_ADP_HFP_FIND_CHANNEL, "[HFP_ADP] HfgFindChannel hfgChannel=%x")   
    TRC_MSG(BT_HFG_ADP_HFP_GET_CLOSED_CHANNEL, "[HFP_ADP] HfgGetClosedChannel hfgChannel=%x")   
    TRC_MSG(BT_HFG_ADP_HFP_ALLOC_RF_CHANNEL, "[HFP_ADP] HfgAllocRfChannel rfChannel=%x")   
    TRC_MSG(BT_HFG_ADP_HFP_FREE_RF_CHANNEL, "[HFP_ADP] HfgFreeRfChannel rfChannel=%x")   
    TRC_MSG(BT_HFG_ADP_HFP_RF_ACCEPT_CHANNEL, "[HFP_ADP] RF_AcceptChannel status=%x")   
    TRC_MSG(BT_HFG_ADP_HFP_REGISTER_RF_SER_CHANNEL, "[HFP_ADP] RF_RegisterServerChannel, rfChannel=%x")   
    TRC_MSG(BT_HFG_ADP_HFP_DEREGISTER_RF_SER_CHANNEL, "[HFP_ADP] RF_DeregisterServerChannel, rfChannel=%x")   
    TRC_MSG(BT_HFG_ADP_HFP_RF_CALLBACK, "[HFP_ADP] HfgRfCallback, event=%d, rfChannel=%x")   
    TRC_MSG(BT_HFG_ADP_HFP_SEQ1, "[HFP_ADP] Seq1 =0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x")   
    TRC_MSG(BT_HFG_ADP_HFP_SEQ2, "[HFP_ADP] Seq2 =0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x, 0x%02x")   
    TRC_MSG(BT_HFG_ADP_HFP_VERNO, "[HFP_ADP] verno, verno=%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c")   
    TRC_MSG(BT_HFG_ADP_HFP_RAND_NUM, "[HFP_ADP] rand number, rand=0x%08x")   
    TRC_MSG(BT_HFG_ADP_HFP_CONNECT_SCO, "[HFP_ADP] HFG_CreateAudioLink, status=%d")   
    TRC_MSG(BT_HFG_ADP_HFP_DISCONNECT_SCO, "[HFP_ADP] HFG_DisconnectAudioLink, status=%d")   
    TRC_MSG(BT_HFG_ADP_HFP_SPK_REQ, "[HFP_ADP] : hfga speaker volume req, result=%d, cnf result=%d, gain=%d")
    TRC_MSG(BT_HFG_ADP_HFP_SPK_SENT, "hfga_tx: +VGS:%d")
    TRC_MSG(BT_HFG_ADP_HFP_SPK_RCV, "hfga_rx: AT+VGS=%d")
    TRC_MSG(BT_HFG_ADP_HFP_OK_SENT, "hfga_tx: OK")
    TRC_MSG(BT_HFG_ADP_HFP_MIC_REQ, "[HFP_ADP] : hfga mic volume req, result=%d, cnf result=%d, gain=%d")
    TRC_MSG(BT_HFG_ADP_HFP_MIC_SENT, "hfga_tx: +VGM:%d")
    TRC_MSG(BT_HFG_ADP_HFP_MIC_RCV, "hfga_rx: AT+VGM=%d")
    TRC_MSG(BT_HFG_ADP_SPK_GAIN_REQ, "[HFP_ADP]HFG speaker_gain_req_hdler: msg_p->gain=%d, hfga_cntx_p->spk_gain=%d ")
    TRC_MSG(BT_HFG_ADP_HFP_RX, "[HFP_ADP]hfga_rx: %s")
    TRC_MSG(BT_HFG_ADP_HFP_TX, "[HFP_ADP]hfga_tx: %s")
    TRC_MSG(BT_HFG_SDPCALLBACK_ALLOC_CHANNEL, "hfgQueryCallback Channel->hfgChannel=%x")
    TRC_MSG(BT_HFG_CMGR_CALLBACK, "[HFG] HfgServiceConnectionCallback, event = %d, status=%d")
    TRC_MSG(BT_HFG_SDPQUERY_CALLBACK, "[HFG] SDP query callback, result=%d")
    TRC_MSG(BT_HFG_START_SDPQUERY, "[HFG] Start SDP query...")
    TRC_MSG(BT_HFG_CREATE_ACL_LINK, "[HFG] HfgCreateAclLink...")
    TRC_MSG(BT_HFG_CREATE_SERVICE_LINK, "[HFG] HFG_CreateServiceLink...")
    TRC_MSG(BT_HFG_CREATE_AUDIO_LINK, "[HFG] HFG_CreateAudioLink...")
    TRC_MSG(BT_HFG_DISCONNECT_AUDIO_LINK, "[HFG] HFG_DisconnectAudioLink...")
    TRC_MSG(BT_HFG_DISCONNECT_SERVICE_LINK, "[HFG] HFG_DisconnectServiceLink...state=%d,linkFlags=%d")
    TRC_MSG(BT_HFG_SUPPORT_ESCO_RETURN, "[HFG]hfga_is_profile_support_esco return (%d)")
    TRC_MSG(BT_HFG_CALL_CMGR_CREATEAUDIOLINK,"[HFG] call CMGR_CreateAudioLink...")
    TRC_MSG(BT_HFG_WAITFOR_SCO_CON_TO_CLOSE_DATALINK, "[HFG]SCO is CONNECTING, set flag,wait for AUDIO_LINK_CON to close data link")
    TRC_MSG(BT_HFG_SCO_CON_COME_SO_CLOSE_DATALINK, "[HFG]AUDIO_LINK_CON(which is being waiting) comes, so close data link.")
    TRC_MSG(BT_HFG_CLOSE_DATALINK, "[HFG]HfgCloseDataLink...")
    TRC_MSG(BT_HFG_DEFERED_DEREGISTERATION, "[HFG][ADP] Defered deregistration channel=0x%x")
    TRC_MSG(BT_HFG_DEFER_DEREGISTERATION, "[HFG] State is not closed, defer deregisteration : channel=0x%x, state=%x")
    TRC_MSG(BT_HFG_SDPQUERY_PRECALLBACK, "[HFG] SDP query precallback : attrib_index=%d, result=%d")
    TRC_MSG(BT_HFG_SDPQUERY_HF_RECORD_FOUND, "[HFG] SDP query : HF record found, idx=%d result=%d")
    TRC_MSG(BT_HFG_SDPQUERY_HF_ATTRIB_FOUND, "[HFG] SDP query : attrib found status=%d, result=%d")
    
    /* HSG ADP */
    TRC_MSG(BT_HSG_ADP_STATE_CHANGE_IND, "[HSP_ADP] hsg state change: %d --> %d")
    TRC_MSG(BT_HSG_ADP_ACTIVATE_TIMEOUT_HDLER, "[HSP_ADP] hsg activate_timeout_hdler")   
    TRC_MSG(BT_HSG_ADP_DEACTIVATE_TIMEOUT_HDLER, "[HSP_ADP] hsg deactivate_timeout_hdler")      
    TRC_MSG(BT_HSG_ADP_CONNECT_TIMEOUT_HDLER, "[HSP_ADP] hsg connect_timeout_hdler")   
    TRC_MSG(BT_HSG_ADP_DISCONNECT_TIMEOUT_HDLER, "[HSP_ADP] hsg disconnect_timeout_hdler")   
    TRC_MSG(BT_HSG_ADP_START_TIMER, "[HSP_ADP] start timer, timer_id=%d, timer_duration=%d")      
    TRC_MSG(BT_HSG_ADP_STOP_TIMER, "[HSP_ADP] stop timer, timer_id=%d")      
    TRC_MSG(BT_HSG_ADP_HSP_STORE_REMOTE_DEV, "[HSP_ADP] Store remote device: remote device, nap=0x%04x, uap=0x%02x, lap=0x%06x,")   
    TRC_MSG(BT_HSG_ADP_HSP_RESET_REMOTE_DEV, "[HSP_ADP] Reset remote device")   
    TRC_MSG(BT_HSG_ADP_HSP_SPK_REQ, "[HSP_ADP] : hsga speaker volume req, result=%d, cnf result=%d, gain=%d")
    TRC_MSG(BT_HSG_ADP_HSP_SPK_SENT, "hsga_tx: +VGS:%d")
    TRC_MSG(BT_HSG_ADP_HSP_SPK_RCV, "hsga_rx: AT+VGS=%d")
    TRC_MSG(BT_HSG_ADP_HSP_OK_SENT, "hsga_tx: OK")
    TRC_MSG(BT_HSG_ADP_HSP_MIC_REQ, "[HSP_ADP] : hsga mic volume req, result=%d, cnf result=%d, gain=%d")
    TRC_MSG(BT_HSG_ADP_HSP_MIC_SENT, "hsga_tx: +VGM:%d")
    TRC_MSG(BT_HSG_ADP_HSP_MIC_RCV, "hsga_rx: AT+VGM=%d")
    TRC_MSG(BT_HSG_ADP_HSP_TX, "[HSG]hsga_tx: %s")
    TRC_MSG(BT_HSG_SET_CONNECTLEVEL, "[HSG]AG: ConnectLevel %d to %d")
    TRC_MSG(BT_HSG_RECEIVE_INVALID_DATA, "[HSG]AG: invalid data (%s) received (len: %d)")
    TRC_MSG(BT_HSG_CMGR_CALLBACK, "[HSG]AG: AgServiceConnectionCallback, event=%d, status=%d")
    TRC_MSG(BT_HSG_SDPQUERY_CALLBACK, "[HSG] SDP query callback, result=%d")
    TRC_MSG(BT_HSG_START_SDPQUERY, "[HSG] Start SDP query...")
    TRC_MSG(BT_HSG_RFCOMM_CALLBACK, "[HSG] RFCOMM callback, event=%d, Channel=%x")
    TRC_MSG(BT_HSG_SEND_DATA, "[HSG]Send Data: len=%d, data=%s")
    TRC_MSG(BT_HSG_DO_CONNECT, "[HSG] AG_DoConnect...state=%d, ConnectLevel=%d")
    TRC_MSG(BT_HSG_DO_DISCONNECT, "[HSG] AG_DoDisconnect...state=%d, ConnectLevel=%d")

    TRC_MSG(HFG_RFCOMM_INCOMING_HANDSFREE_CONNECTION,"HFG: RFCOMM incoming hands-free connection")
    TRC_MSG(HF_RFCOMM_HANDSFREE_CONNECTION_CLOSED,"HF: RFCOMM hands-free connection closed")
    TRC_MSG(HF_UNABLE_TO_SEND_RFCOMM_PACKET,"HF: Unable to send RFCOMM packet")
    TRC_MSG(HFG_UNABLE_TO_SEND_RFCOMM_PACKET,"HFG: Unable to send RFCOMM packet")
    TRC_MSG(HFG_RFCOMM_HANDSFREE_CONNECTION_ESTABLISHED,"HFG: RFCOMM hands-free connection established")
    TRC_MSG(HFG_RFCOMM_HANDSFREE_CONNECTION_CLOSED,"HFG: RFCOMM hands-free connection closed")
    TRC_MSG(HFG_SDP_QUERY_FAILED,"HFG: SDP Query failed")
    TRC_MSG(HF_RFCOMM_HANDSFREE_CONNECTION_ESTABLISHED,"HF: RFCOMM hands-free connection established")
    TRC_MSG(HF_RFCOMM_INCOMING_HANDSFREE_CONNECTION,"HF: RFCOMM incoming hands-free connection")
    TRC_MSG(HF_RFCOMM_HANDSFREE_DATA_RECEIVED,"HF: RFCOMM hands-free data received")
    TRC_MSG(HFG_RFCOMM_HANDSFREE_DATA_RECEIVED,"HFG: RFCOMM hands-free data received")
    TRC_MSG(HFG_COULD_NOT_OPEN_RFCOMM_CHANNEL,"HFG: Could not open RFCOMM channel")
    TRC_MSG(AG_BTEVENT_SCO_DISCONNECT_RECEIVED,"AG: BTEVENT_SCO_DISCONNECT received")
    TRC_MSG(AGCREATEACLLINK_CMGR_CREATEDATALINK,"AgCreateAclLink CMGR_CreateDataLink")
    TRC_MSG(AG_RFC_UNKNOWN_EVENT_xI,"AG: RFC Unknown event: %i")
    TRC_MSG(HS_COULD_NOT_BRING_DEVICE_OUT_OF_PARK_MODE,"HS: Could not bring device out of Park Mode.")
    TRC_MSG(HS_SECURITY_MODE_3_COMPLETE,"HS: Security Mode 3 Complete.")
    TRC_MSG(AG_CONNECTLEVEL_AG_RFCOMMOPEN_DISCONNECTING,"AG: ConnectLevel: AG_RFCOMMOPEN (disconnecting)")
    TRC_MSG(AG_RF_OPENCLIENTCHANNEL_FAILED,"AG: RF_OpenClientChannel failed!!")
    TRC_MSG(HS_PAIRING_FAILED,"HS: Pairing failed")
    TRC_MSG(AG_RADIO_IS_DOWN,"AG: Radio is down")
    TRC_MSG(HS_ERROR_MESSAGE_RECEIVED,"HS: ERROR message received")
    TRC_MSG(AG_AUDIO_SCO_DISONNECT_REQUEST_FAILED_xD,"AG: Audio: SCO disonnect request failed. %d")
    TRC_MSG(AG_RFEVENT_CLOSED_RECEIVED,"AG: RFEVENT_CLOSED received")
    TRC_MSG(AG_CLOSING_RFCOMM,"AG: Closing RFCOMM")
    TRC_MSG(HS_RFCOMM_CHANNEL_FAILED_TO_OPEN_ABORTING_CONNECTION,"HS: RFCOMM Channel failed to open, aborting connection")
    TRC_MSG(AG_CLOSING_ACL,"AG: Closing ACL")
    TRC_MSG(AG_SCO_CONNECT_HAD_AN_ERROR,"AG: SCO connect had an error!!")
    TRC_MSG(AG_SCO_CONNECT_PENDING,"AG: SCO connect pending.")
    TRC_MSG(AG_LINK_DISCONNECT_FAILED_ERROR__xI,"AG: Link Disconnect failed. Error = %i")
    TRC_MSG(HS_LINK_DISCONNECT_FAILED_ERROR__xI,"HS: Link Disconnect failed. Error = %i")
    TRC_MSG(AG_CLOSING_SCO,"AG: closing sco")
    TRC_MSG(HS_ACL_LINK_DISCONNECTED,"HS: ACL link Disconnected.")
    TRC_MSG(HS_SCO_DISCONNECTED,"HS: SCO Disconnected.")
    TRC_MSG(ATCKPD200_RECEIVED,"AT+CKPD=200 received")
    TRC_MSG(HS_HCI_INITIALIZATION_FAILED,"HS: HCI Initialization FAILED")
    TRC_MSG(HSP_TO_HEADSET_SUCCESS,"HSP to headset success")
    TRC_MSG(HS_PIN_REQUEST_RECEIVED,"HS: PIN Request Received.")
    TRC_MSG(ERROR_DELETING_RECORD,"Error deleting record")
    TRC_MSG(HSP_SDP_QUERY_FAILED,"HSP: SDP Query Failed")
    TRC_MSG(AG_AGCONNECTLEVEL__AG_ACLOPEN,"AG: AG(ConnectLevel) = AG_ACLOPEN")
    TRC_MSG(HS_SCO_CONNECT_ERROR_IND_xD,"HS: SCO connect error (ind) %d")
    TRC_MSG(HS_SDP_QUERY_FAILED_TO_START_ABORTING_CONNECTION,"HS: SDP query failed to start, aborting connection")
    TRC_MSG(HS_SDP_PARSEATTRIBUTES_SUCCEEDED_RFCOMM_CHANNEL__xDUPDATED_BUFF_LEN__xD,"HS: SDP_ParseAttributes succeeded! RFCOMM Channel = %d,Updated Buff Len = %d")
    TRC_MSG(AG_ACL_LINK_CONNECT_FAILED,"AG: ACL link connect failed!")
    TRC_MSG(HS_SDP_PARSEATTRIBUTES__FAILURE,"HS: SDP_ParseAttributes - Failure!")
    TRC_MSG(AG_AUDIO_SCO_CONNECT_REQUEST_FAILED_xD,"AG: Audio: SCO connect request failed. %d")
    TRC_MSG(HS_INCOMING_CALL,"HS: Incoming Call...")
    TRC_MSG(AG_ACLOPEN__FALSE,"AG: AclOpen == FALSE")
    TRC_MSG(HS_HEADSET_DEINITIALIZED,"HS: Headset Deinitialized")
    TRC_MSG(AG_DEINITIALIZED,"AG: Deinitialized")
    TRC_MSG(HS_SDP_PARSEATTRIBUTES__CONTINUATION_STATE_QUERY_AGAIN,"HS: SDP_ParseAttributes - Continuation State. Query Again!")
    TRC_MSG(AG_COULD_NOT_BRING_DEVICE_OUT_OF_PARK_MODE,"AG: Could not bring device out of Park Mode.")
    TRC_MSG(HS_SETTING_GENERAL_ACCESSIBLE_MODE,"HS: Setting General Accessible mode.")
    TRC_MSG(HS_HEADSET_OUTBOUND_LINK_FAILED,"HS: Headset: Outbound Link Failed.")
    TRC_MSG(DELETING_OLD_DEVICE_RECORD,"Deleting old device record")
    TRC_MSG(AG_CONNECTLEVEL_AG_SCOOPEN,"AG: ConnectLevel: AG_SCOOPEN")
    TRC_MSG(HS_HEADSET_SDP_QUERY_FAILED,"HS: Headset: SDP Query Failed")
    TRC_MSG(HS_UNKNOWN_RFCOMM_EVENT_xI,"HS: Unknown RFCOMM event: %i")
    TRC_MSG(AG_RFCOMM_COMMAND_RECEIVED_BEFORE_A_HEADSET_HAS_BEEN_REGISTERED,"AG: RFCOMM command received before a headset has been registered")
    TRC_MSG(AG_AG_BUTTONPRESSED_STARTING_MTKAGCLOSELINK,"AG: AG_ButtonPressed starting MTKAgCloseLink()")
    TRC_MSG(INVALID_VOLUME_GAIN_LEVEL,"Invalid volume gain level")
    TRC_MSG(AG_THE_AUDIO_GATEWAY_HAS_NOT_BEEN_INITIALIZED,"AG: The Audio Gateway has not been initialized.")
    TRC_MSG(BT_HSP_FINDDEVICE_FAIL, "[HSP] DS_FindDevice return NULL! Call RF_CloseChannel...")

    TRC_MSG(HFG_SERVICE_CONNECT_REQ,"HFG_EVENT_SERVICE_CONNECT_REQ")
    TRC_MSG(HFG_MEMORY_DIAL,"HFG_EVENT_MEMORY_DIAL")
    TRC_MSG(HFG_REPORT_MIC_VOLUME,"HFG_EVENT_REPORT_MIC_VOLUME")
    TRC_MSG(HFG_LIST_CURRENT_CALLS,"HFG_EVENT_LIST_CURRENT_CALLS")
    TRC_MSG(HFG_REPORT_SPK_VOLUME,"HFG_EVENT_REPORT_SPK_VOLUME")
    TRC_MSG(HFG_DIAL_NUMBER,"HFG_EVENT_DIAL_NUMBER")
    //TRC_MSG(GET_THE_RETURNED_HID_TRANSACTION_HANDSHAKE_PACKET,"Get the returned HID Transaction HandShake packet")
    //TRC_MSG(HSINIT,"hsinit")
    //TRC_MSG(NEW_STATE_AG_IDLE,"new state AG_IDLE")
    TRC_MSG(HFG_HANGUP,"HFG_EVENT_HANGUP")
    //TRC_MSG(SENDING_HANDSHAKE_PACKET,"Sending  HandShake packet")
    //TRC_MSG(HFGA_TX_RESPONSE_BUF_ADDRxX,"hfga_tx: response buf addr=%x")
    TRC_MSG(HFG_ANSWER_CALL,"HFG_EVENT_ANSWER_CALL")
    //TRC_MSG(HS_OPEN_SCOL,"HS Open SCOl")
    TRC_MSG(HFG_RESPONSE_COMPLETE,"HFG_EVENT_RESPONSE_COMPLETE")
    TRC_MSG(HSG_MVOLUMEDOWN_REQ,"HSG_MVOLUMEDOWN_REQ")
    //TRC_MSG(SETUP_HID_HANDSHACK_PAYLOAD_PACKET,"Setup HID Handshack payload packet")
    TRC_MSG(HFG_AT_COMMAND_DATA,"HFG_EVENT_AT_COMMAND_DATA")
    //TRC_MSG(STARTING_OUTGOING_CALL,"Starting outgoing call....")
    TRC_MSG(HFG_HANDSFREE_FEATURES,"HFG_EVENT_HANDSFREE_FEATURES features=%s")
    //TRC_MSG(HS_CLOSE_SCOL,"HS Close SCOl")
    //TRC_MSG(NEW_STATE_AG_CONNECTED,"new state AG_CONNECTED")
    TRC_MSG(HSG_CONNECT_REQ,"HSG_CONNECT_REQ")
    TRC_MSG(HFG_REDIAL,"HFG_EVENT_REDIAL")
    TRC_MSG(HFG_ENABLE_CALLER_ID,"HFG_EVENT_ENABLE_CALLER_ID")
    TRC_MSG(HSG_DEACTIVATE_REQ,"HSG_DEACTIVATE_REQ")
    TRC_MSG(HFG_SERVICE_DISCONNECTED,"HFG_EVENT_SERVICE_DISCONNECTED")
    //TRC_MSG(HSMVD,"hsmvd")
    TRC_MSG(HSG_SVOLUMEDOWN_REQ,"HSG_SVOLUMEDOWN_REQ")
    TRC_MSG(HFG_AUDIO_DISCONNECTED,"HFG_EVENT_AUDIO_DISCONNECTED")
    //TRC_MSG(REJECT_THE_WAITING_CALL,"Reject the waiting call")
    TRC_MSG(HFG_QUERY_SUBSCRIBER_NUMBER,"HFG_EVENT_QUERY_SUBSCRIBER_NUMBER")
    //TRC_MSG(HS_DISCONNECT_CALL,"HS Disconnect Call")
    //TRC_MSG(HSSVU,"hssvu")
    //TRC_MSG(HS_ANSWER_CALL,"HS Answer Call")
    TRC_MSG(HFG_GET_LAST_VOICE_TAG,"HFG_EVENT_GET_LAST_VOICE_TAG")
    //TRC_MSG(NEW_STATE_AG_DISCONNECTING,"new state AG_DISCONNECTING")
    //TRC_MSG(DISCONNECTING_PLEASE_WAIT,"Disconnecting, please wait....")
    TRC_MSG(BT_HSG_BUTTONPRESS_REQ,"BT_HSG_BUTTONPRESS_REQ")
    TRC_MSG(HFG_ENABLE_CALL_WAITING,"HFG_EVENT_ENABLE_CALL_WAITING")
    TRC_MSG(HFG_GENERATE_DTMF,"HFG_EVENT_GENERATE_DTMF")
    TRC_MSG(HSG_AG_CONNECTED,"AG_CONNECTED")
    //TRC_MSG(HFGA_TX_AT_BUFF_BUF_ADDRxX,"hfga_tx: at_buff buf addr=%x")
    TRC_MSG(HSG_MVOLUMEUP_REQ,"HSG_MVOLUMEUP_REQ")
    //TRC_MSG(SENDING_HANDSHAKE_PACKET_WIT_ERROR_STATUSxD,"Sending HandShake packet wit error status=%d")
    TRC_MSG(HFG_SERVICE_CONNECTED,"HFG_EVENT_SERVICE_CONNECTED")
    //TRC_MSG(HFGA_TX_RESPONSE_ADDRxX,"hfga_tx: response addr=%x")
    //TRC_MSG(HFGA_TX_RESPONSEPDATA_ADDRxX,"hfga_tx: response->p.data addr=%x")
    //TRC_MSG(HFGA_ESTABLISH_SERVICE_LEVEL_CONNECTION_TIMEOUT_HDLER,"hfga_establish_service_level_connection_timeout_hdler")
    TRC_MSG(HFG_CALL_HOLD,"HFG_EVENT_CALL_HOLD")
    TRC_MSG(HFG_QUERY_NETWORK_OPERATOR,"HFG_EVENT_QUERY_NETWORK_OPERATOR")
    TRC_MSG(HFG_AUDIO_CONNECTED,"HFG_EVENT_AUDIO_CONNECTED")
    //TRC_MSG(HSCONN,"hsconn")
    //TRC_MSG(NEW_STATE_AG_OUTGOING,"new state AG_OUTGOING")
    TRC_MSG(HFG_ENABLE_EXTENDED_ERRORS,"HFG_EVENT_ENABLE_EXTENDED_ERRORS")
    TRC_MSG(HFG_DISABLE_NREC,"HFG_EVENT_DISABLE_NREC")
    TRC_MSG(HFG_ENABLE_VOICE_RECOGNITION,"HFG_EVENT_ENABLE_VOICE_RECOGNITION")
    //TRC_MSG(HSMVU,"hsmvu")
    //TRC_MSG(DOING_LAST_NUMBER_DIAL,"doing last number dial")
    //TRC_MSG(HSBUTTON,"hsbutton")
    //TRC_MSG(DEVICE_IDLE_PRESS_BUTTON_TO_INITIATE_OUTGOING_CALL,"Device Idle.  Press BUTTON to initiate outgoing call")
    TRC_MSG(HSG_SVOLUMEUP_REQ,"HSG_SVOLUMEUP_REQ")
    TRC_MSG(HS_SCO_CONNECT_ACCEPT_STATUS_STATUS_xD,"HS: SCO Connect Accept Status, status =%d")
    TRC_MSG(AG_CONNECT_LINK_FAILED_TO_START_STATUS__xD,"AG: Connect Link failed to start. status = %d")
    TRC_MSG(HS_ACCESSIBILITY_OPERATION_FAILED_STATUS__xD,"HS: Accessibility operation failed. status = %d.")
    TRC_MSG(HS_CONNECT_LINK_FAILED_TO_START_STATUS__xD,"HS: Connect Link failed to start. status = %d")
    TRC_MSG(HS_SCO_CONNECT_REJECT_STATUS_STATUS_xD,"HS: SCO Connect Reject Status, status =%d")
    TRC_MSG(HFG_EVENT_QUERY_SUBSCRIBER_NUMBER_TRC,"HFG_EVENT_QUERY_SUBSCRIBER_NUMBER")
    TRC_MSG(HS_ANSWER_CALL,"HS Answer Call")
    TRC_MSG(HSSVU,"hssvu")
    TRC_MSG(HSMVD,"hsmvd")
/* HFG & HSG TRACE END */

/* SPP TRACE START */
    TRC_MSG(BT_SPP_ACITVATE_REQ, "=====[BTAP][BT_SPP_ACITVATE_REQ]=====")   
    TRC_MSG(BT_SPP_ACITVATE_CFM, "=====[BTAP][BT_SPP_ACITVATE_CFM]=====")   
    TRC_MSG(BT_SPP_DEACITVATE_REQ, "=====[BTAP][BT_SPP_DEACITVATE_REQ]=====")   
    TRC_MSG(BT_SPP_DEACITVATE_CFM, "=====[BTAP][BT_SPP_DEACITVATE_CFM]=====")   
    TRC_MSG(BT_SPP_CONNECT_REQ, "=====[BTAP][BT_SPP_CONNECT_REQ]=====")   
    TRC_MSG(BT_SPP_CONNECT_IND, "=====[BTAP][BT_SPP_CONNECT_IND]=====")   
    TRC_MSG(BT_SPP_DATA_REQ, "=====[BTAP][BT_SPP_DATA_REQ]===== payload: %d")   
    TRC_MSG(BT_SPP_DATA_CFM, "=====[BTAP][BT_SPP_DATA_CFM]=====")   
    TRC_MSG(BT_SPP_DATA_IND, "=====[BTAP][BT_SPP_DATA_IND]===== payload: %d")   
    TRC_MSG(BT_SPP_DATA_RES, "=====[BTAP][BT_SPP_DATA_RES]=====")   
    TRC_MSG(BT_SPP_CONTROL_REQ, "=====[BTAP][BT_SPP_CONTROL_REQ]=====")   
    TRC_MSG(BT_SPP_CONTROL_IND, "=====[BTAP][BT_SPP_CONTROL_IND]===== modemStatus=0x%x")   
    TRC_MSG(BT_SPP_PORTNEG_IND, "=====[BTAP][BT_SPP_PORTNEG_IND]=====")   
    TRC_MSG(BT_SPP_PORTNEG_RES, "=====[BTAP][BT_SPP_PORTNEG_RES]=====")   
    TRC_MSG(BT_SPP_DISCONNECT_REQ, "=====[BTAP][BT_SPP_DISCONNECT_REQ]=====")   
    TRC_MSG(BT_SPP_DISCONNECT_IND, "=====[BTAP][BT_SPP_DISCONNECT_IND]=====")   
    TRC_MSG(BT_SPPA_PUTBYTES, "=====[Func][Sppa_PutBytes]===== Len: %d, retLen: %d, on Port=%d")
    TRC_MSG(BT_SPPA_ReturnBuf, "====[Func][SPPOS_ReturnBuf]==== txBufLen: %d, retBuf: %d")
    TRC_MSG(SPPA_SENDDATA, "=====[Func][sppa_sendData]=====")
    TRC_MSG(SPPA_CLRTX, "=====[Func][Sppa_ClrTxBuffer]=====")
    TRC_MSG(SPPA_CLRRX, "=====[Func][Sppa_ClrRxBuffer]=====hf_port:%d, this_port:%d,module_id:%d") 	
    TRC_MSG(BT_SPPC_WITH_PORT_TRY_TO_DISC,"SPP client with port=%d, try to disconnect")
    TRC_MSG(BT_SPPC_CMGRHDLR_NOT_FOUND,"In bt_sppclient_cmgr_link_close(): try to remove: But CMGRHandler is not found")
    TRC_MSG(BT_SPPC_CMGR_BDC_ALREADY_NULL,"In bt_sppclient_cmgr_link_close(): bdc is already null")
    TRC_MSG(BT_SPPC_CMGR_EVENT_CALLBACK_EVENT_WITH_DEV_INX,"In bt_sppclient_cmgr_event_callback(): event=%d is for sppOsDev inx=%d")
    TRC_MSG(BT_SPPC_CMGR_EVENT_CALLBACK_EVENT_STATUS,"In bt_sppclient_cmgr_event_callback(): event=%d and status=%d")  
    TRC_MSG(BT_SPPC_LINK_CNF_NOT_FOR_IT,"LINK_CNF is for another profile request, not SPP client")
    TRC_MSG(BT_SPPC_NOT_CALL_CMGRCREATELINK,"BDC is NULL, SPP client does not call CMGR_CreateDataLink()")
    TRC_MSG(BT_SPPC_SPPCONNECT_FAILED_01,"In SPPQueryCallback()01, call sppConnect() failed. status=%d")
    TRC_MSG(BT_SPPC_WIAT_SDP_RSP_01,"Wait for SDP quesry rsp to queryCallback 01")
    TRC_MSG(BT_SPP_AUTH_RSP_WITH_RESULT,"SPP_AUTH_RSP from MMI of port=%d and its result=%d")
    TRC_MSG(BT_SPPC_SEND_UART_READY_TO_READ_TO_MMI,"In sppa_handler(): BT must send UART_READY_TO_READ to MMI")
    TRC_MSG(BT_SPPC_NO_AVAILABLE_DEVS,"No avaialbe SPP Client OsDev for SPP_CONNECT_REQ")
    TRC_MSG(BT_SPPC_SPPCONNECT_FAILED_02,"Recv SPP_CON_REQ and ACL link is already established, call sppConnect() failed. status=%d")
    TRC_MSG(BT_SPPC_WIAT_SDP_RSP_02,"Wait for SDP quesry rsp to queryCallback 02") 
    TRC_MSG(BT_SPPC_WAIT_LINK_CNF,"Wait for LINK_CONNECT_CNF of this SPP client create ACL")
    TRC_MSG(BT_SPP_CMGR_CREATE_LINK_FAILED,"SPP client: CMGR_CreateDataLink failed, status=%d")
    TRC_MSG(BT_SPPC_RECV_DEACTIVATE_REQ_WAIT_CLOSED,"SPPClient recv DEACTIVATE_REQ and wait for RF_CLOSED event")
    TRC_MSG(BT_SPPC_RECV_DEACTIVATE_REQ_BUT_SPPCLOSE_FAILED,"SPPClient recv DEACTIVATE_REQ, call SPP_Close() failed")
    TRC_MSG(BT_SPPC_RECV_DISC_REQ_WAIT_CLOSED,"SPPClient recv DISCONNECT_REQ and wait for RF_CLOSED event")
    TRC_MSG(BT_SPPC_SPPSTARTSERVICEQUERY_STATUS,"Return status=%d of SPPStartServiceQuery")
    TRC_MSG(BT_SPPC_SDP_QUERY_NOT_FOR_IT,"In SPPQueryCallback(): This SPP query rsp is not for SPP client")
    TRC_MSG(BT_SPPC_RECV_CLOSED_DUE_TO_DEACTIVATE_REQ,"Recv CLOSED event due to DEACTIVATE_REQ")
    TRC_MSG(BT_SPPC_RECV_CLOSED_DUE_TO_DISC_REQ,"Recv CLOSED event due to DISC_REQ")
    TRC_MSG(BT_SPPC_SPPCONNECT_FAILED_03,"In SPPQueryCallback()03, call sppConnect() failed. status=%d")
    TRC_MSG(BT_SPPC_GET_SRV_CHNL,"In SPPQueryCallback(), get server_channel_num=%d")
    TRC_MSG(BT_SPPC_RECV_CLOSED_DUE_TO_DEACTIVATE_REQ_02,"defaultEventHandler():Recv CLOSED event due to DEACTIVATE_REQ")
    TRC_MSG(BT_SPPC_RECV_CLOSED_DUE_TO_DISC_REQ_02,"defaultEventHandler():Recv CLOSED event due to DISC_REQ")
    TRC_MSG(BT_SPPC_CONNECTED_RECV_CLOSE_NOT_IT_ISSUED,"SPPClient is already connected,WE Now: Recv CLOSED event not issued by itself")
    //TRC_MSG(BT_SPPC_FIRST_DATA,"Recv SPP Client first data=%s") No %s is permitted in TRC_MSG,can use this
    TRC_MSG(BT_SPPC_NO_UART_OWNER_CNF_NO_READY_TO_READ,"Store data to RingBuf first, but before recv UART_OWNER_CNF,not send UART_READY_TO_READY")
    TRC_MSG(BT_SPPC_CALL_SPPDISC,"Call SPP_Disconnect():Waiting to receive RF_CLOSED event")
    TRC_MSG(BT_SPP_HIGHWATER_RXBUTES_RFFRAMESIZE,"highWater=%d, SPPOS_RxBytes=%d, RF_FrameSize=%d")
    TRC_MSG(BT_SPP_CMEVENT_AUDIO_LINK_CON_SCO_INIT_CMD,"CMEVENT_AUDIO_LINK_CON SCO init command:%02x")
    TRC_MSG(BT_SPP_CMEVENT_AUDIO_LINK_DIS_SCO_INIT_CMD_STATUS,"CMEVENT_AUDIO_LINK_DIS SCO init command:%02x,status:%02x")
    TRC_MSG(BT_SPP_SCO_READ_RSSI_COMPLETED,"SPP_SCO_Read_RSSI with errCode=%d,rssi_value=%02x")
    TRC_MSG(BT_SPP_STOP_RSSI_TIMER,"RSSI timer still running, cancel it due to RFEVENT_CLOSED")
    TRC_MSG(BT_SPP_RSSI_TIMEOUT_DEV_STATE, "SPP_RetrieveRSSI_Timeout, dev_state=%d")
    TRC_MSG(BT_SPP_REMDEV_NOT_IN_CONNECTED_RSSI_TIMEOUT, "RemDev is not in BDS_CONNECTED state, not to start rssi_timer")
    TRC_MSG(BT_SPP_FIND_SQT_OWNER_INX,"Find the sqt owner of this querycallback, its index=%d")
    TRC_MSG(BT_SPP_SEARCH_SPPCLI_BY_DEV_INX,"In SearchSppClientOsDevBySPPDev(), find sppClient at inx=%d")
    TRC_MSG(BT_SPP_REG_GENERAL_SRV_NUM,"Register General SPP Server (Non-SPP-SCO-Server), num of entries=%d")
    TRC_MSG(BT_SPP_REG_SCO_SRV_NUM,"Register SPP SCO Server num of entries =%d")
    TRC_MSG(BT_SPP_REG_GENERAL_CLI_NUM,"Register General SPP Client (Non-SPP-SCO Client) num of entries =%d")
    TRC_MSG(BT_SPP_REG_SCO_CLI_NUM,"Register SPP SCO Client num of entries =%d")
    TRC_MSG(BT_SPP_NUM_DEV,"NUM_SPP_DEVS=%d")
    TRC_MSG(BT_SPPC_DISC_TIMER_500MS,"In openClientPort(): Spp sets current disc Timer:BT_L2CAP_DISCONNECT_TIMEOUT_500MS")
    TRC_MSG(BT_SPPC_DISC_TIMER_50S,"In openClientPort(): Spp sets current disc Timer:BT_L2CAP_DISCONNECT_TIMEOUT_50S")
    TRC_MSG(BT_SPPS_RECV_FIRST_DATA,"Recv SPP Client first data=%s") 
    TRC_MSG(BT_SPP_SDP_QUERY_FAILED_ADDR,"SDP query for SPP client is error with bd_addr=%02x,%02x,%02x,%02x,%02x,%02x")
    TRC_MSG(BT_SPP_CMGR_CREATELINK_STATUS,"SPP CMGR_CreateDataLink status:%02x")
    TRC_MSG(BT_SPP_ACLLINK_EXISTED_SET_DISCFLAG_TRUE,"ACL Link is already existed, set discFlag=TRUE in CMGR_CreateDataLink()")
    TRC_MSG(BT_SPP_OPEN_SCO_HDLR,"Try to open sco handler:%02x")
    TRC_MSG(BT_SPP_DISC_SCO_HDLR,"Try to disconnect sco handler:%02x")
    TRC_MSG(BT_SPP_SCO_ACTIVATE_SNIFF_TIMER_IN_RFEVENT_OPEN_CLIENT,"RFEVENT_OPEN client side: CMGR_ActivateSniffTimer()")
    TRC_MSG(BT_SPP_SCO_ACTIVATE_SNIFF_TIMER_IN_RFEVENT_OPEN_SERVER,"RFEVENT_OPEN server side: CMGR_ActivateSniffTimer()") 
    TRC_MSG(BT_SPP_SCO_RSSI_TIMER_PERIOD_LINK_MODE,"Report_RSSI_Timer_Period=%d, current link mode=%d")
    TRC_MSG(BT_SPP_SCO_ASK_RSSI_IN_ACTIVE_MODE,"Ask RSSI value in Active mode")
    TRC_MSG(BT_SPP_NOT_ASK_RSSI_IN_SNIFF_MODE,"Not ask RSSI value in Sniff mode,link state=%d")
    TRC_MSG(BT_SPP_ASK_RSSI_IN_SNIFF_MODE,"Still ask RSSI value in Sniff mode")
    TRC_MSG(BT_SPP_RECV_OPEN_IND_SET_AUTH_MODE_WAIT_PLUGOUT_CNF_FLAG,"RFEVENT_OPEN_IND:set_auth_req_mode=%d,wait_plugout_cnf_msg=%d")
    TRC_MSG(BT_SPP_RECV_OPEN_IND_BUT_REJECT_DUE_TO_WAIT_PLUGOUT_CNF,"defaultEventHandler():Recv RF_OPEN_IND_rejected_due_to_wait_plugout_cnf")  
    TRC_MSG(BT_SPPOS_DISCONNECT_IND_WAIT_PLUGOUT_FLAG,"SPPOS_DisConnected(): wait_for_plugout_cnf_msg=%d")  
    TRC_MSG(BT_SPPA_NOT_SEND_PLUGOUT_IND,"NOT Send UART_PLUGOUT_IND due to DISC_IND is triggered by wait_plugout_cnf_msg")  
    TRC_MSG(BT_SPP_SET_WAIT_PLUGOUT_CNF_FLAG_INX,"BT SPP Set Wait Plugout Cnf Flag inx=%d") 
    TRC_MSG(BT_SPP_RECV_PLUGOUT_CNF_PORT,"BT SPP Recv PlugoutCnf with matched port=%d,reset to default port owner")
    TRC_MSG(BT_SPP_Check_FLOW_CTRL_SETTING_CASE,"BT_SPP_Check_FlowCtrl_case=%d")
    TRC_MSG(REGISTER_SPP_SCO_SERVER_NUM_OF_ENTRIES_xD,"Register SPP SCO Server num of entries =%d")
    TRC_MSG(IN_SEARCHSPPCLIENTOSDEVBYSPPDEV_FIND_SPPCLIENT_AT_INXxD,"In SearchSppClientOsDevBySPPDev(), find sppClient at inx=%d")
    TRC_MSG(REGISTER_GENERAL_SPP_SERVER_NONSPPSCOSERVER_NUM_OF_ENTRIESxD,"Register General SPP Server (Non-SPP-SCO-Server), num of entries=%d")
    TRC_MSG(REGISTER_GENERAL_SPP_CLIENT_NONSPPSCO_CLIENT_NUM_OF_ENTRIES_xD,"Register General SPP Client (Non-SPP-SCO Client) num of entries =%d")
    TRC_MSG(TRY_TO_OPEN_SCO_HANDLER,"Try to open sco handler")
    /* SPP Inject Message */   
    TRC_MSG(BT_SPP_INJECT_ENABLE,"[BT_SPP_INJECT] sppenable: string=%s")
    TRC_MSG(BT_SPP_INJECT_DISABLE,"[BT_SPP_INJECT] sppdisable: string=%s")
    TRC_MSG(BT_SPP_INJECT_ACTIVATE,"[BT_SPP_INJECT] sppactivate: string=%s")
    TRC_MSG(BT_SPP_INJECT_DEACTIVATE,"[BT_SPP_INJECT] sppdeactivate: string=%s")
    TRC_MSG(BT_SPP_INJECT_DISCONNECT,"[BT_SPP_INJECT] sppdisconn: string=%s")
    TRC_MSG(BT_SPP_INJECT_CONNECT,"[BT_SPP_INJECT] sppcon: string=%s")
    TRC_MSG(BT_SPP_INJECT_SEND_DATA,"[BT_SPP_INJECT] sppdata: string=%s")

    TRC_MSG(CREDIT_xD_DEVCREDIT_xD,"credit %d, dev->credit %d")
    TRC_MSG(SPP_SPPSLEEPHANDLER,"SPP: sppSleepHandler")
    TRC_MSG(IDBT_DEBUGx04X_LENxD,"id=%04x, len=%d")
    TRC_MSG(SPP_SDP_QUERY_RETURNED_xD,"SPP: SDP_Query() returned %d")
/* SPP TRACE END */

/* SIMAP TRACE START */
    TRC_MSG(BT_SIMAP_LACK_EXPECTED_PARM,"BTSIM:Message lacks expected input parms")
    TRC_MSG(BT_SIMAP_CONTAIN_INVALID_PARM,"BTSIM:Message contained an invalid parameter")
    TRC_MSG(BT_SIMAP_DISCONNECT_REQ_IN_OPEN,"SIM_DISCONNECT_REQ in SIM_DISCONNECT_REQ in SimServerStateOpen()")
    TRC_MSG(BT_SIMAP_GET_DISC_REQ_BEFORE_GRACEFUL_DISC_TIMER_TIMEOUT,"In open state, receiving DISC_REQ cmd before timeout of Graceful Disconnect") 
    TRC_MSG(BT_SIMAP_GET_APDU_CMD_BEFORE_GRACEFUL_DISC_TIMER_TIMEOUT,"BT_SIMAP_GET_APDU_CMD_BEFORE_GRACEFUL_DISC_TIMER_TIMEOUT")
    TRC_MSG(BT_SIMAP_APDU_REQ_IN_OPEN,"Received a SIM_TRANSFER_APDU_REQ in SimServerStateOpen()")
    TRC_MSG(BT_SIMAP_ATR_REQ_IN_OPEN,"Received a SIM_TRANSFER_ATR_REQ in SimServerStateOpen()")
    TRC_MSG(BT_SIMAP_POWER_ON_REQ_IN_OPEN,"Received a SIM_POWER_ON_REQ in SimServerStateOpen()")
    TRC_MSG(BT_SIMAP_CARD_RDR_STATUS_REQ_IN_OPEN,"Received a SIM_CARD_RDR_STATUS_REQ in SimServerStateOpen()")
    TRC_MSG(BT_SIMAP_TRANSPORT_PROTOCOL_REQ_IN_OPEN,"Received a SIM_SET_TRANS_PROT_REQ in SimServerStateOpen()")
    TRC_MSG(BT_SIMAP_POWER_OFF_REQ_IN_OPEN,"Received a SIM_POWER_OFF_REQ in SimServerStateOpen()")
    TRC_MSG(BT_SIMAP_RESET_REQ_IN_OPEN,"Received a SIM_RESET_REQ in SimServerStateOpen()")
    TRC_MSG(BT_SIMAP_ERROR_IND_IN_OPEN,"An error was detected in the client request in SimServerStateOpen()")
    TRC_MSG(BT_SIMAP_GET_DISCGRACE_PACKET_HANDLED_WITH_SUBSTATE,"In SimServerStateOpen() discGracePacket SIM_PACKET_HANDLED, substate=%02x")
    TRC_MSG(BT_SIMAP_SEGMENTS_OF_DISCGRACE_PACKET_CAN_NOT_SEND_IN_OPEN,"Left segments of discGracePacket could not be sent in SimServerStateOpen()")
    TRC_MSG(BT_SIMAP_GET_SIM_PACKET_HANDLED_WITH_SUBSTATE,"In SimServerStateOpen() simPacket SIM_PACKET_HANDLED, substate=%02x") 
    TRC_MSG(BT_SIMAP_STATUS_IN_SEND_DUE_TO_SET_T,"In SimServerStateOpen():SIM_Status_IND is sent to sim client")
    TRC_MSG(BT_SIMAP_SIM_PACKET_HANDLED_DUE_TO_SIMSERVER_RSP,"In SimServerOpen(), SIM_PACKET_HANDLED is returned due to invoke SIM_XXX() directly in simServer not in bt_adp_simap.c!")
    TRC_MSG(BT_SIMAP_SEGMENTS_OF_SIM_PACKET_FOR_STATUS_IND_CAN_NOT_SEND_IN_OPEN,"Left segments of simPacket payloaded the msg Status_IND could not be sent in SimServerStateOpen()")
    TRC_MSG(BT_SIMAP_GET_UNHANDLED_EVENT_IN_OPEN,"Received unhandled event: %02X in SimServerStateOpen() and now close RFChannel")
    TRC_MSG(BT_SIMAP_GET_ALREADY_PROCESSED_CMD_IN_OPEN,"Received a command when already processing in SimServerStateOpen()")
    TRC_MSG(BT_SIMAP_CARD_STATUS_SENT_IN_CONPENDING,"SIM:Card Status sent in ConPending")
    TRC_MSG(BT_SIMAP_ATR_SENT_CON_IS_UP,"SIM:ATR Sent, connection is up")
    TRC_MSG(BT_SIM_SEND_FAILED_IN_CONNECT_PROCESS,"SIM:Send failed during connect process")
    TRC_MSG(BT_SIMAP_GET_ATR_REQ_IN_CONPENDING,"SIM: Received an ATR request in SimServerStateConnPending()")
    TRC_MSG(BT_SIMAP_CMD_ALREADY_PROCESSED_IN_CONPENDING,"SIM: Received a command when already processing in SimServerStateConnPending()")
    TRC_MSG(BT_SIMAP_NO_EXPECT_REC_ATR_REQ_IN_CONPENDING,"No Expect to receive ATR_REQ in SimServerStateConnPending")
    TRC_MSG(BT_SIMAP_RCV_UNHANDLED_EVENT_IN_CONPENDING,"SIM:Server CONN_PENDING state received an unhandled event: %02X")
    TRC_MSG(BT_SIMAP_PACKET_HANDLED_IN_DISCPENDING,"In SimServerStateDiscPending(): DISC_RSP/DISC_IND with immd type packet is already handled")
    TRC_MSG(BT_SIMAP_SEGMENTS_CAN_NOT_SEND_IN_DISCPENDING,"SIM: Server connection closed due to not send left segments of discPacket in SimServerStateDiscPending()")
    TRC_MSG(BT_SIMAP_RCV_UNHANDLED_EVENT_IN_DISCPENDING,"SIM:  Server DISC_PENDING state received an unexpected event: %02X")
    TRC_MSG(BT_SIMAP_RCV_CON_REQ_IN_CLOSE,"In SimServerStateClosed():  MMI accepts and receiving SIM_CONNECT_REQ, MaxMsgSize = %d")
    TRC_MSG(BT_SIMAP_SEND_CON_RSP_WITH_REJ_MSGSIZE,"SIM:Server sending connect response, rejecting message size")
    TRC_MSG(BT_SIMAP_SIMSERVER_BUSY_FOR_ONE_CLIENT,"SimServer is already serving one client,so reject another client at this time")
    TRC_MSG(BT_SIMAP_RCV_UNEXPECTED_EVENT_IN_CLOSED,"SIM:  Server CLOSED state received an unexpected event: %02X")
    TRC_MSG(BT_SIMAP_UNKNOWN_MSGID,"SIM: Unrecognized Message ID %02X")
    TRC_MSG(BT_SIMAP_CON_NOT_ACCEPTED_IN_SRVCALLBACK,"Incoming connection could not be accepted in SimSrvCallback(), status: %d")
    TRC_MSG(BT_SIMAP_CON_ACCEPTED_IN_SRVCALLBACK,"Incoming connection is accepted in SimSrvCallback()")
    TRC_MSG(BT_SIMAP_CON_OPEN_IN_SRVCALLBACK,"Connection open is reported with status=%d in SimSrvCallback()")
    TRC_MSG(BT_SIMAP_CON_CLOSED_IND_IN_SRVCALLBACK,"Connection disconnecting is reported with status=%d in SimSrvCallback()")
    TRC_MSG(BT_SIMAP_CLOSED_IN_SRVCALLBACK,"Connection closed is reported with status=%d in SimSrvCallback()")
    TRC_MSG(BT_SIMAP_CLOSED_NOTIFY_SIM_TASK_IN_SRVCALLBACK,"SAP connection is closed, notify SIM task to recovery SIM card!")
    TRC_MSG(BT_SIMAP_SIMSERVER_AVAILABLE_IN_SRVCALLBACK,"No CON_REQ to SIM Task,now SAP Closed,SimServer is available again,oldstate=%d")
    TRC_MSG(BT_SIMAP_FAILED_SEND_STATUS_IND_IN_SRVCALLBACK,"Cound not send STATUS_IND to client in SimSrvCallback(), reason:%d")
    TRC_MSG(BT_SIMAP_SEND_STATUS_IND_IN_SRVCALLBACK,"Sending STATUS_IND to client in SimSrvCallback()")
    TRC_MSG(BT_SIMAP_FAILED_SEND_ATR_RSP_IN_SRVCALLBACK,"Send ATR in SimSrvCallback(): result=%d,reason=%d")
    TRC_MSG(BT_SIMAP_SEND_ATR_RSP_IN_SRVCALLBACK,"ATR response sent in SimSrvCallback()")
    TRC_MSG(BT_SIMAP_SEND_APDU_TO_SIM_IN_SRVCALLBACK,"Send APDU_REQ to SIM task in SimSrvCallback()")
    TRC_MSG(BT_SIM_SEND_POWER_OFF_TO_SIM_IN_SRVCALLBACK,"Send POWER_OFF_REQ to SIM task in SimSrvCallback()")
    TRC_MSG(BT_SIMAP_NO_RULES_PROCESS_SIM_ON_REQ_IN_SRVCALLBACK,"Not matched any rules in SimSrvCallback() when receiving SAEVENT_SERVER_SIM_ON_REQ")
    TRC_MSG(BT_SIMAP_POWER_OFF_RSP_TO_CLIENT,"Send SIM_POWER_OFF_RSP to client with result=%d, reason: %d in SimSrvCallback()")
    TRC_MSG(BT_SIMAP_SEND_POWER_ON_RSP_TO_CLIENT_IN_SRVCALLBACK,"Send SIM_POWER_ON_RSP with result=%d and reason: %d in SimSrvCallback()") 
    TRC_MSG(BT_SIMAP_SEND_SET_T_RSP_TO_CLIENT_IN_SRVCALLBACK,"Send SIM_SET_TRANSPORT_PROTOCOL_TYPE_RSP with result=%d and response reason: %d")
    TRC_MSG(BT_SIMAP_NO_RULES_PROCESS_RESET_REQ_IN_SRVCALLBACK,"Not matched any rules in SimSrvCallback() when receiving SAEVENT_SERVER_SIM_RESET_REQ")
    TRC_MSG(BT_SIMAP_SEND_RESET_RSP_TO_CLIENT_IN_SRVCALLBACK,"Send SIM_RESET_RSP with result=%d and response reason: %d")
    TRC_MSG(BT_SIMAP_SEND_CARD_RDS_RSP_TO_CLIENT_IN_SRVCALLBACK,"Send CARD_READER_STATUS response in SimSrvCallback(), reason: %d")
    TRC_MSG(BT_SIMAP_STATUS_IND_SENT_IN_SRVCALLBACK,"STATUS_IND is sent with status=%d, in SimSrvCallback()")
    TRC_MSG(BT_SIMAP_ADD_SDPRECORD_OK,"SEC_Register() is successful,but SDP_AddRecord() is failed  in SIM_RegisterServer()")
    TRC_MSG(BT_SIMAP_REMOVE_SECREC_REG,"Call SEC_Unregister() to remove SIM(secRec) registration")
    TRC_MSG(BT_SIMAP_SEC_REG_FAILED,"SEC_Register() failed in SIM_RegisterServer()")
    TRC_MSG(DEREGISTER_SRV_CHANNEL,"Degister Server Channel due to SEC_Register() failed or SDP_AddRecord() failed")
    TRC_MSG(BT_SIMAP_FAILED_CALL_RFREGSRVCHNL,"Failed to invoke RF_RegisterServerChannel() in SIM_RegisterServer()")
    TRC_MSG(BT_SIMAP_FAILED_CLOSE_CON_IMMD,"In bt_simap_deactivate_req_hdlr(): fail to close connection with immediate type, status=0x%x")
    TRC_MSG(BT_SIMAP_SRVSTATE_RCV_DEACTIVATE,"In bt_simap_deactivate_req_hdlr(): simServer state=%d, substate=%d")
    TRC_MSG(BT_SIMAP_FAILED_CLOSE_CON_DEACTIVATE,"In bt_simap_deactivate_req_hdlr(): fail to close connection by RF_CloseChannel, status=0x%x")
    TRC_MSG(BT_SIMAP_FAILED_CLOSE_CON_WITH_TYPE,"In bt_simap_disconnect_req_hdlr():Cannot close the connection, reason: %d, type=%d")
    TRC_MSG(BT_SIMAP_CLOSE_CON_WITH_GRACEFUL,"In bt_simap_disconnect_req_hdlr():Closing the connection with graceful type")
    TRC_MSG(BT_SIMAP_SIMSERVER_STATE,"In bt_simap_disconnect_req_hdlr(): SimServerState=%d")
    TRC_MSG(BT_SIMAP_CON_CNF_ERROR_FROM_SIM,"In bt_sim_connect_cnf_hdlr(): receiving BT_SIM_CONNECT_CNF with Error!")
    TRC_MSG(BT_SIMAP_SIMSERVER_STATE_SUBSTATE,"SimServer state=%d, substate=%d")
    TRC_MSG(BT_SIMAP_RESET_CNF_ERROR_FROM_SIM,"SIM_SERVER_STATE_OPEN receiving BT_SIM_RESET_CNF with error=%d")
    TRC_MSG(BT_SIMAP_RESET_RSP_TO_CLIENT,"Send SIM RESET response, result:%d, status=%d")
    TRC_MSG(BT_SIMAP_POWER_ON_ERROR_FROM_SIM,"SIM_SERVER_STATE_OPEN receiving BT_SIM_RESET_REQ_SENT_POWER_ON with error=%d")
    TRC_MSG(BT_SIMAP_SEND_POWER_ON_RSP_TO_CLIENT,"In bt_sim_reset_cnf_hdlr(): call SIM_ServerSimOnRsp() with result=%d successfully")
    TRC_MSG(BT_SIMAP_SET_T_ERROR_FROM_SIM,"SIM_SERVER_STATE_OPEN receiving BT_SIM_RESET_REQ_SENT_SET_T with error=%d")
    TRC_MSG(BT_SIMAP_SEND_SET_T_RSP_TO_CLIENT,"In bt_sim_reset_cnf_hdlr(): call SIM_ServerSetTransProtRsp() with result=%d successfully")
    TRC_MSG(BT_SIMAP_RESET_CNF_ERR_RFOM_SIM_IN_CONPENDING,"In bt_sim_reset_cnf_hdlr(): SIM_SERVER_STATE_CONNECT_PENDING  receiving BT_SIM_RESET_CNF with error=%d")
    TRC_MSG(BT_SIMAP_RESET_RSP_NOT_EXPECTED_IN_OPEN,"Not request RESET/POWE_ON/SET_TRANSPORT_PROTOCOL, the RESET_RSP is not expected, Ignore it!")
    TRC_MSG(BT_SIMAP_GET_RESET_RSP_NOT_IN_CONPENDING_OR_OPEN,"In bt_sim_reset_cnf_hdlr(): Not in CONNECT_PENDING/Open state, should not receive BT_SIM_RESET_CNF from SIM Task")
    TRC_MSG(BT_SIMAP_RCV_APDU_RSP_FROM_SIM,"In bt_sim_apdu_cnf_hdlr(): Receiving APDU_RSP from SIM task with result=%d")
    TRC_MSG(BT_SIMAP_SEND_APDU_RSP_TO_CLIENT,"Apdu response sent with result=%d,status=%d,func=%d")
    TRC_MSG(BT_SIMAP_NOT_EXPECTED_RCV_APDU_RSP_FROM_SIM,"In bt_sim_apdu_cnf_hdlr():Not Expect to receive APDU_RSP from SIM task, no request for this")
    TRC_MSG(BT_SIMAP_RCV_GRACEFUL_DISC_PREVIOUSLY,"After completing connection procedure, MMI requested to graceful disconnection")
    TRC_MSG(BT_SIMAP_ERROR_AND_NOTIFY_SIM_TO_RECOVERY,"Some Error happens and state=%d, notify SIM task to recovery successfully!")
    TRC_MSG(BT_SIMAP_ERR_NO_CON_REQ_SENT_TO_SIM,"No connect_req has been sent to SIM task, receiving this disconnect_cnf in bt_sim_disconnect_cnf_hdlr() is error!")
    TRC_MSG(BT_SIMAP_ERR_NO_DISC_REQ_SENT_TO_SIM,"No disconnect_req has been sent to SIM task, receiving this disconnect_cnf in bt_sim_disconnect_cnf_hdlr() is error!")
    TRC_MSG(BT_SIMAP_RCV_POWER_OFF_CNF_FROM_SIM,"In bt_sim_power_off_cnf_hdlr(): Receiving POWER_OFF_CNF from SIM task with result=%d")
    TRC_MSG(BT_SIMAP_SEND_POWER_OFF_RSP_TO_CLIENT,"In bt_sim_power_off_cnf_hdlr():Cound not send SIM_POWER_OFF_RSP to client with result=%d, status: %d")
    TRC_MSG(BT_SIMAP_NOT_EXPECTED_RCV_POWER_OFF_RSP_FROM_SIM,"In bt_sim_power_off_cnf_hdlr(): Not Expect to receive POWER_OFF_RSP from SIM task, no request for this")
    TRC_MSG(BT_SIMAP_SIM_REGSERVER,"In bt_simap_init():SIM Server cannot be registered, status=%d")
    TRC_MSG(BT_SIMAP_ATR_TIMEOUT_HDLR,"Timeout callbacked in bt_simap_wait_atr_in_connect_procedure_timeout_handler()")
    TRC_MSG(BT_SIMAP_GRACEFUL_TIMEOUT_HDLR,"Timeout callbacked in bt_simap_wait_req_in_graceful_disconnect_procedure_timeout_handler()")
    TRC_MSG(BT_SIMAP_GRACEFUL_TIMEOUT_HDLR_CAN_NOT_CLOSE,"In bt_simap_wait_req_in_graceful_disconnect_procedure_timeout_handler():Cannot close the connection with immediate type, status: %d")
    TRC_MSG(BT_SIMAP_START_TIMER,"In bt_simap_start_timer():msec=%d")
    TRC_MSG(BT_SIMAP_STOP_TIMER,"In bt_simap_stop_timer()")
    TRC_MSG(BT_SIMAP_NO_DEFINED_MSG_ID,"Not defined MSG_ID for SIM Access Profile,Assert it!")
    TRC_MSG(BT_SIMAP_SRV_CLOSESTATE_DISC_SENT,"Recv Deactive_req, although SimServer is closed, but it waits for SIM task's DISC_CNF")
    TRC_MSG(BT_SIMAP_RFCOMM_SIMSRV_BOTHCLOSED_RECV_DEACTIVE_REQ,"Recv Deactive_req, the RFCOMM and SimServer are already in CLOSED state")
    TRC_MSG(BT_SIMAP_RELEASE_CONID_IN_DEACTIVE_REQ_HDLR,"Release SIM Access Profile connect_id in bt_simap_deactivate_req_hdlr")
    TRC_MSG(BT_SIMAP_RECV_DEACTIVE_CHECK_DISCGRACE_TIMER,"Recv Deactivate Req, check disc with graceful timer is running or not!")
    TRC_MSG(BT_SIMAP_DO_NOTHING_IN_DISC_PENDING_STATE_IN_DEACTIVE_REQ,"In DEACTIVATE_REQ, do not close RFCOMM channel again in SIM_SERVER_STATE_DISC_PENDING state")    
    TRC_MSG(BT_SIMAP_CLOSE_RFCOMM_IN_CONN_PENDING_STATE_IN_DEACTIVE_REQ,"In DEACTIVATE_REQ, close RFCOMM channel in SIM_SERVER_STATE_CONN_PENDING state")    
    TRC_MSG(BT_SIMAP_USE_DISCIND_FOR_DEACTIVE_REQ,"Using SimServerSendDiscInd() first to do deactive request")
    TRC_MSG(BT_SIMAP_USE_RFCLOSECHNL_FOR_DEACTIVE_REQ,"Using RF_CloseChannel() first to do deactive request")
    //TRC_MSG(BT_SIMAP_DEACTIVE_REQ_HDLR_RFCLOSECHNL_FAILED,"In bt_simap_deactiveate_req_hdlr(): RF_CloseChannel failed, status=%d")
    TRC_MSG(BT_SIMAP_MMI_REJECT_SAP_CON_IN_AUTH_RSP_HDLR,"MMI rejects this SAP connection in bt_simap_auth_rsp_hdlr")
    //TRC_MSG(BT_SIMAP_CONRSPERR_STATUS,"Status of SimServerSendConnRspErr =%d")
    //TRC_MSG(BT_SIMAP_DISC_REQ_HDLR_RFCLOSECHNL_FAILED_STATUS,"In bt_simap_disconnect_req_hdlr(): RF_CloseChannel failed, status=%d")
    TRC_MSG(BT_SIMAP_DISC_REQ_HDLR_NO_ENTRY_TO_DISC,"In bt_simap_disconnect_req_hdlr():Error! MMI has no entry to disconnect this SAP")
    TRC_MSG(BT_SIMAP_DISC_REQ_HDLR_ALREADY_DISC_PENDING,"In bt_simap_disconnect_req_hdlr():Already disc pending, ignore this request")
    TRC_MSG(BT_SIMAP_RECV_DISC_REQ_SIMSRV_CLOSED_WAIT_DISCCNF,"Recv Disc_req from MMI, although SimServer is closed, but it waits for SIM task's DISC_CNF") 
    TRC_MSG(BT_SIMAP_SIMSRV_MODE,"SimServer's test mode=%d")
    TRC_MSG(BT_SIMAP_CON_CNF_HDLR_NOT_EXPECT_SIM_CON_CNF, "In bt_sim_connect_cnf_hdlr():Not Expect to receive BT_SIM_CONNECT_CNF")
    //TRC_MSG(BT_SIMAP_RFCHNL_CLOSED_RESET_SIM_RSP_FAILED_OK,"RFChannel is closed, so SIM_ServerResetSimRsp() failed is ok")
    //TRC_MSG(BT_SIMAP_OPENSTATE_RESET_CNF_HDLR_RFCLOSECHNL_FAILED_STATUS,"In bt_sim_openstate_reset_cnf_hdlr(): RF_CloseChannel failed, status=%d")
    TRC_MSG(BT_SIMAP_OPENSTATE_SEND_POWERON_RSP_FAILED_STATUS,"In bt_sim_reset_cnf_hdlr(): SIM_SERVER_STATE_OPEN:Cound not send SIM POWER ON response, status:%d")
    //TRC_MSG(BT_SIMAP_RFCHNLCLOSED_SEND_SIMONRSP_FAILED_OK,"RFChannel is closed, so SIM_ServerSimOnRsp() failed is ok")
    TRC_MSG(BT_SIMAP_FAILED_STATUS,"failed with status=%d")
    TRC_MSG(BT_SIMAP_OPENSTATE_SETT_CNF_HDLR_STATUS,"In bt_sim_openstate_set_transport_protocol_cnf_hdlr(): SIM_SERVER_STATE_OPEN:Cound not send SIM Set Transport Protocol Type response, status:%d")
    //TRC_MSG(BT_SIMAP_RFCHNLCLOSED_SEND_SETT_RSP_FAILED_OK,"RFChannel is closed, so SIM_ServerSetTransProtRsp() failed is ok")
    TRC_MSG(BT_SIMAP_RESET_CNF_HDLR_CT,"In bt_sim_reset_cnf_hdlr(), CT=%d")
    TRC_MSG(BT_SIMAP_APDU_RSP_FROM_SIM_NOT_ACCESSIBLE,"APDU resp from SIM task is not accessible:physical error")
    TRC_MSG(BT_SIMAP_RFCHNLCLOSED_SEND_RSP_FAILED_OK,"RFChannel is clodes, send rsp failed in bt_adp_simap is ok")
    TRC_MSG(BT_SIMAP_DISC_CNF_HDLR_CARDSTATUS,"disconnect_cnf_hdlr(): cardstatus=%02X")
    TRC_MSG(BT_SIMAP_RELEASE_CONID_DISC_CNF_HDLR00,"Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_00")
    TRC_MSG(BT_SIMAP_DISC_CNF_CASE0,"DISC_CNF case0")
    TRC_MSG(BT_SIMAP_RELEASE_CONID_DISC_CNF_HDLR01,"Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_01")
    TRC_MSG(BT_SIMAP_DISC_CNF_CASE1,"DISC_CNF case1")
    TRC_MSG(BT_SIMAP_RELEASE_CONID_DISC_CNF_HDLR02,"Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_02")
    TRC_MSG(BT_SIMAP_DISC_CNF_CASE2,"DISC_CNF case2")
    TRC_MSG(BT_SIMAP_RELEASE_CONID_DISC_CNF_HDLR03,"Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_03")
    TRC_MSG(BT_SIMAP_DISC_CNF_CASE3,"DISC_CNF case3")
    TRC_MSG(BT_SIMAP_RELEASE_CONID_DISC_CNF_HDLR04,"Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_04")
    TRC_MSG(BT_SIMAP_DISC_CNF_CASE4,"DISC_CNF case4")
    TRC_MSG(BT_SIMAP_RELEASE_CONID_DISC_CNF_HDLR05,"Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_05")
    TRC_MSG(BT_SIMAP_DISC_CNF_CASE5,"DISC_CNF case5")
    TRC_MSG(BT_SIMAP_RELEASE_CONID_DISC_CNF_HDLR06,"Release SIM Access Profile connect_id in bt_sim_disconnect_cnf()_06")
    TRC_MSG(BT_SIMAP_DISC_CNF_CASE6,"DISC_CNF case6")
    TRC_MSG(BT_SIMAP_SHOW_APDUREQCONTENT,"ShowAPDUReqContent():")
    TRC_MSG(BT_SIMAP_SHOW_ONE_BYTE,"This byte=%02X")
    TRC_MSG(BT_SIMAP_CHECK_PACKET_IS_GOT_FROM_LIST,"In CheckPacketIsFromList(): find returned packet in inx=%d")
    TRC_MSG(BT_SIMAP_OPEN_STATE_MSGTYPE_CARDSTATUS_SUBSTATE,"In simserver open state, msgType=%02x,cardstatus=%02x,substate=%04x")
    TRC_MSG(BT_SIMAP_OPENSTATE_SEND_DISCRSP_FAILED,"In SimServerStateOpen() status of SendDiscRsp=%d")
    TRC_MSG(BT_SIMAP_SET_T_PACKET_HANDLED_WITH_PARMTYPE,"SET_T PACKET HANDLED with ParamType=%d")
    TRC_MSG(BT_SIMAP_ALREADY_SENT_APDU_RSP_RECV_DISC_REQ,"Send APDU_RSP and its packet handled, start timer again for DISC with Graceful type")
    TRC_MSG(BT_SIMAP_NOT_CORRECT_PKT_RECV_IN_OPEN_STATE,"\nIn Open State, not simPacket or discGracePacket handled received")
    TRC_MSG(BT_SIMAP_IN_OPEN_STATE_CHECK_SRVFLAGS,"Open state,flags=%02x")
    TRC_MSG(BT_SIMAP_CLOSE_RFCOMM_FAILED,"In Sim_Sm.c: status of RF_CloseChannel=%d")
    TRC_MSG(BT_SIMAP_NO_CONRSP_WITH_OK_RETURNED,"Not CONN_RSP with ConStatus OK packet returned, No Status_IND to Client")
    TRC_MSG(BT_SIMAP_RESENT_MTU_ACCEPTED,"Wait retry SAP MTU and this MTU is acceptable")
    TRC_MSG(BT_SIMAP_SEND_CONRSPERR_FAILED,"Status from SendConnRspErr() =%d")
    TRC_MSG(BT_SIMAP_CLOSED_EVENT_DUE_TO_REJECT_SECOND_CLIENT,"This closed event is due to SimServer is serving one client now, so reject another seesion")
    TRC_MSG(BT_SIMAP_SRVCALLBACK_CASE0,"Case0:In SimSrvCallback():SimServer is available again!")
    TRC_MSG(BT_SIMAP_SRVCALLBACK_RECV_CLOSED_CHECK_TIMER,"In SimSrvCallback() recv CLOSED, check timer for DISC_Graceful type")
    TRC_MSG(BT_SIMAP_SET_T0_T1_NOT_SUPPORT_T1_T0,"SET T=0/T=1 but only support T=1/T=0, Send SET_T_RSP first then STATUS_IND with card not accessible later")
    TRC_MSG(BT_SIMAP_CLIENT_REQ_T_TYPE,"In SimSrvCallback(): client requested T type=%d")
    TRC_MSG(BT_SIMAP_RELEASE_SAP_CONID_CASE1,"Release SIM Acces Profile connect_id in Case 1")
    TRC_MSG(BT_SIMAP_SIMSRV_CLOSED_RFCOMM_CLOSED_DUE_TO_DEACTIVATE_REQ,"This case is SimServer closed then RFCOMM closed due to MMI Deactivate Req, return Deactivate_CNF with ok")
    TRC_MSG(BT_SIMAP_SIMSRVSENDSTATUS,"status of SimServerSendStatsu()=%02x")
    TRC_MSG(BT_SIMAP_STATUS_IND_NOT_ACCESSIBLE_IN_SLOW_CON_MODE,"STATUS_IND with CARD_NOT_ACCESSIBLE will be sent in SLOW_CONNECT_MODE")
    TRC_MSG(BT_SIMAP_SIMSRVRSP_NO_PKT,"In Sim.c SIM_ServerRsp(): no packets, clear server flags, case=%d")
    TRC_MSG(BT_SIMAP_SLOW_CON_MODE_NOT_EXPECT_RECV_ATR_REQ,"In slow connect mode, not expect to recv ATR Req") 
    TRC_MSG(BT_SIMAP_PKT_INUSE,"In SimSendPacket(): its flags is BTP_FLAG_INUSE")
    TRC_MSG(BT_SIMAP_FIND_FREE_PKT_INX,"In SimFindFreeAndSendPacket():Find Free packet in inx=%d")
    TRC_MSG(BT_SIMAP_ALLPKT_USED,"In SimFindFreeAndSendPacket(): All packets of SimServer are bust ans used")
    TRC_MSG(BT_SIMAP_SIMSRV_AVAILABLE_AGAIN,"bt_sim_disconnect_cnf_hdlr():SIMServer is avaliable again")
    TRC_MSG(BT_SIMAP_CARDSTATUS_IN_POWER_OFF_HDLER,"power_off_cnf_hdlr(): cardstatus=%02X")
    TRC_MSG(BT_SIMAP_ATR_TIMEOUT_NOT_IN_POWERON_STATE,"In atr_timeout:Not in POWER ON state")
    TRC_MSG(BT_SIMAP_ATRTIMEOUT_SRVSTATE_AND_FLAG,"atr_timeout,simServerState=%d,flags=%02x")
    TRC_MSG(BT_SIMAP_GRACEFUL_TIMEOUT_NOT_IN_POWEROFF_STATE,"In graceful_disc_timeout:Not in POWER ON state")
    TRC_MSG(BT_SIMAP_GRACEFUL_DISC_TIMEOUT_SRVSTATE_AND_SUBSTATE,"graceful_disc_timeout,simServerState=%d,substate=%02x")
    TRC_MSG(BT_SIMAP_GRACEFUL_DISC_TIMEOUT_CLOSE_CON_WITH_IMMED_TYPE,"In bt_simap_wait_req_in_graceful_disconnect_procedure_timeout_handler():Closing the connection with immd type")
    TRC_MSG(BT_SIMAP_SEND_IMMED_DISC_IND_FAILED_STATUS,"Send DISC_IND case1 failed, status=%d")
    TRC_MSG(BT_SIMAP_SEND_GRACEFUL_DISC_IND_FAILED_STATUS,"Graceful DISC ind failed, status=%d")
    TRC_MSG(BT_SIMAP_CURRENT_DISC_TYPE,"BT SIMAP current disc_type=%d")
    TRC_MSG(BT_SIMAP_MAKE_SIMCARD_UNAVAILABLE_THEN_SEND_STATUS_IND,"BT SIMAP PTS PRS Test Case: Send STATUS IND with unavailable")
    //TRC_MSG(BT_SIMAP_SIMSRVATRRSP_NO_PKT,"In SIM_ServerAtrRsp(): no packets, clear server flags")
    //TRC_MSG(BT_SIMAP_SIMSRVAPDURSP_NO_PKT,"In SIM_ServerApduRsp(): no packtes, clear server flags")
    //TRC_MSG(BT_SIMAP_SIMSRVSIMONRSP_NO_PKT,"In SIM_ServerSimOnRsp(): no packets, clear server flags")
    //TRC_MSG(BT_SIMAP_SIMSRVSIMOFFRSP_NO_PKT,"In SIM_ServerSimOffRsp(): no packets, clear server flags")
    TRC_MSG(SIMULATE_MMI_TO_SEND_DEACTIVATE_MSG_TO_SIMAP,"Simulate MMI to send DeActivate Msg to SIMAP")
    TRC_MSG(NEW_CURRENT_T_TYPExD,"New current T type=%d")
    TRC_MSG(CHANGE_TO_IT_MODE,"Change to IT mode")
    TRC_MSG(NEW_SUPPORTED_T_TYPExD,"New supported T type=%d")
    TRC_MSG(EXIT_SNIFF_MODE_FOR_SAP_CONNECTION,"Exit Sniff mode for SAP connection")
    TRC_MSG(NEW_SIMCARDSTATUSxXxXxX,"New simcardstatus=0x%x,%x,%x")
    TRC_MSG(SIMULATE_MMI_TO_SEND_ACTIVATE_MSG_TO_SIMAP,"Simulate MMI to send Activate Msg to SIMAP")
    TRC_MSG(SIMULATE_MMI_SEND_DISC_REQ_WITH_GRACEFUL_TYPE_TO_BT,"Simulate MMI: send DISC_REQ with Graceful type to BT")
    TRC_MSG(SIMULATE_MMI_SEND_DISC_REQ_WITH_IMMEDIATE_TYPE_TO_BT,"Simulate MMI: send DISC_REQ with Immediate type to BT")
    TRC_MSG(SIMULATE_MMI_TO_SEND_AUTHORIZATION_RESPONSE_MSG_TO_SIMAP,"Simulate MMI to send AUTH_RSP Msg to SIMAP, result=%d")
    TRC_MSG(SIMULATE_SIM_CARD_NOT_ACCESSIBLE_FOR_PTS_TESTING,"Simulate SIM card is not accessible and send STATUS_IND for PTS testing")

    TRC_MSG(BT_SIMAP_SIMCARDREADER_STATUS, "[BT SIMAP]current_simcardreader_status=0x%x")
    TRC_MSG(BT_SIMAP_SEND_PACKET, "[BT SIMAP]SimFindFreeAndSendPacket:MsgType=%d, Parm1Type=%d, parm1=%d, Parm2Type=%d, parm2=%d")
    TRC_MSG(BT_SIMAP_SEND_ATRRSP_ERR, "[BT SIMAP]SimServerSendAtrRspErr: Result=%d")
    TRC_MSG(BT_SIMAP_SEND_ATRRSP, "[BT SIMAP]SimServerSendAtrRspNoErr: Result=%d, Atr=%s")
    TRC_MSG(BT_SIMAP_RFSEND_RETURN, "[BT SIMAP]RF_SendData return: %d")
    TRC_MSG(BT_SIMAP_CLOSE_RFCOMM_CHNL, "[BT SIMAP]RF_CloseChannel... ")
	TRC_MSG(BT_SIMAP_RESET_IND, "[simap]bt_simap_reset: SIM(simServer)[0].state=%d")
	TRC_MSG(BT_SIMAP_NOTIFY_APP_RESET_IND, "[simap]notify app: SIMAP_EVENT_BT_RESET_IND")

	TRC_MSG(BT_SIMAP_ADP_INIT, "[simap_adp]simap_adp_init")
	TRC_MSG(BT_SIMAP_ADP_DEINIT, "[simap_adp]simap_adp_deinit")
	TRC_MSG(BT_SIMAP_ADP_RESET, "[simap_adp]simap_adp_reset...")
	TRC_MSG(BT_SIMAP_ADP_HDL_MSG, "[simap_adp]btmtk_adp_simap_handle_message: %d")


/* SIMAP TRACE END */

/* DUN TRACE START */
    TRC_MSG(BT_DG_ACITVATE_REQ, "=====[BTAP][BT_DG_ACITVATE_REQ]=====")   
    TRC_MSG(BT_DG_DEACITVATE_REQ, "=====[BTAP][BT_DG_DEACITVATE_REQ]=====")   
    TRC_MSG(BT_DG_DEACITVATE_CFM, "=====[BTAP][BT_DG_DEACITVATE_CFM]=====")   
    TRC_MSG(BT_DG_CONNECT_IND, "=====[BTAP][BT_DG_CONNECT_IND]=====")   
    TRC_MSG(BT_DG_DATA_REQ, "=====[BTAP][BT_DG_DATA_REQ]===== payload: %d")   
    TRC_MSG(BT_DG_DATA_CFM, "=====[BTAP][BT_DG_DATA_CFM]=====")   
    TRC_MSG(BT_DG_DATA_IND, "=====[BTAP][BT_DG_DATA_IND]===== payload: %d")   
    TRC_MSG(BT_DG_DATA_RES, "=====[BTAP][BT_DG_DATA_RES]=====")   
    TRC_MSG(BT_DG_CONTROL_REQ, "=====[BTAP][BT_DG_CONTROL_REQ]=====")   
    TRC_MSG(BT_DG_CONTROL_IND, "=====[BTAP][BT_DG_CONTROL_IND]===== modemStatus=0x%x")   
    TRC_MSG(BT_DG_PORTNEG_IND, "=====[BTAP][BT_DG_PORTNEG_IND]=====")   
    TRC_MSG(BT_DG_PORTNEG_RES, "=====[BTAP][BT_DG_PORTNEG_RES]=====")   
    TRC_MSG(BT_DG_DISCONNECT_REQ, "=====[BTAP][BT_DG_DISCONNECT_REQ]=====")   
    TRC_MSG(BT_DG_DISCONNECT_IND, "=====[BTAP][BT_DG_DISCONNECT_IND]=====")   
/* DUN TRACE END */


/* AVRCP TRACE START */
    TRC_MSG( BT_AVRCP_ROLE_STATE	, "=====[AVRCP][ AVRCP Role = [%d], State = [%d] ]=====" )
    TRC_MSG( BT_AVRCP_AVTIVATE_DEREGISTER_RESULT	, "=====[AVRCP][ACTIVATE][ AVRCP_Deregister() Result ==> Result = [%d] ]=====" )
    TRC_MSG( BT_AVRCP_AVTIVATE_REGISTER_RESULT	, "=====[AVRCP][ACTIVATE][ AVRCP_Register() Result ==> Chnl = [%d], Result = [%d] ]=====" )
    TRC_MSG( BT_AVRCP_DEAVTIVATE_DEREGISTER_RESULT	, "=====[AVRCP][DEACTIVATE][ AVRCP_Deregister() Result ==> Chnl = [%d], Result = [%d] ]=====" )
    TRC_MSG( BT_AVRCP_CONNECT_RESULT	, "=====[AVRCP][CONNECT][ AVRCP_Connect() Result ==> Chnl = [%d], Result = [%d] ]=====" )
    TRC_MSG( BT_AVRCP_CONNECT_IND_RES_RESULT	, "=====[AVRCP][CONNECT_IND_RES][ AVRCP_ConnectRsp() Result ==> Chnl = [%d], Result = [%d] ]=====" )
    TRC_MSG( BT_AVRCP_DISCONNECT_RESULT	, "=====[AVRCP][DISCONNECT][ AVRCP_Disconnect() Result ==> Chnl = [%d], Result = [%d] ]=====" )
    TRC_MSG( BT_AVRCP_CMD_REQ_RESULT	, "=====[AVRCP][CMD_REQ][ AVRCP_SendCommand() Result ==> Chnl = [%d], Result = [%d] ]=====" )
    TRC_MSG( BT_AVRCP_CMD_RSP_IND_RESULT	, "=====[AVRCP][CMD_RSP_IND][ AVRCP_SendResponse() Result ==> Chnl = [%d], Result = [%d] ]=====" )
    TRC_MSG( BT_AVRCP_CALLBACK	, "=====[AVRCP][CALLBACK][ avrcp_adp_callback() ==> Events = [%d] ]=====" )
    TRC_MSG( AVC_SENDCONTINUEBT_DEBUGx02X,"AVC_SendContinue:%02x")
    TRC_MSG( SEND_CONTINUE_CHNL_STATE_IS_AVC_TRANS_STATE_FIRST,"Send Continue, chnl state is AVC_TRANS_STATE_FIRST")
    TRC_MSG( BT_AVC_TX_TIMEOUT, "AVC:  TX Timeout and aclTxPacketsLeft=%d" )        
    TRC_MSG( BT_AVCRCP_DISCONNECT_IN_FRAGEMENT, "[AVRCP] disconnect within a fragmented packet:0x%x" )
    TRC_MSG( AVRCP_CALLBACK_EVENT_CONNECT	, "=====[AVRCP][CALLBACK][ avrcp_adp_callback_connect() ==> Role = [%d], State = [%d] ]=====" )
    TRC_MSG( AVRCP_CALLBACK_EVENT_CONNECT_IND	, "=====[AVRCP][CALLBACK][ avrcp_adp_callback_connect_ind() ==> Role = [%d], State = [%d] ]=====" )
    TRC_MSG( AVRCP_CALLBACK_EVENT_CONNECT_IND_RSP	, "=====[AVRCP][CALLBACK][ avrcp_adp_callback_connect_ind Result ==> Result = [%d] ]=====" )   
    TRC_MSG( AVRCP_CALLBACK_EVENT_DISCONNECT	, "=====[AVRCP][CALLBACK][ avrcp_adp_callback_disconnect() ==> Role = [%d], State = [%d] ]=====" )
    TRC_MSG( AVRCP_CALLBACK_EVENT_CMD_RSP	, "=====[AVRCP][CALLBACK][ avrcp_adp_callback_cmd_rsp() ==> Role = [%d], State = [%d], Event = [%d] ]=====" )
    TRC_MSG( AVRCP_CALLBACK_EVENT_CMD_IND	, "=====[AVRCP][CALLBACK][ avrcp_adp_callback_cmd_ind() ==> Role = [%d], State = [%d] ]=====" )
    TRC_MSG( AVRCP_CALLBACK_EVENT_CMD_MORE_DATA	, "=====[AVRCP][CALLBACK][ avrcp_adp_callback_more_data() ==> Role = [%d], State = [%d] ]=====" )
    TRC_MSG( AVRCP_CALLBACK_EVENT_CMD_TX_DONE	, "=====[AVRCP][CALLBACK][ avrcp_adp_callback_tx_done() ==> Role = [%d], State = [%d], ctype = [%d]]=====" )
    TRC_MSG( BT_AVRCP_UTIL_REGISTERCB , "[AVRCP] UTIL_REGISTERCB" )
    TRC_MSG( BT_AVRCP_UTIL_INIT , "[AVRCP] UTIL_INIT" )
    TRC_MSG( BT_AVRCP_UTIL_ACTIVATE_REQ , "[AVRCP] UTIL_ACTIVATE_REQ num:%d role:%d" )
    TRC_MSG( BT_AVRCP_UTIL_DEACTIVATE_REQ , "[AVRCP] UTIL_DEACTIVATE_REQ num:%d" )
    TRC_MSG( BT_AVRCP_UTIL_CONNECT_REQ , "[AVRCP] UTIL_CONNECT_REQ num:%d role:%d" )
    TRC_MSG( BT_AVRCP_UTIL_CONNECT_IND_RES , "[AVRCP] UTIL_CONNECT_IND_RES num:%d accept:%d" )
    TRC_MSG( BT_AVRCP_UTIL_DISCONNECT_REQ , "[AVRCP] UTIL_DISCONNECT_REQ num:%d " )
    TRC_MSG( BT_AVRCP_UTIL_CMD_FRAME_REQ , "[AVRCP] UTIL_CMD_FRAME_REQ num:%d ctype:%d" )
    TRC_MSG( BT_AVRCP_UTIL_CMD_FRAME_RSP_IND ,   "[AVRCP] UTIL_CMD_FRAME_RSP_IND num:%d ctype:%d" )
    TRC_MSG( BT_AVRCP_UTIL_APP_CALLBACK ,   "[AVRCP] UTIL_APP_CALLBACK event:%d" )
    TRC_MSG( BT_AVRCP_SDP_REGISTER ,   "[AVRCP] SDP_REGISTER role:%d" )
    TRC_MSG( BT_AVRCP_SDP_DEREGISTER ,   "[AVRCP] SDP_DEREGISTER role:%d" )
    TRC_MSG( BT_AVRCP_SDP_CREATEACL ,   "[AVRCP] CREATE_ACL status:%d" )
    TRC_MSG( BT_AVRCP_SDP_START_QUERY ,   "[AVRCP] START_QUERY role:0x%x" )
    TRC_MSG( BT_AVRCP_SDP_QUERY_CB ,   "[AVRCP] QUERY_CB result:%d" )
    TRC_MSG( BT_AVRCP_SDP_CONNECT_TIMEOUT ,   "[AVRCP] CONNECT_TIMEOUT try to connect psmtype:0x%x" )
    TRC_MSG( BT_AVRCP_BROWSE_CALLBACK , "=====[AVRCP][BWS][CALLBACK][ avrcp_browse_callback() ==> Events = [%d] ]=====" )
    TRC_MSG( BT_AVRCP_BROWSE_CALLBACK_CONNECT	, "=====[AVRCP][BWS][CALLBACK][ avrcp_adp_callback_connect() ==> Role = [%d], mtu = [%d] ]=====" )
    TRC_MSG( BT_AVRCP_BROWSE_CALLBACK_CONNECT_IND	, "=====[AVRCP][BWS][CALLBACK][ avrcp_adp_callback_connect_ind() ==> Role = [%d], mtu = [%d] ]=====" )
    TRC_MSG( BT_AVRCP_BROWSE_CALLBACK_CONNECT_IND_RSP	, "=====[AVRCP][BWS][CALLBACK][ avrcp_adp_callback_connect_ind Result ==> Result = [%d] ]=====" )   
    TRC_MSG( BT_AVRCP_BROWSE_CALLBACK_DISCONNECT	, "=====[AVRCP][BWS][CALLBACK][ avrcp_adp_callback_disconnect() ==> Role = [%d], State = [%d] ]=====" )
    TRC_MSG( BT_AVRCP_CONTINUE_TIMEOUT , "[AVRCP][WRN] AvctpContinueTimeout chnl:0x%x packet:0x%x" )
    TRC_MSG( BT_AVRCP_CONTINUE_SEND_FAIL , "[AVRCP] Fail to send continue packet status:%d" )    
    TRC_MSG( BT_AVRCP_CONNECT_CHECK , "[AVRCP][WRN] CONNECTED Error. Has queued packets in txPacketList packet:0x%x" )
    TRC_MSG( BT_AVRCP_DISCONNECT_CHECK , "[AVRCP][WRN] Has queued packets in txPacketList packet:0x%x" )
    TRC_MSG( BT_AVRCP_TX_FINISH , "[AVRCP][UTIL] AVRCP_EVENT_TX  finish curQueueFrame:0x%x" )
    TRC_MSG( BT_AVRCP_UPDATE_TXSTATE , "[AVRCP] Update curTxState:%d" )
    TRC_MSG( BT_AVRCP_BWS_UPDATE_TXSTATE , "[AVRCP][BWS] Update curBrowseTxState:%d" )
    TRC_MSG( BT_AVRCP_BWS_NO_CLEANUP_PACKET , "[AVRCP][BWS] Not empty! chnl->curBrowseQueueFrame:0x%x" )    
    TRC_MSG( BT_AVRCP_SEND_NEXT_PACKET , "[AVRCP][UTIL] Send Next queued packet:0x%x status:%d" )
    TRC_MSG( BT_AVRCP_FAIL_NEXT_PACKET , "[AVRCP][UTIL] Fail Send next browse packet:0x%x" )
    TRC_MSG( BT_AVRCP_TX_FINISH_NOT_EMPTY , "[AVRCP] Tx-Finish but QueueFrame Not Empty. parms.event:%d curQueueFrame:0x%x" )
    TRC_MSG( BT_AVRCP_BWS_AVCTP_CALLBACK , "[AVRCP][BWS][CB] AvrcpBrowseAvctpCallback event:%d" )
    TRC_MSG( BT_AVRCP_BWS_CONNECT_CHECK , "[AVRCP][WRN] Has queued browse packets in txBrowsePacketList packet:0x%x" )
    TRC_MSG( BT_AVRCP_BWS_WRONG_CHANNEL , "[AVRCP][BWS] Receive browse packet in AVRCP channel. pdu-id:%d" )
    TRC_MSG( BT_AVRCP_DISC_FLAG_IS , "[AVRCP][BWS] discFlag is True. Disconnect the channel" )
    TRC_MSG( BT_AVRCP_BWS_DISC_CHECK , "[AVRCP][WRN] Has queued browse packets in txBrowse PacketList packet:0x%x" )
    TRC_MSG( BT_AVRCP_BWS_AUTO_ACCEPT , "[AVRCP][BWS] Auto accept the browse channel !" )
    TRC_MSG( BT_AVRCP_BWS_REJECT_CONNECTION , "[AVRCP][BWS] Reject the browse channel signal-state:%d !" )
    TRC_MSG( BT_AVRCP_BWS_FRAGMENT_PACKET_WRN , "[AVRCP][BWS][WRN] A fragmented browse packet !" )
    TRC_MSG( BT_AVRCP_BWS_IGNORE_FRAGMENT , "[AVRCP][BWS][WRN] Ignore a fragmented browsed packet !" )
    TRC_MSG( BT_AVRCP_BWS_TX_FINISH , "[AVRCP][UTIL][BWS] AvrcpBrowseAvctpCallback AVRCP_EVENT_TX_DONE release:0x%x!" )
    TRC_MSG( BT_AVRCP_BWS_NEXT_PACKET , "[AVRCP][UTIL][BWS] Tx_done send next browse queued packet:%x status:%d" )
    TRC_MSG( BT_AVRCP_BWS_FAIL_NEXT , "[AVRCP][UTIL][WRN] Fail to send next browse packet:0x%x" )
    TRC_MSG( BT_AVRCP_BWS_REGISTER_FAIL , "[AVRCP][BWS] Register Browse callback fail BtStatus:%d" )
    TRC_MSG( BT_AVRCP_COMPOSE_SINGLE_CMD , "[AVRCP] ComposeSingleAVCTP cmd ctype:%d u2DataOffset:%d ctype:%d" )
    TRC_MSG( BT_AVRCP_WRONG_PASSTHRU_SIZE , "[AVRCP][ERR] Wrong Pass packet size! Offset:%d operandLen:%d maxMtu:%d" )
    TRC_MSG( BT_AVRCP_WRONG_QUEUE_PACKET_TYPE , "[AVRCP][ERR] Wrong packet type ! %d" )
    TRC_MSG( BT_AVRCP_COMPOSE_SINGLE_RSP , "[AVRCP] ComposeSingleAVCTP RSP ctype:%d u2DataOffset:%d ctype:%d" )
    TRC_MSG( BT_AVRCP_SEND_QUEUE_PACKET , "[AVRCP] AVRCP_SendQueuePacket state:%d data_len:%d" )
    TRC_MSG( BT_AVRCP_CMD_TYPE_NOT_SINGLE , "[AVRCP] Cmd Packet type is not single type:%d !" )
    TRC_MSG( BT_AVRCP_PUT_PACKET_TO_QUEUELIST , "[AVRCP][UTIL] Queue a packet:0x%x " )
    TRC_MSG( BT_AVRCP_CONTINUE_QUEUE_PACKET , "[AVRCP] AVRCP_ContinueQueuePacket state:%d" )
    TRC_MSG( BT_AVRCP_CONTINUE_QUEUE_FAIL , "[AVRCP][UTIL] Fail to continue packet TxState:%d" )
    TRC_MSG( BT_AVRCP_BWS_SEND_QUEUE_PACKET , "[AVRCP][BWS] SendBrowseQueuePacket curBrowseTxState:%d" )
    TRC_MSG( BT_AVRCP_BWS_PACKET_TOO_LARGE , "[AVRCP][UTIL][BWS] Packet size is too larget mtu:%d data_len:%d" )
    TRC_MSG( BT_AVRCP_BWS_PUT_PACKET_TO_QUEUELIST , "[AVRCP][UTIL][BWS] Queue a packet:0x%x" )
    TRC_MSG( BT_AVRCP_GET_SINGLE_AVRCP_MTU , "[AVRCP] GetSinglePacketMtu u2Max:%d bBrowse:%d" )
    TRC_MSG( BT_AVRCP_CMGR_CALLBACK , "[AVRCP][CB] AvrcpCmgrCallback event:%d" )
    TRC_MSG( BT_AVRCP_SDP_TG_CALLBACK , "[AVRCP][CB] avrcpQueryTGCallback sdp search result:%d attr-indx:%d" )
    TRC_MSG( BT_AVRCP_SDP_TG_INFO, "[AVRCP] SDP TG INFO avail:%d ver:0x%x featuer:0x%x bws:0x%x" )
    TRC_MSG( BT_AVRCP_SDP_CT_CALLBACK , "[AVRCP][CB] avrcpQueryCTCallback sdp search result:%d attr-indx:%d" )
    TRC_MSG( BT_AVRCP_SDP_CT_INFO, "[AVRCP] SDP CT INFO avail:%d ver:0x%x featuer:0x%x bws:0x%x" )    
    TRC_MSG( BT_AVRCP_PARSE_RSP_FAIL , "[AVRCP] Fail to parse the response packet pdu_id:%d" )
    TRC_MSG( BT_AVRCP_DISC_BWS_CHANNEL , "[AVRCP][WRN] Browse channal is existed. Disconnect it! cntx:0x%x" )
    TRC_MSG( BT_AVRCP_UTIL_PICK_PACKET , "[AVRCP][UTIL] AVRCP_UitlCmdFrame select a packet:0x%x" )
    TRC_MSG( BT_AVRCP_UTIL_INSERT_PACKET , "[AVRCP][UTIL] Insert freePacketList:0x%x packet:0x%x packet->data:0x%x" )
    TRC_MSG( BT_AVRCP_UTIL_RSP_PICK_PACKET , "[AVRCP][UTIL] AVRCP_UitlCmdFrameRspInd select a packet:%x" )
    TRC_MSG( BT_AVRCP_UTIL_REJECT_PICK_PACKET , "[AVRCP][UTIL] AVRCP_UtilSendAVRCPReject select a packet:%x" )
    TRC_MSG( BT_AVRCP_UTIL_BWS_PICK_PACKET , "[AVRCP][UTIL][BWS] AVRCP_UitlCmdFrame select a packet:%x" )
    TRC_MSG( BT_AVRCP_UTIL_BWS_INSERT_PACKET , "[AVRCP][UTIL][BWS] Insert freePacketList:0x%x packet:0x%x packet->data:0x%x" )
    TRC_MSG( BT_AVRCP_UTIL_BWS_REJECT , "[AVRCP][UTIL][BWS] AVRCP_UtilSendAVRCPBrowseReject select a packet:%x" )
    TRC_MSG( BT_AVRCP_UTIL_NO_AVAILABLE , "[AVRCP][WRN] No available packet for c_type:%d!" )    
    TRC_MSG( BT_AVRCP_SEND_CMD_PDU_FAIL , "[AVRCP] Send cmd fail pdu_id:%d" )
    TRC_MSG( BT_AVRCP_BWS_SEND_CMD_PDU_FAIL , "[AVRCP][BWS] send cmd fail pdu_id:%d" )
    TRC_MSG( BT_AVRCP_PARSE_AV13_PDU_FAIL , "[AVRCP] Fail to parse avrcp specific cmd:%d param_len:%d" )
    TRC_MSG( BT_AVRCP_CB_TX_ERROR , "[AVRCP][WRN] AVRCP_EVENT_TX_ERROR chnl->curQueueFrame:0x%x Parms->p.queueFrame:%x" )
    TRC_MSG( BT_AVRCP_NOT_SIG_COMPANY_ID , "[AVRCP][WRN] opcode:0 but company id is %x%x%x" )
    TRC_MSG( BT_AVRCP_UNKNOW_AV_TYPE , "[AVRCP] Uknow packet type. Unable to parse it opcode:%d" )
    TRC_MSG( BT_AVRCP_PDUID_NOT_MATCH , "[AVRCP] Not match start_pdu_id:%d pdu_id:%d" )
    TRC_MSG( BT_AVRCP_ABORT_CONTINUE , "[AVRCP][UTIL] Abort continue packet:%x" )
    TRC_MSG( BT_AVRCP_REJECT_BWS_PACKET , "[AVRCP][WRN] Receive browse pdu-id in AVCTP channel ! reject it" )
    TRC_MSG( BT_AVRCP_CONTI_NO_DATA , "[AVRCP] No data to send !" )
    TRC_MSG( BT_AVRCP_TOO_MANY_ITEM , "[AVRCP][WRN] Too many item num:%d max:%d" )
    TRC_MSG( BT_AVRCP_ENCODE_FOLDER_ITEM , "[AVRCP] Encode tyep:%d len:%d offset:%d" )
    TRC_MSG( BT_AVRCP_TOO_LARGE_LENGTH , "[AVRCP] Too large name_length:%d max:%d" )
    TRC_MSG( BT_AVRCP_WRONG_DATA_OFFSET , "[AVRCP] Wrong name_offset:%d" )
    TRC_MSG( BT_AVRCP_ENCODE_FOLDER_ITEM_FAIL , "[AVRCP][WRN] Fail to encode the folder item type:%d" )
    TRC_MSG( BT_AVRCP_NO_MORE_DATA_SPACE , "[AVRCP] No space for more text data" )
    TRC_MSG( BT_AVRCP_INIT_PICK_PACKET , "[AVRCP][UTIL] Init insert free packet:0x%x data:0x%x" )
    TRC_MSG( BT_AVRCP_SEND_REJECT_PACKET , "[AVRCP] AVRCP_UtilSendAVRCPReject chnl_num:%d status:%d" ) 
    TRC_MSG( BT_AVRCP_BWS_SEND_REJECT_PACKET , "[AVRCP][BWS] AVRCP_UtilSendAVRCPBrowseReject chnl_num:%d status:%d" )
    TRC_MSG( BT_AVRCP_EMPTY_PACKET_LIST , "[AVRCP][WRN] Packet list is empty !" )
    TRC_MSG( BT_AVRCP_MARSHAL_BUFFER_WRN , "[AVRCP][WRN] Marshaling buffer is small. buffer_len:%d max:%d" )
    TRC_MSG( BT_AVRCP_CONTINUE_NO_BUFFER , "[AVRCP][WRN] Too much data Abort the transmission parm_len:%d cur_data_offset:%d" )
    TRC_MSG( BT_AVRCP_NOT_IN_MORE_STATE , "[AVRCP][WRN] Receive more data but AVRCP don't need more data !" )
    TRC_MSG( BT_AVRCP_THROW_MORE_DATA , "[AVRCP][WRN] Current Data:%d operandLen:%d MaxSize:%d" )
    TRC_MSG( BT_AVRCP_AVCTP_AVC_RESPONSE , "[AVRCP] AvrcpHandleCBAVCResponse opcode:%d operandLen:%d" )
    TRC_MSG( BT_AVRCP_PDU_LENGTH_NOT_MATCH , "[AVRCP][WRN] pdu_parm_len:%d parm_len:%d" )
    TRC_MSG( BT_AVRCP_CB_CMD_IND , "[AVRCP] AvrcpHandleCBAVCCommandInd opcode:0x%x operandLen:%d" )
    TRC_MSG( BT_AVRCP_RECEIVE_CONTINUE_PACKET , "[AVRCP] Receives OPCODE_REQUEST_CONTINUING pdu-id parm_len:%d" )
    TRC_MSG( BT_AVRCP_UNKNOW_FOLDER_ITEM , "[AVRCP][WRN] Unable to parse the unkown item type:%d !" )
    TRC_MSG( BT_AVRCP_PARSE_REG_EVENT_FAIL , "[AVRCP] Unable parse register-noti response packet event_id:%d len:%d" )
    TRC_MSG( BT_AVRCP_SMALL_PACKET_SIZE_FAIL , "[AVRCP] AVRCP Packet size too small size:%d" )
    TRC_MSG( BT_AVRCP_BWS_CMD_RSP , "[AVRCP][BWS] AVRCP_UtilAVRCPBrowseCmdBufferRsp" )
    TRC_MSG( BT_AVRCP_RECEIVE_RSP , "[AVRCP] AVRCP_UtilAVRCPCmdBufferRsp chnl_num:%d c_type:%d pdu_id:%d " )
    TRC_MSG( BT_AVRCP_SEND_RSP , "[AVRCP] AVRCP_UtilCmdBufferRsp chnl_num:%d c_type:%d pdu_id:%d " )
    TRC_MSG( BT_AVRCP_SEND_GENERIC_RSP , "[AVRCP] AVRCP_UtilAVRCPCmdBufferRsp chnl_num:%d c_type:%d pdu_id:%d " )    
    TRC_MSG( BT_AVRCP_STATUS_REPORT_FAIL , "[AVRCP] Not expect status:%d" )
    TRC_MSG( BT_AVRCP_RSP_PACKET_INFO , "[AVRCP] Recevie format:%d response:%d parm_len:%d more:%d" )
    TRC_MSG( BT_AVRCP_STATUS_REPORT , "[AVRCP] Return status:%d" )
    TRC_MSG( BT_AVRCP_REDUCE_ITEM_LENGTH , "[AVRCP] Element %d value_len is %d. reduce it to %d" )
    TRC_MSG( BT_AVRCP_WRONG_ITEM_DATA_OFFSET , "[AVRCP] Element %d value_offset is %d. reduce it to 1" )
    TRC_MSG( BT_AVRCP_PACKET_START_TIMER , "[AVRCP][CTIMER] StartTimer" )    
    TRC_MSG( BT_AVRCP_PACKET_CANCEL_TIMER , "[AVRCP][CTIMER] CancelTimer startTimer:%d CmdTimeout:%d" )    
    TRC_MSG( BT_AVRCP_PACKET_TIMER_TIMEOUT , "[AVRCP] Element %d value_offset is %d. reduce it to 1" )    
    TRC_MSG( BT_AVRCP_IGNORE_CONTINUE_EVENT , "[AVRCP][WRN] Ignore BTAVRCP_EVENT_REQUEST_CONTINUING_CNF" )
    TRC_MSG( BT_AVRCP_CMD_IND_RECEIVER , "[AVRCP] Receive cmd packet chnl_num:%d type:%d size:%d" )
    TRC_MSG( BT_AVRCP_AVC_HEADER_NOT_MATCH , "[AVRCP][WRN] AV Header UNIT not match " )
    TRC_MSG( BT_AVRCP_CMD_IND_DISPATCHER , "[AVRCP] CBAVRCPCmdInd_Dispatcher chnl_num:%d pdu:%d parm_len:%d" )
 
/* AVRCP TRACE END */

/* AVCTP TRACE START */
    TRC_MSG( BT_AVCTP_INIT_LOG ,   "[AVCTP] AVCTP_Init" )
    TRC_MSG( BT_AVCTP_DEINIT_LOG ,   "[AVCTP] AVCTP_Deinit" )
    TRC_MSG( BT_AVCTP_REGISTER_LOG ,   "[AVCTP] Register chnl:%d callaback:0x%x" )
    TRC_MSG( BT_AVCTP_DEREGISTER_LOG ,   "[AVCTP] Deregister chnl:%d" )
    TRC_MSG( BT_AVCTP_DEREGISTER_ALL_LOG ,   "[AVCTP] Deregister all" )
    TRC_MSG( BT_AVCTP_CONNECT_API_LOG ,   "[AVCTP] Connect API psmtype:%d" )
    TRC_MSG( BT_AVCTP_CONNECT_RSP_API_LOG ,   "[AVCTP] Connect response API" )
    TRC_MSG( BT_AVCTP_DISCONNECT_API_LOG ,   "[AVCTP] Disconnect API" )
    TRC_MSG( BT_AVCTP_SEND_COMMAND_API_LOG ,   "[AVCTP] SEND_COMMAND_API" )
    TRC_MSG( BT_AVCTP_SEND_RESPONSE_LOG ,   "[AVCTP] SEND_RESPONSE" )
    TRC_MSG( BT_AVCTP_SEND_RAWMESSAGE_LOG ,   "[AVCTP] SEND_RAWMESSAGE" )
    TRC_MSG( BT_AVCTP_STATE_DISCONNECTED_LOG ,   "[AVCTP] StateMachine Dsiconnected chid:0x%x event:%d" )
    TRC_MSG( BT_AVCTP_STATE_CONN_PENDING_LOG ,   "[AVCTP] StateMachine CONN_PENDING chid:0x%x event:%d" )
    TRC_MSG( BT_AVCTP_STATE_DISCON_PENDING_LOG ,   "[AVCTP] StateMachine DISCON_PENDING chid:0x%x event:%d" )
    TRC_MSG( BT_AVCTP_STATE_CONN_DISCONNECTED_LOG ,   "[AVCTP] StateMachine CONN_DISCONNTED chid:0x%x event:%d" )
    TRC_MSG( BT_AVCTP_STATE_CONN_INCOMING_LOG ,   "[AVCTP] StateMachine CONN_INCOMING chid:0x%x event:%d" )
    TRC_MSG( BT_AVCTP_STATE_DISC_PENDING_LOG ,   "[AVCTP] StateMachine DISC_PENDING chid:0x%x event:%d" )
    TRC_MSG( BT_AVCTP_STATE_DISC_INCOMING_LOG ,   "[AVCTP] StateMachine DISC_INCOMING chid:0x%x event:%d" )
    TRC_MSG( BT_AVCTP_STATE_CONNECTED_LOG ,   "[AVCTP] StateMachine CONNECTED chid:0x%x event:%d" )
    TRC_MSG( BT_AVCTP_STATE_INIT_MACHINE_LOG ,   "[AVCTP] STATE_INIT_MACHINE " )
    TRC_MSG( BT_AVCTP_CONN_FIND_CHANNEL_LOG ,   "[AVCTP] Find a avctp Channel for address avctp_chnl:%x psm:0x%x" )
    TRC_MSG( BT_AVCTP_CONN_FIND_FREECHANNEL_LOG ,   "[AVCTP] Find a free avctp Channel at avctp_chnl:%x psm:0x%x" )
    TRC_MSG( BT_AVCTP_CONN_ASSIGN_CHANNEL_LOG ,   "[AVCTP] Assign AVCTP Channel to l2Channel psm:0x%x chid:0x%x" )
    TRC_MSG( BT_AVCTP_L2CALLBACK_LOG ,   "[AVCTP] AVCTP_L2Callback l2event:%d" )
    TRC_MSG( BT_AVCTP_L2CALLBACK_REJECT_LOG ,   "[AVCTP] AVCTP_L2Callback Reject psm:0x%x" )
    TRC_MSG( BT_AVCTP_L2CALLBACK_NEW_CONNECTE_LOG ,   "[AVCTP] AVCTP_L2Callback handle new connect chid:0x%x avctp_chnl:%x" )
    TRC_MSG( BT_AVCTP_CONN_FREE_CHANNEL_LOG ,   "[AVCTP] Free AVCTP channel chid:0x%x " )
    TRC_MSG( BT_AVCTP_CONNECT_REQ_LOG ,   "[AVCTP] AVCTP connect req num:%d" )
    TRC_MSG( BT_AVCTP_DISCONNECT_REQ_LOG ,   "[AVCTP] AVCTP disconnect req chid:%x" )
    TRC_MSG( BT_AVCTP_CONNECT_RSP_LOG ,   "[AVCTP] AVCTP connect response accept:%d chid:0x%x" )
    TRC_MSG( BT_AVCTP_CONN_CB ,   "[AVCTP] AVCTP signal Callback avctpevent:%d" )
    TRC_MSG( BT_AVCTP_MSG_CB ,   "[AVCTP] AVCTP data Callback avevent:%d" )
    TRC_MSG( BT_AVCTP_MSG_CB_IGNORE_EVENT ,   "[AVCTP] AVCTP data Callback ignore txState:%d" )
    TRC_MSG( BT_AVCTP_MSG_HANDLE_COMMAND ,   "[AVCTP] AVCTP Msg Handle command pktype:%d rxId:%d" )
    TRC_MSG( BT_AVCTP_MSG_HANDLE_REJECT ,   "[AVCTP] AVCTP Msg Handle reject rsp pktype:%d" )
    TRC_MSG( BT_AVCTP_MSG_HANDLE_RESPONSE ,   "[AVCTP] AVCTP Msg Handle response pktype:%d" )
    TRC_MSG( BT_AVCTP_MSG_SEND_COMMAND ,   "[AVCTP] AVCTP Msg Send command txState:%d" )
    TRC_MSG( BT_AVCTP_MSG_INIT, "[AVCTP] AvtpMsgInit" )
/* AVCTP TRACE END */



/* GAVDP TRACE START */
    TRC_MSG( BT_GAVDP_FIND_CMGR_NODE, "[GAVDP][GavdpFindCmgrNode]+++ cmgr handler addr: 0x%08x")
    TRC_MSG( BT_GAVDP_FIND_CMGR_FOUND, "[GAVDP][GavdpFindCmgrNode] cmgrNode is found")    
    TRC_MSG( BT_GAVDP_FIND_CMGR_NOT_FOUND, "[GAVDP][GavdpFindCmgrNode][ERR]+++ cmgrNode is not found")
    
    TRC_MSG( BT_GAVDP_FIND_CHNL_NODE, "[GAVDP][GavdpFindChnlNode]+++ channel addr: 0x%08x")
    TRC_MSG( BT_GAVDP_FIND_CHNL_FOUND, "[GAVDP][GavdpFindChnlNode] chnlNode is found")	
    TRC_MSG( BT_GAVDP_FIND_CHNL_NOT_FOUND, "[GAVDP][GavdpFindChnlNode][ERR] chnlNode is not found")
 
    TRC_MSG( BT_GAVDP_ALL_CMGR_USED, "[GAVDP][GavdpFindFreeCmgrNode][ERR] All cmgrNodes are in used")
	
    TRC_MSG( BT_GAVDP_ALL_CHNL_USED, "[GAVDP][GavdpFindFreeChnlNode][ERR] All chnlNodes are in used")
  
    TRC_MSG( BT_GAVDP_CHNL_FIND_SEP, "[GAVDP][GavdpFindSepByChannel]+++ channel addr: 0x%08x")
    TRC_MSG( BT_GAVDP_CHNL_FIND_SEP_FOUND, "[GAVDP][GavdpFindSepByChannel] SEP is found")
    TRC_MSG( BT_GAVDP_CHNL_FIND_SEP_NOT_FOUND, "[GAVDP][GavdpFindSepByChannel]SEP is not found")

    TRC_MSG( BT_GAVDP_CMGR_FIND_SEP, "[GAVDP][GavdpFindSepByCmgrHdl]+++ cmgr handler addr: 0x%08x")
    TRC_MSG( BT_GAVDP_CMGR_FIND_SEP_FOUND,"[GAVDP][GavdpFindSepByCmgrHdl] SEP is found")
    TRC_MSG( BT_GAVDP_CMGR_FIND_SEP_NOT_FOUND, "[GAVDP][GavdpFindSepByCmgrHdl][ERR] SEP is not found")
 
    TRC_MSG( BT_GAVDP_ID_FIND_SEP, "[GAVDP][GavdpFindSepById] SEP ID: %d")
    TRC_MSG( BT_GAVDP_ID_FIND_SEP_FOUND, "[GAVDP][GavdpFindSepById] SEP is found")
    TRC_MSG( BT_GAVDP_ID_FIND_SEP_NOT_FOUND, "[GAVDP][GavdpFindSepById][ERR] SEP is not found")
 
    TRC_MSG( BT_GAVDP_SEP_AVAILABLE, "[GAVDP][GavdpIsSepAvailable] SEP is available")	
    TRC_MSG( BT_GAVDP_SEP_NOT_AVAILABLE, "[GAVDP][GavdpIsSepAvailable][ERR] SEP is not available")
	
    TRC_MSG( BT_GAVDP_DEV_CONNECTED, "[GAVDP][GavdpIsDevConnected] Dev is connected")
    TRC_MSG( BT_GAVDP_DEV_NOT_CONNECTED, "[GAVDP][GavdpIsDevConnected] Dev is not connected")

    TRC_MSG( BT_GAVDP_LOCAL_SBC_BYTE0, "[GAVDP][GavdpDecideConfig] local codec info:0x%x")
    TRC_MSG( BT_GAVDP_LOCAL_SBC_BYTE1, "[GAVDP][GavdpDecideConfig] local codec info:0x%x")
    TRC_MSG( BT_GAVDP_LOCAL_SBC_BYTE2, "[GAVDP][GavdpDecideConfig] local codec info:0x%x")
    TRC_MSG( BT_GAVDP_LOCAL_SBC_BYTE3, "[GAVDP][GavdpDecideConfig] local codec info:0x%x")
    TRC_MSG( BT_GAVDP_REMOTE_SBC_BYTE0, "[GAVDP][GavdpDecideConfig] remote codec info:0x%x")
    TRC_MSG( BT_GAVDP_REMOTE_SBC_BYTE1, "[GAVDP][GavdpDecideConfig] remote codec info:0x%x")
    TRC_MSG( BT_GAVDP_REMOTE_SBC_BYTE2, "[GAVDP][GavdpDecideConfig] remote codec info:0x%x")
    TRC_MSG( BT_GAVDP_REMOTE_SBC_BYTE3, "[GAVDP][GavdpDecideConfig] remote codec info:0x%x")
    TRC_MSG( BT_GAVDP_CFG_SBC_BYTE0, "[GAVDP][GavdpDecideConfig] config_codec info:0x%x")    
    TRC_MSG( BT_GAVDP_CFG_SBC_BYTE1, "[GAVDP][GavdpDecideConfig] config_codec info:0x%x")
    TRC_MSG( BT_GAVDP_CFG_SBC_BYTE2, "[GAVDP][GavdpDecideConfig] config_codec info:0x%x")
    TRC_MSG( BT_GAVDP_CFG_SBC_BYTE3, "[GAVDP][GavdpDecideConfig] config_codec info:0x%x")
    TRC_MSG( BT_GAVDP_NO_MATCHED_SMAPLING_FREQ, "[GAVDP][GavdpDecideConfig]no matched sampling frequency---")
    TRC_MSG( BT_GAVDP_NO_MATCHED_CH_MODE, "[GAVDP][GavdpDecideConfig][ERR] no matched channel mode---")
    TRC_MSG( BT_GAVDP_NO_MATCHED_BLK_LEN, "[GAVDP][GavdpDecideConfig][ERR] no matched SBC block length---")
    TRC_MSG( BT_GAVDP_NO_MATCHED_SBAND_NUM, "[GAVDP][GavdpDecideConfig][ERR] no matched SBC subband number---")
    TRC_MSG( BT_GAVDP_NO_MATCHED_ALLOC, "[GAVDP][GavdpDecideConfig][ERR] no matched allocated method---")

    TRC_MSG( BT_GAVDP_LINK_AVDTP_CHNL, "[GAVDP][GavdpConnectAvdtpChannel]+++ SigState: %d, SepAddr: 0x%x, SepID: %d, CmdStage: %d, StrmState: %d")
    TRC_MSG( BT_GAVDP_LINK_AVDTP_CHNL_BUSY, "[GAVDP][GavdpConnectAvdtpChanne] status == BT_STATUS_BUSY")
    TRC_MSG( BT_GAVDP_LINK_AVDTP_CHNL_PENDING, "[GAVDP][GavdpConnectAvdtpChanne] status == BT_STATUS_PENDING")
    TRC_MSG( BT_GAVDP_LINK_AVDTP_CHNL_FAILED, "[GAVDP][GavdpConnectAvdtpChanne] [ERR] AVDTP_Connect failed, try to disconnect 4")

    TRC_MSG( BT_GAVDP_DISCOVER_STRM_REQ, "[GAVDP][GavdpDiscoverStreamsReq]+++ SigState: %d, SepAddr: 0x%x, SepID: %d, CmdStage: %d, StrmState: %d")
    TRC_MSG( BT_GAVDP_DISCOVER_STRM_REQ_PENDING, "[GAVDP][GavdpDiscoverStreamsReq] status == BT_STATUS_PENDING")

    TRC_MSG( BT_GAVDP_GET_CAP_REQ, "[GAVDP][GavdpGetCapabilityReq]+++ SigState: %d, SepAddr: 0x%x, SepID: %d, CmdStage: %d, StrmState: %d")
    TRC_MSG( BT_GAVDP_GET_CAP_REQ_PENDING, "[GAVDP][GavdpGetCapabilityReq] status == BT_STATUS_PENDING")
    
    TRC_MSG( BT_GAVDP_SET_CFG_REQ, "[GAVDP][GavdpSetConfigurationReq]+++ SigState: %d, SepAddr: 0x%x, SepID: %d, CmdStage: %d, StrmState: %d")
    TRC_MSG( BT_GAVDP_SET_CFG_REQ_NO_MATCHED_CODEC, "[GAVDP][GavdpSetConfigurationReq][ERR] no matched codec settings---")
    TRC_MSG( BT_GAVDP_SET_CFG_REQ_PENDING, "[GAVDP][GavdpSetConfigurationReq] status == BT_STATUS_PENDING")

    TRC_MSG( BT_GAVDP_OPEN_STRM_REQ, "[GAVDP][GavdpOpenStreamReq]+++ SigState: %d, SepAddr: 0x%x, SepID: %d, CmdStage: %d, StrmState: %d")
    TRC_MSG( BT_GAVDP_OPEN_STRM_REQ_PENDING, "[GAVDP][GavdpOpenStreamReq] status == BT_STATUS_PENDING")


       
    TRC_MSG( BT_GAVDP_GAVDP_CBK_INFO1, "[GAVDP][GavdpGavdpEventCallback]+++ SEP addr: 0x%08x, event: %d, error: %d")
    TRC_MSG( BT_GAVDP_GAVDP_CBK_SEP_STAT, "[GAVDP][GavdpGavdpEventCallback] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d")    
    TRC_MSG( BT_GAVDP_GAVDP_CBK_STRM_EST_FAIL, "[GAVDP][GavdpGavdpEventCallback][GAVDP_EVENT_STREAM_ESTABLISH_CNF][ERR] AVDTP_Disconnect")

    TRC_MSG( BT_GAVDP_CMGR_CBK_INFO1, "[GAVDP][GavdpCmgrEventCallback]+++ cmgrHdlr addr: 0x%08x, event: %d, status: %d")
    TRC_MSG( BT_GAVDP_CMGR_CBK_CON_OUTGOING, "[GAVDP][GavdpCmgrEventCallback] GAVDP(sig_conn_state) == GAVDP_STATE_SIG_CONNECT_OUTGOING")
    TRC_MSG( BT_GAVDP_CMGR_CBK_LINK_CON_CNF_SUCCESS, "[GAVDP][GavdpCmgrEventCallback][CMEVENT_DATA_LINK_CON_CNF] status == BT_STATUS_SUCCESS")
    TRC_MSG( BT_GAVDP_CMGR_CBK_LINK_CON_CNF_FAILED, "[GAVDP][GavdpCmgrEventCallback][CMEVENT_DATA_LINK_CON_CNF][ERR] CMGR_CreateDataLink failed, try to disconnect 3")

    TRC_MSG( BT_GAVDP_AVDTP_CBK_INFO1,"[GAVDP][GavdpAvdtpEnventCallback]+++ chnl: 0x%08x, event: %d")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_SEP_NOT_REG, "[GAVDP][GavdpAvdtpEnventCallback][ERR] this sep is not registered")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_USE_FAKE_SEP, "[GAVDP][GavdpAvdtpEnventCallback] sep = &GAVDP(fake_sep)")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_SEP_STAT, "[GAVDP][GavdpAvdtpEnventCallback] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_CONNECTED, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT]+++ err code: %d")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_CONNECTED_OUT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT]GAVDP_STATE_SIG_CONNECT_OUTGOING")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_CONNECTED_IN, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT]GAVDP_STATE_SIG_CONNECT_INCOMING")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_CONNECTED_FAILED, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT][ERR] bad GAVDP(sig_conn_state)")    
    TRC_MSG( BT_GAVDP_AVDTP_CBK_CONNECT_IND_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT_IND][ERR] bad state, AVDTP_ConnectRsp(FALSE)")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_CONNECT_IND, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT_IND] Sep is available")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_CONNECT_IND_CMGR_SUCCESS, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT_IND] CMGR_CreateDataLink success, AVDTP_ConnectRsp(TRUE)")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_CONNECT_IND_CMGR_FAILED, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT_IND][ERR] CMGR_CreateDataLink fail, AVDTP_ConnectRsp(FALSE)")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_CONNECT_IND_NO_SEP, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CONNECT_IND][ERR]  no available SEP ")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_DISCOVER_IND_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCOVER_IND][ERR] est state error, currnet state: %d, AVDTP_DiscoverStreamsRsp(REJECT)")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_DISCOVER_IND_ACPT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCOVER_IND]AVDTP_DiscoverStreamsRsp(ACCEPT)")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_STRM_INFO, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_INFO]+++ get sep list info...")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_STRM_INFO_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_INFO][ERR] est state error, currnet state: %d")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_DISCOVER_CNF, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCOVER_CNF] discover completed")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_DISCOVER_CNF_FAILED, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCOVER_CNF][ERR] discover failed")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_DISCOVER_CNF_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCOVER_CNF][ERR] est state error, currnet state: %d")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_GET_CAP_IND_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_IND][ERR] est state error, currnet state: %d, AVDTP_GetCapabilitiesRsp(REJECT)")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_GET_CAP_IND_RAW_DATALEN, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_IND] rawDataLen: %d")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_GET_CAP_IND_RAW_DATA0, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_IND] p.data[0]: 0x%02x")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_GET_CAP_IND_ACP_SEP_ID, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_IND] acp_id: %d")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_GET_CAP_IND_ACP_SEP_ADDR, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_IND] acp_sep: 0x%08x")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_GET_CAP_IND_ACPT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_IND] AVDTP_GetCapabilitiesRsp(ACCEPT)")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_CAP_INFO, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CAPABILITY]+++ get sep capa info...")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_CAP_INFO_CNT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_CAPABILITY] remote conunt: %d")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_CAP_CNF, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_CNF] get cap completed")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_CAP_CNF_FAILED, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_CNF][ERR] get cap failed")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_CAP_CNF_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_GET_CAP_CNF][ERR] est state error, currnet state: %d")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_SET_CFG_IND_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_IND][ERR] est state error, currnet state: %d, AVDTP_SetConfigRsp(REJECT)")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_SET_CFG_IND_RAW_DATALEN, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_IND] rawDataLen: %d")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_SET_CFG_IND_RAW_DATA012, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_IND] rawData[0]: 0x%02x,  rawData[1]: 0x%02x, rawData[2]: 0x%02x")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_SET_CFG_IND_PKT_DATA012, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_IND] p.data[0]: 0x%02x,  p.data[1]: 0x%02x, p.data[2]: 0x%02x")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_SET_CFG_IND_SEP_NOT_FOUND, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_IND][ERR] SEP is not found, AVDTP_SetConfigRsp(REJECT)")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_SET_CFG_IND_CODEC_MISMATCHED, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_IND][ERR] codec does not match, AVDTP_SetConfigRsp(REJECT)")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_SET_CFG_IND_ACPT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_IND] AVDTP_SetConfigRsp(ACCEPT)")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_SET_CFG_CNF, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_CNF] set cap completed")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_SET_CFG_CNF_FAILED, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_CNF][ERR] set cap failed")               
    TRC_MSG( BT_GAVDP_AVDTP_CBK_SET_CFG_CNF_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_SET_CFG_CNF][ERR] est state error, currnet state: %d")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_OPEN_IND_BAD_SEP, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_OPEN_IND][ERR]sep is not correct, open sep id:  %d, set config sep id: %d, AVDTP_OpenStreamRsp(REJECT)")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_OPEN_IND_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_OPEN_IND][ERR] est state error, currnet state: %d, AVDTP_OpenStreamRsp(REJECT)")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_OPEN_IND, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_OPEN_IND] call back to app")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_OPEN_CNF, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_OPEN]GAVDP(sig_conn_state) = GAVDP_STATE_SIG_IDLE")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_OPEN_CNF_SUCCESS, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_OPEN]sep->stream_state = GAVDP_STATE_OPEN")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_OPEN_CNF_FAILED, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_OPEN][ERR] sep->stream_state = GAVDP_STATE_IDLE")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_OPEN_CNF_HAS_OPEND, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_OPEN][ERR] stream has already opened by headset")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_OPEN_CNF_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_OPEN][ERR] est state error, currnet state: %d")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_START_IND_CMD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_START_IND]sep->command_stage = GAVDP_WAIT_RES_START")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_START_IND, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_START_IND]call back to app")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_START_IND_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_START_IND][ERR] state error, currnet state: %d,AVDTP_StartStreamRsp(REJECT)")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_START_CNF_CMD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_STARTED]sep->command_stage = GAVDP_WAIT_NONE")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_START_CNF_STAT_TRANS, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_STARTED]sep->stream_state = GAVDP_STATE_STREAMING")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_START_CNF_SUCCESS, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_STARTED]stream start completed")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_START_CNF_FAILED, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_STARTED][ERR] stream start failed")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_START_CNF_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_STARTED][ERR] state error, currnet state: %d")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_SUSPEND_IND_CMD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_SUSPEND_IND] sep->command_stage = GAVDP_WAIT_RES_SUSPEND")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_SUSPEND_IND, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_SUSPEND_IND] call back to app")			
    TRC_MSG( BT_GAVDP_AVDTP_CBK_SUSPEND_IND_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_SUSPEND_IND][ERR] state error, currnet state: %d,AVDTP_SuspendStreamRsp(REJECT)")   
    TRC_MSG( BT_GAVDP_AVDTP_CBK_SUSPEND_CNF_CMD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_SUSPENDED] sep->command_stage = GAVDP_WAIT_NONE")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_SUSPEND_CNF_STAT_TRANS, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_SUSPENDED] sep->stream_state = GAVDP_STATE_OPEN")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_SUSPEND_CNF_SUCCESS, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_SUSPENDED] stream suspend completed")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_SUSPEND_CNF_FAILED, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_SUSPENDED][ERR] stream suspend failed")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_SUSPEND_CNF_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_SUSPENDED][ERR] state error, currnet state: %d")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_RECONFIG_IND_CMD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_RECONFIG_IND] sep->command_stage = GAVDP_WAIT_RES_RECONFIG")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_RECONFIG_IND, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_RECONFIG_IND] call back to app")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_RECONFIG_IND_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_RECONFIG_IND][ERR] state error, currnet state: %d, AVDTP_ReconfigRsp(REJECT)")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_RECONFIG_CNF_CMD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_RECONFIG_CNF] sep->command_stage = GAVDP_WAIT_NONE")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_RECONFIG_CNF_SUCCESS, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_RECONFIG_CNF] stream reconfig completed")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_RECONFIG_CNF_FAILED, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_RECONFIG_CNF][ERR] stream reconfig failed")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_RECONFIG_CNF_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_RECONFIG_CNF][ERR] state error, currnet state: %d")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_ABORT_IND_CMD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_ABORT_IND] sep->command_stage = GAVDP_WAIT_RES_ABORT")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_ABORT_IND, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_ABORT_IND] call back to app")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_ABORT_CNF_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_ABORTED][ERR] state error, currnet state: %d")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_ABORT_CNF_STAT_TRANS, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_ABORTED] sep->stream_state = GAVDP_STATE_IDLE")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_ABORT_CNF, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_ABORTED] stream abort completed")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_ABORT_CNF_CMD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_ABORTED] sep->command_stage = sep->command_stage = GAVDP_WAIT_NONE")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_CLOSE_IND_CMD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_CLOSE_IND] sep->command_stage = GAVDP_WAIT_RES_CLOSE")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_CLOSE_IND, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_CLOSE_IND] call back to app")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_CLOSE_IND_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_CLOSE_IND][ERR] state error, currnet state: %d, AVDTP_CloseStreamRsp(REJECT)")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_CLOSE_CNF_CMD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_CLOSED] sep->command_stage = GAVDP_WAIT_NONE")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_CLOSE_CNF_STAT_TRANS, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_CLOSED] sep->stream_state = GAVDP_STATE_IDLE")				
    TRC_MSG( BT_GAVDP_AVDTP_CBK_CLOSE_CNF_SUCCESS, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_CLOSED]stream close completed")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_CLOSE_CNF_FAILED, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_CLOSED][ERR] stream close failed")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_CLOSE_CNF_BAD_STAT, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_CLOSED][ERR] state error, currnet state: %d")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_CLOSE_CNF_DISC_SIG_CHNL, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_STREAM_CLOSED] AVDTP_Disconnect")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_PACKET_SENT, "[GAVDP][GavdpAvdtpEnventCallback][VDTP_EVENT_STREAM_PACKET_SENT] packet sent completed")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_DISC_SIG_CHNL, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCONNECT] signal channel disconnected") 
    TRC_MSG( BT_GAVDP_AVDTP_CBK_DISC_CMGR, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCONNECT] cmgrNode == 0")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_DISC_CHNL, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCONNECT] chnlNode == 0")
    TRC_MSG( BT_GAVDP_AVDTP_CBK_DISC_STRM_CHNL, "[GAVDP][GavdpAvdtpEnventCallback][AVDTP_EVENT_DISCONNECT] stream channel disconnected")
    	


    TRC_MSG( BT_GAVDP_INIT, "[GAVDP][GAVDP_Init]")
    TRC_MSG( BT_GAVDP_INIT_ALREADY, "[GAVDP][GAVDP_Init][ERR]GAVDP_ERR_ALREADY_INIT")

    TRC_MSG( BT_GAVDP_REG, "[GAVDP][GAVDP_Register]+++ SEP addr: 0x%08x")
    TRC_MSG( BT_GAVDP_REG_NO_SEP, "[GAVDP][GAVDP_Register][ERR] sep node is already on the list")
    TRC_MSG( BT_GAVDP_REG_SEP_ID, "[GAVDP][GAVDP_Register] sep->info.id: %d")
    TRC_MSG( BT_GAVDP_REG_CHNL, "[GAVDP][GAVDP_Register] AVDTP event callback register, channel")
    TRC_MSG( BT_GAVDP_REG_STRM, "[GAVDP][GAVDP_Register] AVDTP_RegisterStream")
    TRC_MSG( BT_GAVDP_REG_STRM_ID, "[GAVDP][GAVDP_Register] sep->stream.locStrmId : %d")
    TRC_MSG( BT_GAVDP_REG_CMGR, "[GAVDP][GAVDP_Register] CMGR event callback register, cmgr_hdlr")
    TRC_MSG( BT_GAVDP_REG_INS_SEP, "[GAVDP][GAVDP_Register] Insert SEP node, SEP address: 0x%08x, Callback address: 0x%08x")
    TRC_MSG( BT_GAVDP_REG_INS_CHNL, "[GAVDP][GAVDP_Register] Insert channel node")
    TRC_MSG( BT_GAVDP_REG_INS_CMGR, "[GAVDP][GAVDP_Register] Insert cmgr node")

    TRC_MSG( BT_GAVDP_DEREG, "[GAVDP][GAVDP_DeRegister]+++ SEP addr: 0x%08x")
    TRC_MSG( BT_GAVDP_DEREG_NO_SEP, "[GAVDP][GAVDP_DeRegister][ERR] sep node is not on the list")
    TRC_MSG( BT_GAVDP_DEREG_STRM, "[GAVDP][GAVDP_DeRegister] AVDTP_DeregisterStream")
    TRC_MSG( BT_GAVDP_DEREG_CMGR_NOT_RECALL, "[GAVDP][GAVDP_DeRegister][ERR] sep->cmgr_hdlr != 0")
    TRC_MSG( BT_GAVDP_DEREG_CMGR, "[GAVDP][GAVDP_DeRegister] CMGR_DeregisterHandler(cmgr_hdlr)")
    TRC_MSG( BT_GAVDP_DEREG_CHNL_NOT_RECALL, "[GAVDP][GAVDP_DeRegister][ERR] sep->signal_channel != 0")   
    TRC_MSG( BT_GAVDP_DEREG_CHNL, "[GAVDP][GAVDP_DeRegister] AVDTP_Deregister(channel)")

    TRC_MSG( BT_GAVDP_EST_CON_REQ, "[GAVDP][GAVDP_EstablishConnectionReq]+++ SEP addr: 0x%08x, BD addr: %01x:%01x:%01x:%01x:%01x:%01x")
    TRC_MSG( BT_GAVDP_EST_CON_REQ_STAT, "[GAVDP][GAVDP_EstablishConnectionReq] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d")
    TRC_MSG( BT_GAVDP_EST_CON_REQ_BAD_STAT, "[GAVDP][GAVDP_EstablishConnectionReq][ERR] conn state error")
    TRC_MSG( BT_GAVDP_EST_CON_REQ_STAT_TRANS, "[GAVDP][GAVDP_EstablishConnectionReq] GAVDP(sig_conn_state) = GAVDP_STATE_SIG_CONNECT_OUTGOING")
    TRC_MSG( BT_GAVDP_EST_CON_REQ_CMGR_PENDING, "[GAVDP][GAVDP_EstablishConnectionReq] CMGR_CreateDataLink status == BT_STATUS_PENDING")
    TRC_MSG( BT_GAVDP_EST_CON_REQ_CMGR_SUCCESS, "[GAVDP][GAVDP_EstablishConnectionReq] CMGR_CreateDataLink status == BT_STATUS_SUCCESS")
    TRC_MSG( BT_GAVDP_EST_CON_REQ_CMGR_FAILED, "[GAVDP][GAVDP_EstablishConnectionReq] CMGR_CreateDataLink failed, GAVDP(sig_conn_state) = GAVDP_STATE_SIG_IDLE, try to disconnect 1")

    TRC_MSG( BT_GAVDP_EST_CON_RSP, "[GAVDP][GAVDP_EstablishConnectionRsp]+++ SEP addr: 0x%08x, result: %d")
    TRC_MSG( BT_GAVDP_EST_CON_RSP_STAT, "[GAVDP][GAVDP_EstablishConnectionRsp] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d")
    TRC_MSG( BT_GAVDP_EST_CON_RSP_STAT_TRANS, "[GAVDP][GAVDP_EstablishConnectionRsp] GAVDP(sig_conn_state) = GAVDP_STATE_SIG_IDLE, sep->stream_state = GAVDP_STATE_IDLE")
    TRC_MSG( BT_GAVDP_EST_CON_RSP_ACPT, "[GAVDP][GAVDP_EstablishConnectionRsp] sep->stream_state = GAVDP_STATE_OPEN, AVDTP_OpenStreamRsp(ACCEPT)")
    TRC_MSG( BT_GAVDP_EST_CON_RSP_REJ, "[GAVDP][GAVDP_EstablishConnectionRsp] AVDTP_OpenStreamRsp(REJECT)")
    TRC_MSG( BT_GAVDP_EST_CON_RSP_BAD_STAT, "[GAVDP][GAVDP_EstablishConnectionRsp] state error, AVDTP_OpenStreamRsp(REJECT)")
  
    TRC_MSG( BT_GAVDP_START_STRM_REQ, "[GAVDP][GAVDP_StartStreamReq]+++ SEP addr: 0x%08x")
    TRC_MSG( BT_GAVDP_START_STRM_REQ_STAT, "[GAVDP][GAVDP_StartStreamReq] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d")
    TRC_MSG( BT_GAVDP_START_STRM_REQ_BAD_STAT, "[GAVDP][GAVDP_StartStreamReq][ERR] state error")
    TRC_MSG( BT_GAVDP_START_STRM_REQ_PENDING, "[GAVDP][GAVDP_StartStreamReq] AVDTP_StartStream == BT_STATUS_PENDING, sep->command_stage = GAVDP_WAIT_CNF_START")
    TRC_MSG( BT_GAVDP_START_STRM_REQ_FAILED, "[GAVDP][GAVDP_StartStreamReq][ERR] AVDTP_StartStream != BT_STATUS_PENDING")

    TRC_MSG( BT_GAVDP_START_STRM_RSP, "[GAVDP][GAVDP_StartStreamRsp]+++ SEP addr: 0x%08x, result: %d")
    TRC_MSG( BT_GAVDP_START_STRM_RSP_STAT, "[GAVDP][GAVDP_StartStreamRsp] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d")
    TRC_MSG( BT_GAVDP_START_STRM_RSP_ACPT, "[GAVDP][GAVDP_StartStreamRsp] sep->stream_state = GAVDP_STATE_STREAMING, AVDTP_StartStreamRsp(ACCEPT)")   			
    TRC_MSG( BT_GAVDP_START_STRM_RSP_REJ, "[GAVDP][GAVDP_StartStreamRsp] sep->stream_state = GAVDP_STATE_OPEN , AVDTP_StartStreamRsp(REJECT)")
    TRC_MSG( BT_GAVDP_START_STRM_RSP_BAD_STAT, "[GAVDP][GAVDP_StartStreamRsp][ERR] state error, AVDTP_StartStreamRsp(REJECT)")

    TRC_MSG( BT_GAVDP_SUSPEND_STRM_REQ, "[GAVDP][GAVDP_SuspendStreamReq]+++ SEP addr: 0x%08x")
    TRC_MSG( BT_GAVDP_SUSPEND_STRM_REQ_STAT, "[GAVDP][GAVDP_SuspendStreamReq] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d")
    TRC_MSG( BT_GAVDP_SUSPEND_STRM_REQ_BAD_STAT, "[GAVDP][GAVDP_SuspendStreamReq][ERR] state error")
    TRC_MSG( BT_GAVDP_SUSPEND_STRM_REQ_PENDING, "[GAVDP][GAVDP_SuspendStreamReq] AVDTP_SuspendStream == BT_STATUS_PENDING, sep->command_stage = GAVDP_WAIT_CNF_SUSPEND")
    TRC_MSG( BT_GAVDP_SUSPEND_STRM_REQ_FAILED, "[GAVDP][GAVDP_SuspendStreamReq][ERR] AVDTP_SuspendStream != BT_STATUS_PENDING")

    TRC_MSG( BT_GAVDP_SUSPEND_STRM_RSP, "[GAVDP][GAVDP_SuspendStreamRsp]+++ SEP addr: 0x%08x, result: %d")
    TRC_MSG( BT_GAVDP_SUSPEND_STRM_RSP_STAT, "[GAVDP][GAVDP_SuspendStreamRsp] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d")
    TRC_MSG( BT_GAVDP_SUSPEND_STRM_RSP_ACPT, "[GAVDP][GAVDP_SuspendStreamRsp] sep->stream_state = GAVDP_STATE_OPEN, AVDTP_SuspendStreamRsp(ACCEPT)")
    TRC_MSG( BT_GAVDP_SUSPEND_STRM_RSP_REJ, "[GAVDP][GAVDP_SuspendStreamRsp] sep->stream_state = GAVDP_STATE_STREAMING, AVDTP_SuspendStreamRsp(REJECT)")
    TRC_MSG( BT_GAVDP_SUSPEND_STRM_RSP_BAD_STAT, "[GAVDP][GAVDP_SuspendStreamRsp][ERR] state error, AVDTP_StartStreamRsp(REJECT)")

    TRC_MSG( BT_GAVDP_CHG_PARA_REQ, "[GAVDP][GAVDP_ChangeParametersReq]+++ SEP addr: 0x%08x")
    TRC_MSG( BT_GAVDP_CHG_PARA_REQ_STAT, "[GAVDP][GAVDP_ChangeParametersReq] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d")
    TRC_MSG( BT_GAVDP_CHG_PARA_REQ_BAD_STAT, "[GAVDP][GAVDP_ChangeParametersReq][ERR] state error")
    TRC_MSG( BT_GAVDP_CHG_PARA_REQ_PENDING, "[GAVDP][GAVDP_ChangeParametersReq] AVDTP_Reconfig == BT_STATUS_PENDING, sep->command_stage = GAVDP_WAIT_CNF_RECONFIG")
    TRC_MSG( BT_GAVDP_CHG_PARA_REQ_FAILED, "[GAVDP][GAVDP_ChangeParametersReq][ERR] AVDTP_Reconfig != BT_STATUS_PENDING")

    TRC_MSG( BT_GAVDP_CHG_PARA_RSP, "[GAVDP][GAVDP_ChangeParametersRsp]+++ SEP addr: 0x%08x, result: %d")
    TRC_MSG( BT_GAVDP_CHG_PARA_RSP_STAT, "[GAVDP][GAVDP_ChangeParametersRsp] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d")
    TRC_MSG( BT_GAVDP_CHG_PARA_RSP_ACPT, "[GAVDP][GAVDP_ChangeParametersRsp] AVDTP_ReconfigRsp(ACCEPT)")
    TRC_MSG( BT_GAVDP_CHG_PARA_RSP_REJ, "[GAVDP][GAVDP_ChangeParametersRsp] AVDTP_ReconfigRsp(REJECT)")
    TRC_MSG( BT_GAVDP_CHG_PARA_RSP_BAD_STAT, "[GAVDP][GAVDP_ChangeParametersRsp][ERR] state error, AVDTP_ReconfigRsp(REJECT)")

    TRC_MSG( BT_GAVDP_ABORT_REQ, "[GAVDP][GAVDP_AbortReq]+++ SEP addr: 0x%08x")
    TRC_MSG( BT_GAVDP_ABORT_REQ_STAT, "[GAVDP][GAVDP_AbortReq]GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d")
    TRC_MSG( BT_GAVDP_ABORT_REQ_BAD_STAT, "[GAVDP][GAVDP_AbortReq][ERR] state error")
    TRC_MSG( BT_GAVDP_ABORT_REQ_PENDING, "[GAVDP][GAVDP_AbortReq]AVDTP_AbortStream == BT_STATUS_PENDING, sep->command_stage = GAVDP_WAIT_CNF_ABORT")
    TRC_MSG( BT_GAVDP_ABORT_REQ_FAILED, "[GAVDP][GAVDP_AbortReq][ERR] AVDTP_AbortStream != BT_STATUS_PENDING")

    TRC_MSG( BT_GAVDP_ABORT_RSP, "[GAVDP][GAVDP_AbortRsp]+++SEP addr: 0x%08x")
    TRC_MSG( BT_GAVDP_ABORT_RSP_STAT, "[GAVDP][GAVDP_AbortRsp]GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d")
    TRC_MSG( BT_GAVDP_ABORT_RSP_ACPT, "[GAVDP][GAVDP_AbortRsp]sep->stream_state = GAVDP_STATE_IDLE, AVDTP_AbortStreamRsp")

    TRC_MSG( BT_GAVDP_REL_CON_REQ, "[GAVDP][GAVDP_ReleaseConnectionReq]+++ SEP addr: 0x%08x")
    TRC_MSG( BT_GAVDP_REL_CON_REQ_STAT, "[GAVDP][GAVDP_ReleaseConnectionReq] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d")
    TRC_MSG( BT_GAVDP_REL_CON_REQ_BAD_STAT, "[GAVDP][GAVDP_ReleaseConnectionReq][ERR] state error")
    TRC_MSG( BT_GAVDP_REL_CON_REQ_PENDING, "[GAVDP][GAVDP_ReleaseConnectionReq] AVDTP_CloseStream == BT_STATUS_PENDING, sep->command_stage = GAVDP_WAIT_CNF_CLOSE")
    TRC_MSG( BT_GAVDP_REL_CON_REQ_FAILED, "[GAVDP][GAVDP_ReleaseConnectionReq][ERR] AVDTP_CloseStream != BT_STATUS_PENDING")

    TRC_MSG( BT_GAVDP_REL_CON_RSP, "[GAVDP][GAVDP_ReleaseConnectionRsp]+++ SEP addr: 0x%08x")
    TRC_MSG( BT_GAVDP_REL_CON_RSP_STAT, "[GAVDP][GAVDP_ReleaseConnectionRsp] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d")
    TRC_MSG( BT_GAVDP_REL_CON_RSP_ACPT, "[GAVDP][GAVDP_ReleaseConnectionRsp] AVDTP_CloseStreamRsp(ACCEPT), sep->command_stage = GAVDP_STATE_IDLE")
    TRC_MSG( BT_GAVDP_REL_CON_RSP_REJ, "[GAVDP][GAVDP_ReleaseConnectionRsp] AVDTP_CloseStreamRsp(REJECT)")
    TRC_MSG( BT_GAVDP_REL_CON_RSP_BAD_STAT, "[GAVDP][GAVDP_ReleaseConnectionRsp][ERR] state error, AVDTP_CloseStreamRsp(REJECT)")

    TRC_MSG( BT_GAVDP_SEND_DATA_REQ, "[GAVDP][GAVDP_StreamSendDataReq]+++ SEP addr: 0x%08x")
    TRC_MSG( BT_GAVDP_SEND_DATA_REQ_STAT, "[GAVDP][GAVDP_StreamSendDataReq] GAVDP(sig_conn_state): %d, sep cmd state: %d, sep strm state: %d")
    TRC_MSG( BT_GAVDP_SEND_DATA_REQ_BAD_LEN, "[GAVDP][GAVDP_StreamSendDataReq][ERR] buffer_size == 0, GAVDP_ERR_BAD_LENGTH")
    TRC_MSG( BT_GAVDP_SEND_DATA_REQ_FATAL, "[GAVDP][GAVDP_StreamSendDataReq][ERR] AVDTP_SendStreamData == 0, GAVDP_ERR_FATAL")
    TRC_MSG( BT_GAVDP_SEND_DATA_REQ_SUCCESS, "[GAVDP][GAVDP_StreamSendDataReq] HCI_Process")
/* GAVDP TRACE END */

/* A2DP TRACE START */
    TRC_MSG( BT_A2DP_CMGR_CLOSE, "[A2DP] close cmgr link, stream id = %d" )
    TRC_MSG( BT_A2DP_CMGR_EVENT_CALLBACK, "[A2DP] cmgr callback event: %d, status: %d")
    TRC_MSG( BT_A2DP_SDP_EVENT_CALLBACK, "[A2DP] sdp query callback, result:%d, stream_handler:%d, wait cnf:%d, attr ind:%d" )
    TRC_MSG( BT_A2DP_SDP_REQUERY_SUCCESS, "[A2DP] for A2DP re-query sdp success,connect GAVDP now" )
    TRC_MSG( BT_A2DP_SDP_SUCCESS_AND_CONN_GAVDP, "[A2DP] try to connect gavdp, UUID:%x" )
    TRC_MSG( BT_A2DP_DO_SDP_AGAIN, "[A2DP] Do SDP query again for A2DP" )
    TRC_MSG( BT_A2DP_DO_SDP_QUERY, "[A2DP] sdp query, stream id: %d" )
    TRC_MSG( BT_A2DP_BAD_ADDRESS, "[A2DP] unrecognize addr" )
    TRC_MSG( BT_A2DP_RELEASE_STREAM_HDL, "[A2DP] release stream handler: %d" )
    TRC_MSG( BT_A2DP_CONTINUE_OPEN_REQ, "[A2DP] A2dpContinueOpenReq, bt addr: %x, %x, %x, stream hdl: %d" )
    TRC_MSG( BT_A2DP_DEVICE_OPENED, "[A2DP] open req, this device has been connected." )
    TRC_MSG( BT_A2DP_GET_STREAM_HDL_ERR, "[A2DP] get stream handler error." )
    TRC_MSG( BT_A2DP_GET_STREAM_SEP_ERR, "[A2DP] get stream endpoint error." )
    TRC_MSG( BT_A2DP_CONTINUE_OPEN_INFO, "[A2DP] sep infor: %d, stream hdl: %d" )
    TRC_MSG( BT_A2DP_STREAM_OPEN, "[A2DP] A2DP_StreamOpenReq: %x, %x, %x" )
    TRC_MSG( BT_A2DP_OPEN_CNF_INFO, "[A2DP] open cnf error: %d, steam_handler: %d, wait cnf: %d, wait res: %d")
    TRC_MSG( BT_A2DP_ADDR, "[A2DP] addr: %2x%2x%2x%2x%2x%2x")
    TRC_MSG( BT_A2DP_STREAM_HANDLE, "[A2DP] stream handler: %d")
    TRC_MSG( BT_A2DP_OPEN_IND, "[A2DP] stream open ind, stream hdl: %d, wait res: %d, wait cnf: %d")
    TRC_MSG( BT_A2DP_OPEN_RES, "[A2DP] stream open ind, result: %d, stream hdl: %d, wait res: %d")
    TRC_MSG( BT_A2DP_RECONFIG_REQ, "[A2DP] stream reconfig req, stream hdl: %d, wait cnf: %d")
    TRC_MSG( BT_A2DP_RECONFIG_CNF, "[A2DP] stream reconfig cnf, stream hdl: %d, error: %d")
    TRC_MSG( BT_A2DP_RECONFIG_IND, "[A2DP] stream reconfig ind, stream hdl: %d, wait res: %d, wait cnf: %d")
    TRC_MSG( BT_A2DP_RECONFIG_RES, "[A2DP] stream reconfig res, result: %d, stream hdl: %d, wait res: %d")
    TRC_MSG( BT_A2DP_START_REQ, "[A2DP] stream start req, stream hdl: %d, wait res: %d, wait cnf: %d")
    TRC_MSG( BT_A2DP_START_CNF, "[A2DP] stream start cnf, stream hdl: %d, error: %d, wait cnf: %d, wait res: %d, wait started: %d, suspend: %d")
    TRC_MSG( BT_A2DP_START_IND, "[A2DP] stream start ind, stream hdl: %d, wait res: %d, wait cnf: %d")
    TRC_MSG( BT_A2DP_START_RES, "[A2DP] stream start res, result: %d, stream hdl: %d, wait res: %d, wait cnf: %d")
    TRC_MSG( BT_A2DP_SUSPEND_REQ, "[A2DP] stream suspend req, stream hdl: %d, wait res: %d, wait cnf: %d, wait started: %d")
    TRC_MSG( BT_A2DP_SUSPEND_CNF, "[A2DP] stream suspend cnf, stream hdl: %d, error: %d, wait res: %d, wait cnf: %d")
    TRC_MSG( BT_A2DP_SUSPEND_IND, "[A2DP] stream suspend ind, stream hdl: %d, wait res: %d, wait cnf: %d")
    TRC_MSG( BT_A2DP_SUSPEND_RES, "[A2DP] stream suspend res, result: %d, stream hdl: %d, wait res: %d, wait cnf: %d")
    TRC_MSG( BT_A2DP_CLOSE_REQ, "[A2DP] stream close req, stream hdl: %d, wait res: %d, wait cnf: %d")
    TRC_MSG( BT_A2DP_CLOSE_CNF, "[A2DP] stream close cnf, stream hdl: %d, error: %d, wait res: %d, wait cnf: %d")
    TRC_MSG( BT_A2DP_CLOSE_IND, "[A2DP] stream close ind, stream hdl: %d, wait res: %d, wait cnf: %d")
    TRC_MSG( BT_A2DP_CLOSE_RES, "[A2DP] stream close res, result: %d, stream hdl: %d, wait res: %d, wait cnf: %d")
    TRC_MSG( BT_A2DP_ABORT_REQ, "[A2DP] stream abort req, stream hdl: %d, wait res: %d, wait cnf: %d")
    TRC_MSG( BT_A2DP_ABORT_CNF, "[A2DP] stream abort cnf, stream hdl: %d, error: %d, wait res: %d, wait cnf: %d")
    TRC_MSG( BT_A2DP_ABORT_IND, "[A2DP] stream abort ind, stream hdl: %d, wait res: %d, wait cnf: %d")
    TRC_MSG( BT_A2DP_ABORT_RES, "[A2DP] stream abort res, stream hdl: %d, wait res: %d, wait cnf: %d")
    TRC_MSG( BT_A2DP_DELAY_SEND_QOS, "[A2DP] delay send qos to upper layer.")
    TRC_MSG( BT_A2DP_SEND_STREAM_DATA, "[A2DP] send stream data, dev num: %d, in use: %d, stream state: %d, len: %d")
    TRC_MSG( BT_A2DP_GAVDP_EVENT_CALLBACK, "[A2DP] gavdp callback event: %d")
    TRC_MSG( BT_A2DP_INIT, "[A2DP] bt_a2dp_init" )
    TRC_MSG( BT_A2DP_DEINIT, "[A2DP] bt_a2dp_deinit" )
    TRC_MSG( BT_A2DP_ACTIVATE, "[A2DP]activate, local role: %d, sep num: %d, is active: %d" )
    TRC_MSG( BT_A2DP_DEACTIVATE, "[A2DP]deactivate, is active: %d" )
    TRC_MSG( BT_A2DP_STOP_FM, "[A2DP] fm over controller stop fm, link state: %d, enabled: %d, mode: %d, link: %x")
    TRC_MSG( BT_A2DP_START_FM, "[A2DP] fm over controller start fm, stream hdl: %d")
    TRC_MSG( BT_A2DP_SUSPEND_FM, "[A2DP] fm over controller suspend fm, stream hdl: %d")
    TRC_MSG( BT_A2DP_RESUME_FM, "[A2DP] fm over controller resume fm, stream hdl: %d")
    TRC_MSG( BT_A2DP_STOP_FM_REQ, "[A2DP] fm over controller stop fm, stream hdl: %d")
    TRC_MSG( BT_A2DP_FM_SET_CODEC_ELEMENT, "[A2DP] fm over controller set codec elemLen: %d, element: %d")
    TRC_MSG( BT_A2DP_STREAM_SEND_DATA_REQ, "bt_a2dp_stream_send_data_req: state=%d, wait_cnf=%d, wait_res=%d" )
    TRC_MSG( BT_A2DP_PANIC, "bt_a2dp_panic: state=%d, wait_cnf=%d, wait_res=%d" )
    TRC_MSG( BT_A2DP_PRINT_STATE, "bt_a2dp: state=%d" )
    TRC_MSG( BT_A2DP_PRINT_VALUE1, "bt_a2dp: value=%d" )
    TRC_MSG( BT_A2DP_PRINT_VALUE2, "bt_a2dp: value1=%d, value2=%d" )
    TRC_MSG( BT_A2DP_PRINT_VALUE3, "bt_a2dp: value1=%d, value2=%d, value3=%d" )
    TRC_MSG( BT_A2DP_PRINT_VALUE4, "bt_a2dp: value1=%d, value2=%d, value3=%d, value4=%d" )
    TRC_MSG( BT_A2DP_PRINT_VALUE5, "bt_a2dp: value1=%d, value2=%d, value3=%d, value4=%d, value5=%d" )
    TRC_MSG( BT_A2DP_PRINT_VALUE6, "bt_a2dp: value1=%d, value2=%d, value3=%d, value4=%d, value5=%d, value6=%d" )
/* A2DP TRACE END */

/* JSR82 TRACE START */
    /* [JSR82 ] Add by mtk01411: For BT JSR82 traces: 2007-0127 */
    TRC_MSG(BT_JSR82_DEACTIVATE_STATUD_CONID,"bt_jsr82_HandleJSR82Deactivate(): stauts=%02X,con_id=%02X")
    TRC_MSG(BT_JSR82_DEACTIVATE_FIND_CHNL_INX,"bt_jsr82_HandleJSR82Deactivate(): Find jsr82 channel :%02x")
    TRC_MSG(BT_JSR82_DEACTIVATE_DEREG_CHNL_STATUS,"bt_jsr82_HandleJSR82Deactivate():Deregister channel :%02x")
    TRC_MSG(BT_JSR82_VM_END_PEND_CON_REQ_PS_TYPE,"VM termination: pend con req is chnl OPEN with ps_type=%d,then disc link")
    TRC_MSG(BT_JSR82_VM_DISC_ALL_LINK_PEND_CON_REQ_NO_TYPE,"BTJSR82_CheckSendVMDiscAllLinksCnf(): vm_request_disc_all_link_but_pending_conreq_no=%d,type=%d")
    TRC_MSG(BT_JSR82_AUTH_COMPLETE_BUT_ONE_ENCRYPT_ON_GOING,"bt_jsr82_HandleAuthenticationCnf():Complete Auth,but One encryption is on onging")
    TRC_MSG(BT_JSR82_SEC_LINK_ENCRYPT_STATUS,"bt_jsr82_HandleAuthenticationCnf(): return from SEC_SetLinkEncryption err=%d")
    TRC_MSG(BT_JSR82_GET_SESSION_INX,"BTJSR82_GetSessionInx():Find jsr82 channel :%02x")
    TRC_MSG(BT_JSR82_SEARCH_L2CAP_CNTX_DUMP_SESSION_INFO,"bt_jsr82_SearchL2capContext():inx:%02x,status:%02x, ps_type:%02x, chnl:%02x, cli_srv_type:%02x")
    TRC_MSG(BT_JSR82_SEARCH_L2CAP_CNTX_L2CAP_INFO,"bt_jsr82_SearchL2capContext():inx=%d,l2cap_con_state:%d, l2capCid=%d")
    TRC_MSG(BT_JSR82_SEARCH_L2CAP_CNTX_FIND_EXISTED_L2CID,"bt_jsr82_SearchL2capContext():jsr82 find l2cap id:%04x,l2capCid=%04x")
    TRC_MSG(BT_JSR82_ADD_NEW_L2CAP_TO_CNTX,"bt_jsr82_AddNewL2capToContext():l2cap_id=%d,ptr->l2capCtx.l2cap_con_state=%d")
    TRC_MSG(BT_JSR82_ADD_CREATE_L2CAP_TO_CNTX,"bt_jsr82_AddCreateL2capToContext():l2cap_id=%d,ptr->l2capCtx.l2cap_con_state=%d")
    TRC_MSG(BT_JSR82_FREE_L2CAP_CNTX,"bt_jsr82_ReleaseL2capFromContext():state=%04x,l2capid=%04x and reset l2cap_cid and con_state")
    TRC_MSG(BT_JSR82_NO_L2CAP_CON_RELEASE_FIND_BY_ID,"bt_jsr82_ReleaseL2capFromContext():no l2capid=%d when release l2cap conn")
    TRC_MSG(BT_JSR82_REG_SEC_RECORD_ON_CHNL,"bt_jsr82_L2capRegisterSecurity(): record_chnl=%d")
    TRC_MSG(BT_JSR82_FIND_ALLOCATED_L2CAP_PSM_INX,"bt_jsr82_get_L2capPSMIndex():Find allocated L2CAP PSM=%d and index:%02x")
    TRC_MSG(BT_JSR82_FIND_EMPTY_PSM_INX_REG_STATUS,"bt_jsr82_get_L2capPSMIndex(): find empty inx=%02x, RegisterPsm status:%02x")
    TRC_MSG(BT_JSR82_FREE_L2CAP_PSM_INX,"bt_jsr82_free_L2capPSMIndex:%08x, %d")
    TRC_MSG(BT_JSR82_FIND_ONE_ALLOCATED,"Find allocated L2CAP PSM index:%02x")
    TRC_MSG(BT_JSR82_DUMP_L2CAP_PSM_INFO,"Dump L2capPSMIndex:inx=%d,used=%d,psm=%d,used_no=%d")
    TRC_MSG(BT_JSR82_FREE_L2CAP_PSM_NEW_SEC_VAL,"Free L2CAP PSM inx=%d,new security value:%02x")
    TRC_MSG(BT_JSR82_DUMP_FIND_L2CAP_PSM_CNTX,"Find L2capPSMInContext:inx=%d,status=%d,ps_type=%d,chnl=%d,cli_srv_type=%d,l2capCid=%d")
    TRC_MSG(BT_JSR82_FIND_L2CAP_PSM_CNTX_RESULT,"Find L2capPSMInContext:%d,chnl=%d,l2cap_cid=%d")
    TRC_MSG(BT_JSR82_DUMP_FIND_L2CAP_PSM_LISTEN_CNTX,"Find L2capPSMListenInContext:inx=%d,status=%d,ps_type=%d,chnl=%d,cli_srv_type=%d,l2capCid=%d")
    TRC_MSG(BT_JSR82_FIND_L2CAP_PSM_LISTEN_CNTX_RESULT,"Find L2capPSMListenInContext:%d,chnl=%d,l2cap_cid=%d")
    TRC_MSG(BT_JSR82_TURN_OFF_ALL_SERVICES_DISC_ALL_LINKS,"JSR82:Turn off All services and try to disconnect all Acl links")
    TRC_MSG(BT_JSR82_ACL_ADD_LINK,"bt_jsr82_ACLAddLink:%08X")
    TRC_MSG(BT_JSR82_FIND_A_ACTIVE_LINK_USED_NO,"Find an active link and its attached used_no=%d")
    TRC_MSG(BT_JSR82_FIND_ONE_EMPTY_IN_ADD_LINK,"Find a empty one, assign it for this added link")
    TRC_MSG(BT_JSR82_REMOVE_ACL_LINK,"bt_jsr82_ACLRemoveLink:%08x")
    TRC_MSG(BT_JSR82_REMOVE_LINK_USED_NO,"ACLRemoveLink: find an active link and used_no=%d")
    TRC_MSG(BT_JSR82_NEXT_CHECK_IN_REMOVE_LINK,"Iterator of RemoveLink link=%08X")
    TRC_MSG(BT_JSR82_CHECK_DISC_ACL_NO,"CheckAndDisconnectAclNo(): active_link_no=%d")
    TRC_MSG(BT_JSR82_CHECK_DISC_ACL_RFCOMM_CON_REQ_ONGOING,"JSR82CheckAndDisconnectAclNo(): RFCOMM con req is ongoing")
    TRC_MSG(BT_JSR82_CHECK_DISC_ACL_L2CAP_CON_REQ_ONGOING,"JSR82CheckAndDisconnectAclNo(): L2CAP con req is ongoing")
    TRC_MSG(BT_JSR82_CHECK_DISC_TIMER,"bt_jsr82_ACLCheckDisconnectTimer")
    TRC_MSG(BT_JSR82_DISC_TIMER_PEND_CON_REQ_NO,"bt_jsr82_ACLCheckDisconnectTimer(): Still has pending_conreq_no=%d")
    TRC_MSG(BT_JSR82_RFCALLBACK_INFO,"BTJSR82_RfCallbackFunc():con_id=%d,event=%d,chan=%08X,ptr=%08X,ptr1=%08X,parms_remDev=%08X")
    TRC_MSG(BT_JSR82_RFCOMM_TX_COMPLETED,"JSR82 RFCOMM Tx data Completed")
    TRC_MSG(BT_JSR82_RFEVENT_CLOSED_IND,"JSR82 RFEVENT CLOSED IND")
    TRC_MSG(BT_JSR82_RFEVENT_CLOSED_RESET_SESSION_CREDIT,"JSR82 RFComm closed: Reset credit for session entry")
    TRC_MSG(BT_JSR82_RFSRV_CLOSED,"JSR82 RFCOMM SRV CLOSED")
    TRC_MSG(BT_JSR82_RFCHNL_DISC_COMPLETED,"JSR82 RFCOMM Channel disconnect completed")
    TRC_MSG(BT_JSR82_RFCOMM_RX_IND_LEN,"JSR82 RFCOMM:Rx data ind,len=%d")
    TRC_MSG(BT_JSR82_RFCOMM_OPEN_IND_AUTHORIZE_SETTING,"JSR82 RFEVENT_OPEN_IND authroize setting:%02x")
    TRC_MSG(BT_JSR82_RFSRV_OPEN,"JSR82 RFCOMM Server is Open")
    TRC_MSG(BT_JSR82_L2CAPCALL_INFO,"JSR82 L2CAP Callback: session_inx=%d,l2ChnlId=%d,con_id=%d, event=%d")
    TRC_MSG(BT_JSR82_L2CAP_CON_IND_STATUS,"JSR82 L2CAP Accept or not, status=%d")
    TRC_MSG(BT_JSR82_NOT_ADD_NEW_L2CAP_CNTX,"JSR82 L2CAP con ind:Not add new L2cap to cntx:index:%02x")
    TRC_MSG(BT_JSR82_L2CAP_DISCONNECTED_CHNL_LINK,"JSR82 L2CAP_DISCONNECTED,chnl=%08X,link=%08X")
    TRC_MSG(BT_JSR82_L2CAP_DISCONNECTED_INX_CON_ID,"JSR82 L2CAP DISCONNECTED_INX_CON_ID,index:%02x, con_id:%02x")
    TRC_MSG(BT_JSR82_L2CAP_DISCONNECTED_STATE,"JSR82 L2CAP DISC:ptr->l2capCtx.l2cap_con_state:%02x")
    TRC_MSG(BT_JSR82_L2CAP_DISC_COMPLETED,"JSR82 L2CAP Channel disconnect completed")
    TRC_MSG(BT_JSR82_L2CAP_CONNECTED_CHNL,"JSR82 L2CAP CONNECTED with chnl=%08X")
    TRC_MSG(BT_JSR82_L2CAP_CLIENT_CONNECTED_INX,"JSR82 L2CAP Client connected inx=%d")
    TRC_MSG(BT_JSR82_L2CAP_CONNECTED_CON_ID,"JSR82 L2Cap Connected con_id=%d")
    TRC_MSG(BT_JSR82_L2CAP_OPEN_CHNL_FAILED,"JSR82 L2Cap Open Chnl failed")
    TRC_MSG(BT_JSR82_L2CAP_RX_IND_LEN,"JSR82 L2CAP RX ind with len=%d")
    TRC_MSG(BT_JSR82_CMGRCLICALLBACK_NOT_ITS_BD_ADDR,"bt_jsr82_CmgrClientCallback Not the connect bd_addr")
    TRC_MSG(BT_JSR82_CLI_CMGR_CALLBACK_CON_ID_EVENT_STATUS,"JSR82 Client Cmgr Callback: con_id=%d,event=%d,status=%d")
    TRC_MSG(BT_JSR82_LINK_COF_CHECK_VM_DISC_PEND_CON_NO,"After VM starts termination: this pending con req finally success, pend_con=%d")
    TRC_MSG(BT_JSR82_LINK_CON_CNF_TRY_OPEN_RFCHNL,"JSR82 LINK CON CNF then Try Open RFChnl")
    TRC_MSG(BT_JSR82_LINK_CON_CNF_GET_L2CAP_PSM_INX,"JSR82 LINK CON CNF: Get L2CAP PSM Index;%02x")
    TRC_MSG(BT_JSR82_LINK_CON_CNF_TRY_OPEN_L2CAP_CHNL_CID,"JSR82 LINK CON CNF then Try Open L2cap Chnl with cid=%04X")
    TRC_MSG(BT_JSR82_LINK_CON_CNF_RET_STATUS,"JSR82 LINK_CON_CNF ret_Status:%02x")
    TRC_MSG(BT_JSR82_OPEN_CHNL_FAILED_LINK_CON_CNF_STATUS,"JSR82 open channel failed,link_con_cnf status=%d")
    TRC_MSG(BT_JSR82_VM_END_ACL_SETUP_OK_BUT_PS_TYPE_REJECTED,"VM termination: pending con req is ACL link setup ok,but ps_type=%d is rejected")
    TRC_MSG(BT_JSR82_SRV_CMGR_CALLBACK_EVENT_STATUS,"JSR82 Srv Cmgr Callback with Event=%d, Status=%d")
    TRC_MSG(BT_JSR82_ENABLE_SERVICE_FIND_NO_CHNL,"JSR82 Enable Service empty Channel find, case=%d")
    TRC_MSG(BT_JSR82_DISABLE_SERVICE_NO_EMPTY_CHANNEL,"BT_JSR82_Disable_Service no empty Channel")
    TRC_MSG(BT_JSR82_ACLCHECKANDDISCONNECTACLNO,"BT_JSR82_ACLCheckAndDisconnectAclNo")
    TRC_MSG(BT_JSR82_RELEASE_SRVCHNL_INX_SERVER_CHNL_NUMxD_STILL_HAS_OTHER_REIGSTERED_ONES,"BT_JSR82_RELEASE_SRVCHNL_INX Server chnl_num=%d, still has other reigstered ones")
    TRC_MSG(BT_JSR82_APPSDPDBDEACTIVATE,"BT_JSR82_AppSdpDbDeactivate")
    TRC_MSG(BT_JSR82_RELEASE_PSM_INX_PSM_ERROR_NOT_REGISTERED,"BT_JSR82_RELEASE_PSM_INX PSM Error, not registered")
    TRC_MSG(BT_JSR82_SESSIONAPENABLESERVICECFN_PS_TYPEx02X,"BT_JSR82_SessionApEnableServiceCfn Ps_type:%02x")
    TRC_MSG(BT_JSR82_HANDLESESSIONAPTURNOFFSERVICE,"BT_JSR82_HandleSessionApTurnOffService")
    TRC_MSG(BT_JSR82_ENABLE_SERVICE_HANDLESESSIONAPENABLESERVICEREGISTRATION_CMGR_HANDLER_STATUSx02X,"BT_JSR82_Enable_Service HandleSessionApEnableService():Registration CMGR handler status:%02x")
    TRC_MSG(BT_JSR82_ENABLE_SERVICE_AVAILABLE_CHANNELx08X,"BT_JSR82_Enable_Service Available Channel:%08x")
    TRC_MSG(BT_JSR82_SENDTORFCOMM_REMOVE_A_FREE_PKT_TO_SEND_DATA,"BT_JSR82_sendToRfComm(): remove a free pkt to send data")
    TRC_MSG(BT_JSR82_GET_FREE_SRVCHNL_INX_GET_FREE_CHANNEL_xD,"BT_JSR82_GET_FREE_SRVCHNL_INX Get Free channel :%d")
    TRC_MSG(BT_JSR82_HANDLEJSR82DEACTIVATE,"BT_JSR82_HandleJSR82Deactivate")
    TRC_MSG(BT_JSR82_SENDTOL2CAP_REMOVE_A_FREE_PKT_TO_SEND_DATA,"BT_JSR82_sendToL2Cap(): remove a free pkt to send data")
    TRC_MSG(BT_JSR82_RELEASE_SRVCHNL_INX_CURRENT_RFCOMM_CHANNEL_USAGE_TABLEx08X,"BT_JSR82_RELEASE_SRVCHNL_INX current rfcomm_channel_usage_table:%08x")
    TRC_MSG(BT_JSR82_SESSIONAPENABLERESULTEVENT,"bt_jsr82_SessionApEnableResultEvent")
    TRC_MSG(BT_JSR82_SESSIONAPDISCONNECTALLACLCFN,"BT_JSR82_SessionApDisconnectAllAclCfn")
    TRC_MSG(BT_JSR82_CREDIT_xD_DEVCREDIT_xD,"BT_JSR82_credit %d, dev->credit %d")
    TRC_MSG(BT_JSR82_L2CAP_CON_REQOPEN_CHANNEL_FAILED,"BT_JSR82_L2CAP_CON_REQ:open channel failed")
    TRC_MSG(BT_JSR82_HANDLESETACLSECURITYREQTHIS_LINKS_AUTH_OR_ENCRYPT_ALREADY_ONGOING,"BT_JSR82_HandleSetACLSecurityReq():This link's auth or encrypt already ongoing")
    TRC_MSG(BT_JSR82_L2CAP_CON_REQ_INIT_CON_IDx02X,"BT_JSR82_L2CAP_CON_REQ Init con_id:%02x")
    TRC_MSG(BT_JSR82_GET_FREE_PSM_INX_GET_FREE_PSM_xD,"BT_JSR82_GET_FREE_PSM_INX Get Free PSM :%d")
    TRC_MSG(BT_JSR82_SESSIONAPTURNONSERVICECFN,"BT_JSR82_SessionApTurnOnServiceCfn")
    TRC_MSG(BT_JSR82_SESSIONAPCONNECTCFN_SIZEx02X,"BT_JSR82_SessionApConnectCfn size:%02x")
    TRC_MSG(BT_JSR82_HANDLESETACLSECURITYREQ_RETURN_FROM_SEC_SETLINKENCRYPTION_ERRxD,"BT_JSR82_HandleSetACLSecurityReq(): return from SEC_SetLinkEncryption err=%d")
    TRC_MSG(BT_JSR82_CON_RSP_FIND_JSR82_CHANNEL_x02X,"BT_JSR82_CON_RSP Find jsr82 channel :%02x")
    TRC_MSG(BT_JSR82_HANDLESETACLSECURITYREQ_RETURN_FROM_SEC_AUTHENTICATELINK_ERRxD,"BT_JSR82_HandleSetACLSecurityReq(): return from SEC_AuthenticateLink err=%d")
    TRC_MSG(BT_JSR82_GET_FREE_PSM_INX_CURRENT_L2CAP_PSM_USAGE_TABLEx08X,"BT_JSR82_GET_FREE_PSM_INX current l2cap_psm_usage_table:%08x")
    TRC_MSG(BT_JSR82_ENABLE_SERVICE_L2CAP_PSMx08X,"BT_JSR82_Enable_Service L2CAP PSM:%08x")
    TRC_MSG(BT_JSR82_SENDTOL2CAP_AFTER_JBT_SESSION_DEVTX_WITH_PS_L2CAP_GET_BYTESxD,"BT_JSR82_sendToL2Cap After jbt_session_DevTX() with PS_L2CAP: get bytes=%d")
    TRC_MSG(BT_JSR82_GET_FREE_SRVCHNL_INX_CURRENT_RFCOMM_CHANNEL_USAGE_TABLEx08X,"BT_JSR82_GET_FREE_SRVCHNL_INX current rfcomm_channel_usage_table:%08x")
    TRC_MSG(BT_JSR82_SET_HIGH_WATER_MARK_SESSION_AP_RECORD_PTRCOD_IDx02X_TRANSACTION_IDx04X,"BT_JSR82_SET_HIGH_WATER_MARK session_ap_record_ptr->cod_id:%02x, transaction_id:%04X")
    TRC_MSG(BT_JSR82_SENDTORFCOMM_AFTER_JBT_SESSION_DEVTX_GET_BYTESxD,"BT_JSR82_sendToRfComm  After jbt_session_DevTX(): get bytes=%d")
    TRC_MSG(BT_JSR82_SESSIONAPCLOSEINDx02X_x02X_x04X,"BT_JSR82_SessionApCloseInd:%02x, %02x, %04x")
    TRC_MSG(BT_JSR82_DISABLE_SERVICE_FIND_JSR82_CHANNEL_x02X,"BT_JSR82_Disable_Service Find jsr82 channel :%02x")
    TRC_MSG(BT_JSR82_CON_RSP_NO_EMPTY_CHANNEL,"BT_JSR82_CON_RSP no empty Channel")
    TRC_MSG(BT_JSR82_HANDLESESSIONAPCONNECTREQ,"BT_JSR82_HandleSessionApConnectReq")
    TRC_MSG(BT_JSR82_HANDLESESSIONAPSDPREQ,"BT_JSR82_HandleSessionSdpReq")
    TRC_MSG(BT_JSR82_SESSIONAPCONNECTIND_SIZEx02X,"BT_JSR82_SessionApConnectInd  size:%02x")
    TRC_MSG(BT_JSR82_RFCOMM_CON_REQ_EMPTY_CHANNEL_FIND,"BT_JSR82_RFCOMM_CON_REQ empty Channel find")
    TRC_MSG(BT_JSR82_TRIGGER_PANIC_MECHANISM_BY_JVN_FOR_TESTING_ERROR_HANDLE,"BT_JSR82_Trigger Panic mechanism by JVN for testing error handle")
    TRC_MSG(BT_JSR82_SESSIONAPCONNECTCFN,"BT_JSR82_SessionApConnectCfn")
    TRC_MSG(BT_JSR82_SESSIONAPRXRSP,"bt_jsr82_SessionApRxRsp")
    TRC_MSG(BT_JSR82_HANDLESETACLSECURITYREQ_REMDEV_INDEXxDENABLE_AUTHENTICATION_LINKxD_ENABLE_ENCRYPTxD,"BT_JSR82_HandleSetACLSecurityReq(): remDev_index=%d,enable_authentication_link=%d, enable_encrypt=%d")
    TRC_MSG(BT_JSR82_HANDLESETACLSECURITYREQ_CURRENT_LINK_AUTHSTATExDENCRYPTSTATExD,"BT_JSR82_HandleSetACLSecurityReq(): current link authState=%d,encryptState=%d")
    TRC_MSG(BT_JSR82_ADVANCECREDIT_CHNL_STATExD_NOT_IN_CONNECTED,"BT_JSR82_advanceCredit(): chnl_state=%d, not in CONNECTED")
    TRC_MSG(BT_JSR82_RX_CNF_FIND_JSR82_CHANNEL_x02X,"BT_JSR82_RX_CNF Find jsr82 channel :%02x")
    TRC_MSG(BT_JSR82_RFCALLBACKFUNC_CHAN_REMDEV_IS_NULL_EVENTxD_PARMS_REMDEVx08X,"In BTJSR82_RfCallbackFunc(): chan remDev is NULL, event=%d, parms remDev=%08X")
    TRC_MSG(BT_JSR82_RFCOMM_CON_REQ_NO_EMPTY_CHANNEL,"BT_JSR82_RFCOMM_CON_REQ no empty Channel")
    TRC_MSG(BT_JSR82_TX_REQ_NO_EMPTY_CHANNEL,"BT_JSR82_TX_REQ no empty Channel")
    TRC_MSG(BT_JSR82_VM_TERMINATION_PENDING_CON_REQ_IS_ACL_LINK_SETUP_OKBUT_L2CAP_IS_REJECTED,"VM termination: pending con req is ACL link setup ok,but L2CAP is rejected")
    TRC_MSG(BT_JSR82_RFCOMM_CON_REQ_OPEN_RFCOMM_CHNL_FAILED,"BT_JSR82_RFCOMM_CON_REQ: Open RFCOMM chnl failed")
    TRC_MSG(BT_JSR82_L2CAP_CON_REQ_EMPTY_CHANNEL_FIND,"BT_JSR82_L2CAP_CON_REQ empty Channel find")
    TRC_MSG(BT_JSR82_RELEASE_PSM_INX_RETURN_PSM_IDxD,"BT_JSR82_RELEASE_PSM_INX Return psm_id:%d")
    TRC_MSG(BT_JSR82_HANDLESESSIONAPENABLESERVICEREGISTRATION_ON_SERV_CHNL__xD_AND_STATUSx02X,"BT_JSR82_HandleSessionApEnableService():Registration on serv_chnl = %d and status:%02x")
    TRC_MSG(BT_JSR82_VM_TERMINATE_PENDING_CON_REQ_CONNECTED_THEN_DISC_THIS_LINK,"VM terminate: pending con req: connected, then disc this link")
    TRC_MSG(BT_JSR82_SEARCHL2CAPCONTEXT,"bt_jsr82_SearchL2capContext")
    TRC_MSG(BT_JSR82_VM_TERMINATION_PENDING_CON_REQ_IS_ACL_LINK_SETUP_OKBUT_RFCOMM_IS_REJECTED,"VM termination: pending con req is ACL link setup ok,but RFCOMM is rejected")
    TRC_MSG(BT_JSR82_SESSIONAPTXCFN,"BT_JSR82_SessionApTxCfn")
    TRC_MSG(BT_JSR82_TURN_OFF_SERVICE_EMPTY_CHANNEL_IDLE_WRONG_STATE,"BT_JSR82_Turn_Off_Service empty Channel idle, wrong state")
    TRC_MSG(BT_JSR82_TX_REQ_FIND_JSR82_CHANNEL_x02X,"BT_JSR82_TX_REQ Find jsr82 channel :%02x")
    TRC_MSG(BT_JSR82_HANDLESESSIONAPTURNONSERVICE,"BT_JSR82_HandleSessionApTurnOnService")
    TRC_MSG(BT_JSR82_SESSIONAPRXINDEVENT,"bt_jsr82_SessionApRxIndEvent")
    TRC_MSG(BT_JSR82_DISC_REQ_FIND_JSR82_CHANNEL_x02X,"BT_JSR82_DISC_REQ Find jsr82 channel :%02x")
    TRC_MSG(BT_JSR82_DISABLE_SERVICE_DEREGISTER_CHANNEL_x02X,"BT_JSR82_Disable_Service Deregister channel :%02x")
    TRC_MSG(BT_JSR82_RELEASE_PSM_INX_CURRENT_L2CAP_PSM_USAGE_TABLEx08X,"BT_JSR82_RELEASE_PSM_INX current l2cap_psm_usage_table:%08x")
    TRC_MSG(BT_JSR82_SESSIONAPTXREADYIND,"BT_JSR82_SessionApTxReadyInd")
    TRC_MSG(BT_JSR82_SESSIONAPCONNECTIND,"BT_JSR82_SessionApConnectInd")
    TRC_MSG(BT_JSR82_L2CAP_CON_REQ_L2CAP_PSM_INDEXx02X,"BT_JSR82_L2CAP_CON_REQ L2CAP PSM Index;%02x")
    TRC_MSG(BT_JSR82_GET_FREE_PSM_INX_CURRENT_MASKx08X,"BT_JSR82_GET_FREE_PSM_INX current mask:%08x")
    TRC_MSG(BT_JSR82_SESSIONAPRXIND,"BT_JSR82_SessionApRxInd")
    TRC_MSG(BT_JSR82_HANDLESETACLSECURITYREQTRY_TO_AUTHENTICATE_ACL_LINK,"BT_JSR82_HandleSetACLSecurityReq():Try to authenticate ACL Link")
    TRC_MSG(BT_JSR82_ENABLE_SERVICE_PS_TYPEx02X,"BT_JSR82_Enable_Service ps_type:%02x")
    TRC_MSG(BT_JSR82_RX_CNF_NO_EMPTY_CHANNEL,"BT_JSR82_RX_CNF no empty Channel")
    TRC_MSG(BT_JSR82_SESSIONAPRXREADYIND,"BT_JSR82_SessionApRxReadyInd")
    TRC_MSG(BT_JSR82_HIGHWATERxD_SPPOS_RXBYTESxD_RF_FRAMESIZExD,"BT_JSR82_highWater=%d, SPPOS_RxBytes=%d, RF_FrameSize=%d")
    TRC_MSG(BT_JSR82_L2CAP_CON_REQ_NO_EMPTY_CHANNEL,"BT_JSR82_L2CAP_CON_REQ no empty Channel")
    TRC_MSG(BT_JSR82_SESSIONAPTURNOFFSERVICECFN,"BT_JSR82_SessionApTurnOffServiceCfn")
    TRC_MSG(BT_JSR82_HANDLESETACLSECURITYREQREMOTE_LINK_IS_NOT_EXISTED,"BT_JSR82_HandleSetACLSecurityReq():Remote link is not existed")
    TRC_MSG(BT_JSR82_TURN_ON_SERVICE_EMPTY_CHANNEL_IDLE_WRONG_STATE,"BT_JSR82_Turn_On_Service empty Channel idle, wrong state")
    TRC_MSG(BT_JSR82_RELEASE_SRVCHNL_INX_CHANNEL_ERROR_NOT_REGISTERED,"BT_JSR82_RELEASE_SRVCHNL_INX Channel Error, not registered")
    TRC_MSG(BT_JSR82_SESSIONAPTXCFNEVENT,"bt_jsr82_SessionApTxCfnEvent")
    TRC_MSG(BT_JSR82_SESSIONAPDISABLESERVICECFN,"BT_JSR82_SessionApDisableServiceCfn")
    TRC_MSG(BT_JSR82_SESSIONAPENABLESERVICECFN,"BT_JSR82_SessionApEnableServiceCfn")
    TRC_MSG(BT_JSR82_GET_FREE_SRVCHNL_INX_CURRENT_MASKx08X,"BT_JSR82_GET_FREE_SRVCHNL_INX current mask:%08x")
    TRC_MSG(BT_JSR82_DISABLE_SERVICE_INXx02X_STATUSx02X_CON_IDx02X,"BT_JSR82_Disable_Service inx:%02x, status:%02x, con_id:%02x")
    TRC_MSG(BT_JSR82_ENABLE_SERVICE_CON_IDx02X,"BT_JSR82_Enable_Service Con id:%02x")
    TRC_MSG(BT_JSR82_DISABLE_SERVICE_L2CAP_CON_INDEX_xD_IS_NOT_IDLE_xD,"BT_JSR82_Disable_Service L2cap con index %d is not idle: %d")
    TRC_MSG(BT_JSR82_DISC_REQ_NO_EMPTY_CHANNEL,"BT_JSR82_DISC_REQ no empty Channel")
    TRC_MSG(BT_JSR82_ADVANCECREDITCALL_RF_ADVANCECREDIT,"BT_JSR82_advanceCredit():Call RF_AdvanceCredit()")
    TRC_MSG(BT_JSR82_SORT_ATTIBS_ATTRIBUTE_SIZExD,"BT_JSR82_SORT_ATTIBS attribute size:%d")
    TRC_MSG(BT_JSR82_SDPDBDEACTIVATE_FIND_INDEX_I_TO_UNREGISTERx02X,"BT_JSR82_SdpDbDeactivate Find index i to unregister:%02x")
    TRC_MSG(BT_JSR82_VERIFY_RECORD_RECORD_LENGTHx04X,"BT_JSR82_Verify_Record Record length:%04x")
    TRC_MSG(BT_JSR82_SORT_ATTIBS_AFTER_SORTING,"BT_JSR82_SORT_ATTIBS After sorting")
    TRC_MSG(BT_JSR82_RETRIEVERECORDCNF_RECORD_SIZExDX,"BT_JSR82_RetrieveRecordCnf record size:%dx")
    TRC_MSG(BT_JSR82_VERIFY_RECORD_THE_ELEMENT_TYPE_x02X,"BT_JSR82_Verify_Record The Element type: %02x")
    TRC_MSG(BT_JSR82_VERIFY_RECORD_TYPEx02X_SIZE_INDEXx02X,"BT_JSR82_Verify_Record type:%02x size index:%02x")
    TRC_MSG(BT_JSR82_VERIFY_RECORD_C_THE_ELEMENT_SIZE_x02X,"BT_JSR82_Verify_Record C The Element size: %02x")
    TRC_MSG(BT_JSR82_SORT_ATTIBS_ATTRIBUTE_IDxD,"BT_JSR82_SORT_ATTIBS attribute id:%d")
    TRC_MSG(BT_JSR82_VERIFY_DATA_ELEMENT_INVALID_PARAMETERS,"BT_JSR82_Verify_DATA_ELEMENT invalid parameters")
    TRC_MSG(BT_JSR82_VERIFY_RECORD_B_THE_ELEMENT_SIZE_x02X,"BT_JSR82_Verify_Record B The Element size: %02x")
    TRC_MSG(BT_JSR82_DEREG_RECORD_FIND_INDEX_I_TO_UNREGISTERx02X,"BT_JSR82_DeReg_Record Find index i to unregister:%02x")
    TRC_MSG(BT_JSR82_VERIFY_DATA_ELEMENT_TYPEx02X_SIZE_INDEXx02X,"BT_JSR82_Verify_DATA_ELEMENT type:%02x size index:%02x")
    TRC_MSG(BT_JSR82_VERIFY_RECORD_FINALLY_ATTRIBUTE_INDEXx02X,"BT_JSR82_Verify_Record finally Attribute index:%02x")
    TRC_MSG(BT_JSR82_VERIFY_RECORD_DATA0x02X_DATA1x02X,"BT_JSR82_Verify_Record data[0]:%02x, data[1]:%02x")
    TRC_MSG(BT_JSR82_VERIFY_DATA_ELEMENT_VERIFY_FAILED,"BT_JSR82_Verify_DATA_ELEMENT Verify failed")
    TRC_MSG(BT_JSR82_SORT_ATTIBS_INDEXxD,"BT_JSR82_SORT_ATTIBS index:%d")
    TRC_MSG(BT_JSR82_VERIFY_RECORD_ATTRIBUTE_VALUE_ELEMENT_HEADER_SIZE_x04X,"BT_JSR82_Verify_Record Attribute value Element header size: %04x")
    TRC_MSG(BT_JSR82_GETAVAILABLERECORDHANDLER_RECORD_HANDLERx08X,"BT_JSR82_GetAvailableRecordHandler Record handler:%08x")
    TRC_MSG(BT_JSR82_REG_RECORD_FIND_INDEX_I_AVAILABLEx02X,"BT_JSR82_Reg_Record Find index i available:%02x")
    TRC_MSG(BT_JSR82_VERIFY_RECORD_ATTRIBUTE_INDEX_xD_TOO_LARGE,"BT_JSR82_Verify_Record attribute index :%d too large")
    TRC_MSG(BT_JSR82_GETAVAILABLERECORDHANDLER_FIND_INDEX_I_AVAILABLEx02X,"BT_JSR82_GetAvailableRecordHandler Find index i available:%02x")
    TRC_MSG(BT_JSR82_RETRIEVERECORDCNF_RESULTx02X,"BT_JSR82_RetrieveRecordCnf result:%02x")
    TRC_MSG(BT_JSR82_VERIFY_RECORD_A_THE_ELEMENT_SIZE_x02X,"BT_JSR82_Verify_Record A The Element size: %02x")
    TRC_MSG(BT_JSR82_VERIFY_DATA_ELEMENT_PEASE_DATA_ELEMENT_FAILED,"BT_JSR82_Verify_DATA_ELEMENT pease data element failed")
    TRC_MSG(BT_JSR82_VERIFY_DATA_ELEMENT_X3_THE_ELEMENT_SIZE_x02X,"BT_JSR82_Verify_DATA_ELEMENT X3 The Element size: %02x")
    TRC_MSG(BT_JSR82_REG_RECORD_REMOVE_STATUSxD,"BT_JSR82_Reg_Record Remove status:%d")
    TRC_MSG(BT_JSR82_DEREG_RECORD_STATUSx02X,"BT_JSR82_DeReg_Record Status:%02x")
    TRC_MSG(BT_JSR82_RETRIEVERECORDCNF_RAW_DATAx02Xx02X_x02Xx02X,"BT_JSR82_RetrieveRecordCnf raw data:%02x,%02x, %02x,%02x")
    TRC_MSG(BT_JSR82_VERIFY_DATA_ELEMENT_X1_THE_ELEMENT_SIZE_x02X,"BT_JSR82_Verify_DATA_ELEMENT X1 The Element size: %02x")
    TRC_MSG(BT_JSR82_REG_RECORD_SDP_ADDRECORD_STATUSx02X,"BT_JSR82_Reg_Record SDP_AddRecord Status:%02x")
    TRC_MSG(BT_JSR82_VERIFY_RECORD_VERIFY_FAILED,"BT_JSR82_Verify_Record Verify failed")
    TRC_MSG(BT_JSR82_REG_RECORD_THE_ATTRIBUTE_NO_ISx02X,"BT_JSR82_Reg_Record The attribute no is:%02x")
    TRC_MSG(BT_JSR82_RETRIEVERECORDCNF_HANDLEx08X,"BT_JSR82_RetrieveRecordCnf handle:%08x")
    TRC_MSG(BT_JSR82_REG_RECORD_UPDATE_THE_RECORD,"BT_JSR82_Reg_Record Update the record")
    TRC_MSG(BT_JSR82_VERIFY_RECORD_ATTRIBUTE_VALUE_ELEMENT_SIZE_x04X,"BT_JSR82_Verify_Record Attribute value Element size: %04x")
    TRC_MSG(BT_JSR82_VERIFY_DATA_ELEMENT_X2_THE_ELEMENT_SIZE_x02X,"BT_JSR82_Verify_DATA_ELEMENT X2 The Element size: %02x")
    TRC_MSG(BT_JSR82_VERIFY_RECORD_E_THE_ELEMENT_SIZE_x02X,"BT_JSR82_Verify_Record E The Element size: %02x")
    TRC_MSG(BT_JSR82_VERIFY_DATA_ELEMENT_INVALID_SIZE_DESCRIPTOR_VALUEx02X,"BT_JSR82_Verify_DATA_ELEMENT Invalid size descriptor value=%02X")
    TRC_MSG(BT_JSR82_REG_RECORD_INDEXxD,"BT_JSR82_Reg_Record index:%d")
    TRC_MSG(BT_JSR82_VERIFY_RECORD_ITS_DATAx02Xx02Xx02Xx02Xx02Xx02Xx02Xx02X,"BT_JSR82_Verify_Record its data:%02x,%02x,%02x,%02x,%02x,%02x,%02x,%02x,")
    TRC_MSG(BT_JSR82_REG_RECORD_NO_AVAILABLE_SERVICE_RECORD,"BT_JSR82_Reg_Record No available service record")
    TRC_MSG(BT_JSR82_VERIFY_DATA_ELEMENT_X5_THE_ELEMENT_SIZE_x02X,"BT_JSR82_Verify_DATA_ELEMENT X5 The Element size: %02x")
    TRC_MSG(BT_JSR82_DEREG_RECORD_NO_REGISTERED_SERVICE_RECORD,"BT_JSR82_DeReg_Record No registered service record")
    TRC_MSG(BT_JSR82_REG_RECORD_RECORD_PARSE_ERROR,"BT_JSR82_Reg_Record Record parse error")
    TRC_MSG(BT_JSR82_REG_RECORD_ATTRIBUTE_IDxD,"BT_JSR82_Reg_Record attribute id:%d")
    TRC_MSG(BT_JSR82_VERIFY_RECORD_INVALID_SIZE_DESCRIPTOR_VALUEx02X,"BT_JSR82_Verify_Record Invalid size descriptor value=%02X")
    TRC_MSG(BT_JSR82_VERIFY_DATA_ELEMENT_DATA_ELEMENT_TOO_LARGE_NOT_CHECK,"BT_JSR82_Verify_DATA_ELEMENT data element too large, not check")
    TRC_MSG(BT_JSR82_REG_RECORD_ATTRIBUTE_SIZExD,"BT_JSR82_Reg_Record attribute size:%d")
    TRC_MSG(BT_JSR82_VERIFY_DATA_ELEMENT_ATTRIBUTE_VALUE_ELEMENT_SIZE_x02X,"BT_JSR82_Verify_DATA_ELEMENT Attribute value Element size: %02x")
    TRC_MSG(BT_JSR82_VERIFY_RECORD_THE_ATTRIBUTE_ID_xD,"BT_JSR82_Verify_Record The attribute id :%d")
    TRC_MSG(BT_JSR82_L2_DISCON_IND_INX_L2CID,"BT_JSR82_L2EVENT_DISCCON_IND: inx=%d,l2cap_cid=%d")
    TRC_MSG(BT_JSR82_L2_DISCONNECTED_IND_SRV_CHNL_CLOSED_NEVER_OPENED,"JSR82_L2CAP_DISCONNECTED_Srv: Chnl is in CLOSED state and never Opened")
    TRC_MSG(BT_JSR82_L2_DISCONNECTED_IND_NOT_NOTIFY_JBT_L2CON_STATE,"JSR82_DISCONNECTED of Srv: Not necessary to notify JBT,l2cap_con_state=%d")
    TRC_MSG(BT_JSR82_SDAP_SEARCH_RAW_RETRY_WAIT_FOR_DISC_COMPLETE_TIMEOUT,"Sdap_Search_Raw_Retry_Wait_for_Disc_Complete_Timeout():Retry check again")
    TRC_MSG(BT_JSR82_CHECK_CONTINUE_QUERY,"check_continute_query():End of sdp request, reset continute state to zero")
    TRC_MSG(BT_JSR82_CHECK_CONSTATE_VALUE,"check_continute_query():contState value=%d")
    TRC_MSG(BT_JSR82_CHECK_DUMP_CONSTATE_DATA_INX,"check_continute_query():inx=%d,contState data=%d")
    TRC_MSG(BT_JSR82_TRY_CONTINUE_LEN_CONTSTATE_PTR,"JSR82 try continue with len=%d, contState_ptr=%08X")
    TRC_MSG(BT_JSR82_TRY_CONTINUE_SDP_TO_REMDEV,"JSR82 Try to continue do sdp to remDev=%08X")
    TRC_MSG(BT_JSR82_CMGR_CREATEDATALINK_STATUS,"JSR82 CMGR_CreateDataLink case=%d, with return status=%d")
    TRC_MSG(BT_JSR82_HANDLE_AUTH_CNF_ERRCODE,"BT_JSR82_HandleAuthCnf_errCode=%d")
    TRC_MSG(BT_JSR82_HANDLE_AUTH_CNF_DEL_DEV_RECORD_STATUS,"BT_JSR82_HandleAuthCnf:Delete Device Record, status=%d")
    TRC_MSG(BT_JSR82_RFCOMM_CLOSED_DUE_TO_ACCESS_DENIED_DEL_DEV_RECORD_STATUS,"BT_JSR82_RFCallbackFunc: Client con req Access Denied,delete record status=%d")
    TRC_MSG(BT_JSR82_L2CAP_DEREGISTER_PSM_STATUS,"BT_JSR82_L2Cap_DeregisterPSM_status=%d")
    TRC_MSG(BT_JSR82_CHECK_DISC_ACL_L2CAP_SRV_INX_STATE,"BT_JSR82_VM_TERMINATE_DISC_ACL_BUT_L2CAP_SRV: inx=%d,chnl_state=%d")
    TRC_MSG(BT_JSR82_CHECK_DSIC_ACL_VM_PEND_CON_NUM,"BT_JSR82_VM_TERMINATE_Pend_con_num=%d")
    TRC_MSG(BT_JSR82_L2CAP_DEREGISTER_PSM_CHNL_STATE,"BT_JSR82_L2Cap_DeregisterPSM_Chnl with inx=%d,State=%d")
    TRC_MSG(BT_JSR82_FORCE_DEREGISTER_PSM_INX,"BT_JSR82_Force_Deregister_PSM_inx=%d")
    TRC_MSG(BT_JSR82_L2CAP_DUMMY_CALLBACK_CID_EVENT_STATUS,"BT_JSR82_Dummy_Callback_cid=%d,event=%d,status=%d")
    TRC_MSG(BT_JSR82_CON_REQ_TIMEOUT_HDLR,"BT_JSR82_ConReqTimeoutHdlr_power_staus=%d")
    TRC_MSG(BT_JSR82_SDP_REQ_TIMEOUT_HDLR,"BT_JSR82_SdpReqTimeoutHdlr_power_staus=%d")
    TRC_MSG(BT_JSR82_CON_REQ_PREVIOUS_ONGOING,"BT_JSR82_One_Previous_ConReq_Ongoing")
    TRC_MSG(BT_JSR82_SDP_REQ_PREVIOUS_ONGOING,"BT_JSR82_One_Previous_SdpReq_Ongoing")
    TRC_MSG(BT_JSR82_L2CAP_DISCONNECTED_DUE_TO_SECURITY_BLOCK_DEL_DEV_RECORD_STATUS,"BT_JSR82_L2CapCallbackFunc:Disconnected due to Security Block then delete dev record,status=%d")
    TRC_MSG(JSR82_SESSION_CONNECT_REQUEST,"JSR82 session connect request")
    TRC_MSG(JSR82_FIND_L2CAP_IDBT_DEBUGx04X,"jsr82 find l2cap id:%04x")
    TRC_MSG(BT_JSR82_SESSIONAPCLOSEIND,"bt_jsr82_SessionApCloseInd")
    TRC_MSG(BT_JSR82_CMGRCLIENTCALLBACK,"bt_jsr82_CmgrClientCallback")
    TRC_MSG(MSG_ID_BT_JSR82_CONNECT_CFN_TRC,"MSG_ID_BT_JSR82_CONNECT_CFN")
    TRC_MSG(MSG_ID_BT_JSR82_ENABLE_SERVICE_CNF_TRC,"MSG_ID_BT_JSR82_ENABLE_SERVICE_CNF")
    TRC_MSG(FUNC_JSR82_RING_BUFFER_SET_READY_TO_READ_AS_FALSE,"JSR82 RingBuffer: Set readyToRead Flas as FLASE")
    TRC_MSG(FUNC_JSR82_RING_BUFFER_ALLOCATE_READRINGBUF_FAILED,"JSR82 RingBuffer: allocate for ReadRingBuf failed, size=%d")
    TRC_MSG(FUNC_JSR82_RING_BUFFER_ALLOCATE_WRITERINGBUF_FAILED,"JSR82 RingBuffer: allocate for WriteRingBuf failed, size=%d")
    TRC_MSG(FUNC_JSR82_RING_BUFFER_READ_01,"JSR82 RingBuffer Read Data func: case1 Set readyToRead to TRUE and ReadMore=%d")
    TRC_MSG(FUNC_JSR82_RING_BUFFER_READ_02,"JSR82 RingBuffer Read Data func: case2 Set readyToRead to FALSE")
    TRC_MSG(BT_JSR82_DEVRX_DATA_LOST_DUE_TO_RING_BUFFER_FULL,"BT JSR82 jsr82_session_DevRX(): %d bytes data lost due to ring buffer full!")
    TRC_MSG(BT_JSR82_PUTBYTES_INVALID_INDEX,"BT JSR82 jsr82_session_PutBytes(): Input index (%d) is invalid. status: IDLE")
    TRC_MSG(BT_JSR82_PUTBYTES_INVALID_STATE,"BT JSR82 jsr82_session_PutBytes(): This connection (%d) is NOT in OPEN state")
    TRC_MSG(BT_JSR82_DATA_AVAILABLE_IND_INVALID_INDEX,"BT JSR82 jsr82_session_SendDataAvailableInd():  Input index (%d) is invalid. status: IDLE")
    TRC_MSG(BT_JSR82_DATA_AVAILABLE_IND_INVALID_STATE,"BT JSR82 jsr82_session_SendDataAvailableInd():  This connection (%d) is NOT in OPEN state")
    TRC_MSG(BT_JSR82_DATA_AVAILABLE_IND_WAIT_IND_RSP,"BT JSR82 jsr82_session_SendDataAvailableInd():  One IND has been sent and is wait for IND_RSP (%d)")
    TRC_MSG(BT_JSR82_DATA_AVAILABLE_IND_RSP_INVALID_INDEX,"BT JSR82 jsr82_session_DataAvailableIndRsp():  Input index (%d) is invalid. status: IDLE")
    TRC_MSG(BT_JSR82_DATA_AVAILABLE_IND_RSP_INVALID_STATE,"BT JSR82 jsr82_session_DataAvailableIndRsp():  This connection (%d) is NOT in OPEN state")
    TRC_MSG(BT_JSR82_L2CAPCALL_INFO_NO_MATCHED_CONTEXT,"JSR82 L2CAP Callback: NO matched index in context. l2ChnlId=%d, event=%d")
    TRC_MSG(BT_JSR82_L2CAP_CALLBACK_L2EVENT_DISCONNECTED_DUE_TO_REJECT,"BT JSR82 L2CAP callback: L2EVENT_DISCONNECTED is back due to the CONNECT_IND has been rejected")
/* JSR82 TRACE END */

/* JBT TRACE START*/
    TRC_MSG(FUNC_JBT_INIT, "JBT Initialize")
    TRC_MSG(FUNC_JBT_RX_MSG, "JBT Rx Msg=%02x")
    TRC_MSG(FUNC_JBT_RESULT, "JBT Rx Msg=%02x")
    TRC_MSG(FUNC_JBT_OPCODE, "JBT UT TEST Opcode =%02x")
    TRC_MSG(FUNC_JBT_TRANSACTION_ID, "JBT UT TEST Transaction Id =%02x")
    TRC_MSG(FUNC_JBT_SHOW_8BYTES, "JBT Show result =%08x")
    TRC_MSG(FUNC_JBT_SHOW_COD, "JBT Show class of device =%08x")
    TRC_MSG(FUNC_JBT_SHOW_NAME, "JBT UT TEST Device name =%02x (%c)")
    TRC_MSG(FUNC_JBT_ADDR, "JBT Rx Msg=%02x,%02x,%02x,%02x,%02x,%02x")
    TRC_MSG(FUNC_JBT_UT_INQUIRY_COMPLETED, "JBT UT test inquiry completed")
    TRC_MSG(FUNC_JBT_UT_INQUIRY_CANCEL_COMPLETED, "JBT UT test inquiry cancel completed")
    TRC_MSG(FUNC_JBT_DISCOVERY_STATE, "JBT Device Discovery State=%02x")
    TRC_MSG(FUNC_JBT_GET_ACL_INFO, "JBT Get ACL info, Master: %02x, Authenticated:%02x, Encrypted:%02x")
    TRC_MSG(FUNC_JBT_SDPDB_GET_RECORD_HDL, "JBT Get Record Handler result:%02x,handler:%08x")
    TRC_MSG(FUNC_JBT_SDPDB_REGISTER_RECORD_RESULT, "JBT Register Record result:%02x,handler:%08x")
    TRC_MSG(FUNC_JBT_SDPDB_DEREGISTER_RECORD_RESULT, "JBT DeRegister Record result:%02x,handler:%08x")
    TRC_MSG(FUNC_JBT_COMMAND_ENQUEUE, "JBT Command input Queue:%02x, trans_id :%08x")
    TRC_MSG(FUNC_JBT_COMMAND_QUEUE_INFO, "JBT Command Queue start:%02x, end:%02x, no:%02x, running:%02x")
    TRC_MSG(FUNC_JBT_COMMAND_DEQUEUE, "JBT Command output Queue:%02x, trans_id :%08x")
    TRC_MSG(FUNC_JBT_CMD_INSERT_QUEUE, "JBT jbt_cmd_insert_queue:%02x")
    TRC_MSG(FUNC_JBT_CMD_KICK_OFF, "JBT jbt_cmd_kick_check_list:%02x")
    TRC_MSG(FUNC_JBT_CMD_ONE, "JBT New Command%02x")
    TRC_MSG(FUNC_JBT_SESSION_REGISTRATION_RESULT, "JBT Session Registration result:%02x,trans:%08x, channel:%04x, con_id:%02x")
    TRC_MSG(FUNC_JBT_SESSION_TURNON_RESULT, "JBT Session turnon result:%02x,trans:%08x, con_id:%02x")
    TRC_MSG(FUNC_JBT_SPP_GET_DATA,"JBT_SPP_GET_DATA")
    TRC_MSG(FUNC_JBT_SPP_SEND_DATA,"JBT_SPP_SEND_DATA")
    TRC_MSG(FUNC_JBT_CAN_NOT_GET_ONE_FREE_ENTRY,"JBT can not allocate a free entry")
    TRC_MSG(FUNC_JBT_CAN_NOT_FIND_EXISTING_ENTRY,"JBT can not find an existing entry with type=%d and value=%d")
    TRC_MSG(FUNC_JBT_SET_READY_TO_READ_AS_FALSE,"JBT Set readyToRead Flas as FLASE")
    TRC_MSG(FUNC_JBT_READ,"JBT Read Data func: DataRead=%d,Length=%d")
    TRC_MSG(FUNC_JBT_READ_01,"JBT Read Data func: case1 Set readyToRead to TRUE and ReadMore=%d")
    TRC_MSG(FUNC_JBT_READ_02,"JBT Read Data func: case2 Set readyToRead to FALSE")
    TRC_MSG(FUNC_JBT_ALLOCATE_READRINGBUF_FAILED,"JBT allocate for ReadRingBuf failed, size=%d")
    TRC_MSG(FUNC_JBT_ALLOCATE_WRITERINGBUF_FAILED,"JBT allocate for WriteRingBuf failed, size=%d")
    TRC_MSG(FUNC_JBT_SESSION_RX_READY_IND,"JBT UT: Rx Ready Ind with con_id=%d, len=%d")
    TRC_MSG(FUNC_JBT_SESSION_TX_READY_IND,"JBT UT: Tx Ready Ind with con_id=%d")
    TRC_MSG(FUNC_JBT_SESSION_CON_REQ_RESULT,"JBT UT: Connnect Request Result with result=%02X, transaction_id=%08X, con_id=%02X")
    TRC_MSG(FUNC_JBT_SESSION_CON_IND,"JBT UT: Connect Ind with result=%02X, transaction_id=%08X, con_id=%02X")
    TRC_MSG(FUNC_JBT_SESSION_RX_BYTES,"JBT UT: Simulate App to read data this time: con_id=%02X,bytes=%02X")
    TRC_MSG(FUNC_JBT_SESSION_RX_END,"JBT UT: Read all data stored in ReadRingBuf due to this time RX_READY_IND")
    TRC_MSG(FUNC_JBT_SESSION_ENABLE_TX_TEST_ON_SERVER,"JBT UT: Enable Tx Testing on Server when recv connect_ind with con_id=%02X")
    TRC_MSG(FUNC_JBT_SESSION_TX_BYTES,"JBT UT: Simulate App to write data this time: con_id=%02X, bytes=%02X")
    TRC_MSG(FUNC_JBT_SESSION_TX_END,"JBT UT: End of TX Testing due to WriteRingBuf full when recv this time ind msg")
    TRC_MSG(FUNC_JBT_DISC_IND,"JBT UT: Recv DISC_IND with con_id=%02X")
    TRC_MSG(FUNC_JBT_MEM_ALLOCATED,"JBT Memory buffer of JBT after allocated:%d")
    TRC_MSG(FUNC_JBT_MEM_RELEASED,"JBT Memory buffer of JBT after released:%d")
    TRC_MSG(JBT_JBT_SET_ACL_SECURITY_CMD_TRANSACTION_IDx08X,"JBT jbt_set_acl_security_cmd, transaction_id:%08x")
    TRC_MSG(JBT_JBT_CMD_CHECK_DEVICE_IN_QUEUE_NODE_NOT_0,"JBT jbt_cmd_check_device_in_queue node not 0")
    TRC_MSG(JBT_JBT_FREE_ALL,"JBT jbt_free_all")
    TRC_MSG(JBT_JBT_HANDLE_SESSION_ENABLED_RESULT_PARMSPS_TYPEx02X,"JBT jbt_handle_session_enabled_result parms.ps_type:%02x")
    TRC_MSG(JBT_MSG_ID_BT_BM_DISCOVERY_RESULT_IND,"JBT MSG_ID_BT_BM_DISCOVERY_RESULT_IND")
    TRC_MSG(JBT_JBT_SET_LOCAL_DISCOVERY_CMD_TRANSACTION_IDx08X,"JBT jbt_set_local_discovery_cmd, transaction_id:%08x")
    TRC_MSG(JBT_JBT_RESTORE_MMI_CMD,"JBT jbt_restore_mmi_cmd")
    TRC_MSG(JBT_MSGRESULTx02X,"JBT msg->result:%02x")
    TRC_MSG(JBT_PARMSCODx08X,"JBT parms.cod:%08x")
    TRC_MSG(JBT_MSGCODx08X,"JBT msg->cod:%08x")
    TRC_MSG(JBT_JBT_POWER_ONOPERATION_STATEx02X,"JBT jbt_power_on.operation_state:%02x")
    TRC_MSG(JBT_MSG_ID_MMI_BT_BCC_RESTORE_CNF,"JBT MSG_ID_MMI_BT_BCC_RESTORE_CNF")
    TRC_MSG(JBT_BT_HANDLE_SESSION_DISCONNECT_IND_PARMSL2CAP_IDx04X,"JBT bt_handle_session_disconnect_ind parms.l2cap_id:%04x")
    TRC_MSG(JBT_JBT_GET_REMOTE_NAME_CMD_ADDRx02Xx02Xx02Xx02Xx02Xx02X,"JBT jbt_get_remote_name_cmd, addr:%02x,%02x,%02x,%02x,%02x,%02x")
    TRC_MSG(JBT_IN_JBT_SPP_READ_DATAREADxDLENGTHxD,"JBT In jbt_spp_read(): DataRead=%d,Length=%d")
    TRC_MSG(JBT_JBT_HANDLE_SESSION_DEREGISTRATION_RESULT_PARMSTRANSACTION_IDx08X,"JBT jbt_handle_session_deregistration_result parms.transaction_id:%08x")
    TRC_MSG(JBT_MSG_ID_BT_APP_SDPDB_GET_HANDLE_CNF,"JBT MSG_ID_BT_APP_SDPDB_GET_HANDLE_CNF")
    TRC_MSG(JBT_BT_HANDLE_SESSION_CONNECT_IND,"JBT bt_handle_session_connect_ind")
    TRC_MSG(JBT_JBT_CMD_QUEUE_CONTEXTCMD_RUN_NOxD,"JBT jbt_cmd_queue_context.cmd_run_no:%d")
    TRC_MSG(JBT_MSG_ID_BT_APP_SDPDB_DEREGISTER_CNF,"JBT MSG_ID_BT_APP_SDPDB_DEREGISTER_CNF")
    TRC_MSG(JBT_JBT_HANDLE_SET_LOCAL_COD_RESULT,"JBT jbt_handle_set_local_cod_result")
    TRC_MSG(JBT_BT_HANDLE_SESSION_DISCONNECT_IND_FREE_WRITERINGBUF,"JBT bt_handle_session_disconnect_ind free WriteRingBuf")
    TRC_MSG(JBT_JBT_ALLOCATE_ONE_AVAILABLE_ENTRY,"JBT jbt_allocate_one_available_entry")
    TRC_MSG(JBT_MSG_ID_BT_BM_READ_LOCAL_COD_CNF,"JBT MSG_ID_BT_BM_READ_LOCAL_COD_CNF")
    TRC_MSG(JBT_JBT_CMD_INSERT_QUEUE_RETURN_STATUS_xD,"JBT jbt_cmd_insert_queue return status :%d")
    TRC_MSG(JBT_OLD_TRANSACTION_IDx08X_NEW_TRANSACTION_IDx08X,"JBT old transaction_id:%08x, new transaction_id:%08x")
    TRC_MSG(JBT_JBT_SDPDB_CONTEXTJBT_DEREGISTER_RECORDOPERATION_STATEx08X,"JBT jbt_sdpdb_context.jbt_deregister_record.operation_state:%08x")
    TRC_MSG(JBT_JBT_REGISTER_RECORD_CMD_RECORD_TYPEx08X,"JBT jbt_register_record_cmd record type:%08x")
    TRC_MSG(JBT_JBT_HANDLE_RESTORE_MMI_REQ_RESULT,"JBT jbt_handle_restore_mmi_req_result")
    TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_READ_ADDRTRANSACTION_IDx08X,"JBT jbt_gap_context.jbt_read_addr.transaction_id:%08x")
    TRC_MSG(JBT_JBT_CMD_LIST_INIT,"JBT jbt_cmd_list_init")
    TRC_MSG(JBT_JBT_HANDLE_SESSION_DEREGISTRATION_RESULT_MSGPS_TYPEx02X,"JBT jbt_handle_session_deregistration_result msg->ps_type:%02x")
    TRC_MSG(JBT_JBT_GET_LOCAL_ADDR_CMD_TRANSACTION_IDx08X,"JBT jbt_get_local_addr_cmd, transaction_id:%08x")
    TRC_MSG(JBT_JBT_RESTORE_BTSTACK_MEMORY,"JBT jbt_restore_btstack_memory")
    TRC_MSG(JBT_JBT_HANDLE_SESSION_TURNON_RESULT_MSGPS_TYPEx02X,"JBT jbt_handle_session_turnon_result msg->ps_type:%02x")
    TRC_MSG(JBT_JBT_RESTORE_PROCEDURE_RESULTxD,"JBT jbt_restore_procedure, result:%d")
    TRC_MSG(JBT_BT_HANDLE_SESSION_CONNECT_IND_PARMSCON_IDx02X,"JBT bt_handle_session_connect_ind parms.con_id:%02x")
    TRC_MSG(JBT_JBT_HANDLE_SDAP_COMPLETED_RESULT_PARMSRESULTx02X,"JBT jbt_handle_sdap_completed_result parms.result:%02x")
    TRC_MSG(JBT_MSG_ID_BT_BM_SEARCH_RAW_CNF,"JBT MSG_ID_BT_BM_SEARCH_RAW_CNF")
    TRC_MSG(JBT_JBT_HANDLE_POWER_OFF_REQ_RESULT_OPCODEx02X,"JBT jbt_handle_power_off_req_result opcode:%02x")
    TRC_MSG(JBT_JBT_FREE_INDX_DSIZExD,"JBT jbt release block indx :%d,size:%d")
    TRC_MSG(JBT_JBT_HANDLE_REGISTER_RECORD_RESULT,"JBT jbt_handle_register_record_result")
    TRC_MSG(JBT_JBT_HANDLE_SESSION_TURNON_RESULT_PARMSTRANSACTION_IDx08X,"JBT jbt_handle_session_turnon_result parms.transaction_id:%08x")
    TRC_MSG(JBT_JBT_GET_ACL_INFO_CMD_TRANSACTION_IDx08X,"JBT jbt_get_acl_info_cmd, transaction_id:%08x")
    TRC_MSG(JBT_JBT_CMD_CHECK_DEVICE_IN_QUEUE_NODEPARMS_08X,"JBT jbt_cmd_check_device_in_queue node->parms :08x")
    TRC_MSG(JBT_INFOTRANSACTION_IDx08X,"JBT info->transaction_id:%08x")
    TRC_MSG(JBT_JBT_CMD_CHECK_DEVICE_IN_QUEUE_JBT_CMDCODE_DEVICE_DISCOVERY_CMD,"JBT jbt_cmd_check_device_in_queue JBT_CMDCODE_DEVICE_DISCOVERY_CMD")
    TRC_MSG(JBT_BT_HANDLE_SESSION_CONNECT_REQ_CNF_PARMSPS_TYPEx02X,"JBT bt_handle_session_connect_req_cnf parms.ps_type:%02x")
    TRC_MSG(JBT_JBT_GET_ACL_INFO_CMD_BODY,"JBT jbt_get_acl_info_cmd_body")
    TRC_MSG(JBT_L2CAP_IDx04X,"JBT l2cap_id:%04x")
    TRC_MSG(JBT_JBT_DEVICE_DISCOVERYx08X,"JBT jbt_device_discovery:%08x")
    TRC_MSG(JBT_JBT_GET_ACL_INFO_CMD_ADDRx02Xx02Xx02Xx02Xx02Xx02X,"JBT jbt_get_acl_info_cmd, addr:%02x,%02x,%02x,%02x,%02x,%02x")
    TRC_MSG(JBT_MSGBDADDRx02Xx02Xx02Xx02Xx02Xx02X,"JBT msg->bdaddr:%02x,%02x,%02x,%02x,%02x,%02x")
    TRC_MSG(JBT_JBT_CMD_QUEUE_NONCONCURRENT_PROCESSING_END,"JBT jbt_cmd_queue_nonconcurrent_processing end")
    TRC_MSG(JBT_UUIDx04X,"JBT  uuid:%04x")
    TRC_MSG(JBT_SDPDB_INDEXxD_IS_FREE,"JBT  Sdpdb index:%d is free")
    TRC_MSG(JBT_JBT_DEVICE_DISCOVERY_CMD_IAC_CODEx08X,"JBT jbt_device_discovery_cmd, iac_code:%08x")
    TRC_MSG(JBT_JBT_GET_REMOTE_NAME_CMD_TRANSACTION_IDx08X,"JBT jbt_get_remote_name_cmd, transaction_id:%08x")
    TRC_MSG(JBT_JBT_HANDLE_SET_DISCOVERABLE_MODE_RESULT,"JBT jbt_handle_set_discoverable_mode_result")
    TRC_MSG(JBT_JBT_HANDLE_SESSION_ENABLED_RESULT_PARMSTRANSACTION_IDx08X,"JBT jbt_handle_session_enabled_result parms.transaction_id:%08x")
    TRC_MSG(JBT_BT_HANDLE_SESSION_CONNECT_IND_PARMSMTUx04X,"JBT bt_handle_session_connect_ind parms.mtu:%04x")
    TRC_MSG(JBT_JBT_SESSION_DISCONNECT_REQ,"JBT jbt_session_disconnect_req")
    TRC_MSG(JBT_JBT_CMD_CHECK_DEVICE_IN_QUEUE_JBT_CMD_LIST_INSERT_TAIL,"JBT jbt_cmd_check_device_in_queue jbt_cmd_list_insert_tail")
    TRC_MSG(JBT_GAP_INIT_RESET_POWER_STATE_TO_OFF,"JBT  GAP Init, reset power state to OFF")
    TRC_MSG(JBT_JBT_DEREGISTER_RECORD_CMD_RECORD_TRANSACTION_IDx08X,"JBT jbt_deregister_record_cmd record transaction_id:%08x")
    TRC_MSG(JBT_JBT_HANDLE_SESSION_TURNON_RESULT_PARMSCON_IDx02X,"JBT jbt_handle_session_turnon_result parms.con_id:%02x")
    TRC_MSG(JBT_JBT_ALLOCATE_ONE_AVAILABLE_ENTRY_FIND_NONE,"JBT jbt_allocate_one_available_entry find none")
    TRC_MSG(JBT_DB_INDEXx02X,"JBT db_index:%02x")
    TRC_MSG(JBT_MSG_ID_BT_JSR82_CONNECT_IND,"JBT MSG_ID_BT_JSR82_CONNECT_IND")
    TRC_MSG(JBT_SDPDB_INIT,"JBT Sdpdb init")
    TRC_MSG(JBT_JBT_GENERAL_NON_POWERON_REJECT_RETURN_STATUSxD,"JBT jbt_general_non_poweron_reject, return status:%d")
    TRC_MSG(JBT_JBT_GET_LOCAL_COD_CMD_TRANSACTION_IDx08X,"JBT jbt_get_local_cod_cmd, transaction_id:%08x")
    TRC_MSG(JBT_JBT_CMD_LIST_REMOVE_HEAD,"JBT jbt_cmd_list_remove_head")
    TRC_MSG(JBT_MSGLENx02X,"JBT msg->len:%02x")
    TRC_MSG(JBT_JBT_HANDLE_SDAP_COMPLETED_RESULT,"JBT jbt_handle_sdap_completed_result")
    TRC_MSG(JBT_JBT_MALLOC_INDEXxD_SIZExD,"JBT jbt request block index:%d, size:%d")
    TRC_MSG(JBT_JBT_CMD_CHECK_AND_REMOVE_IN_QUEUE_OPCODEx02X,"JBT jbt_cmd_check_and_remove_in_queue opcode:%02x")
    TRC_MSG(JBT_JBT_HANDLE_SESSION_ENABLED_RESULT_MSGPS_TYPEx02X,"JBT jbt_handle_session_enabled_result msg->ps_type:%02x")
    TRC_MSG(JBT_MSG_ID_BT_JSR82_CONNECT_CNF,"JBT MSG_ID_BT_JSR82_CONNECT_CNF")
    TRC_MSG(JBT_JBT_CMD_HANDLE_RESTORE_INDEXx02X,"JBT jbt_cmd_handle_restore index:%02x")
    TRC_MSG(JBT_JBT_HANDLE_GET_RECORD_HANDLE_RESULT_x02X,"JBT jbt_handle_get_record_handle_result :%02x")
    TRC_MSG(JBT_MTUx04X,"JBT mtu:%04x")
    TRC_MSG(JBT_L2CAP_INIT,"JBT l2cap init")
    TRC_MSG(JBT_SECURITYx02X,"JBT security:%02x")
    TRC_MSG(JBT_JBT_ALLOCATE_ONE_AVAILABLE_ENTRY_FIND_ONE,"JBT jbt_allocate_one_available_entry find one")
    TRC_MSG(JBT_JBT_SESSION_SERVICE_DEREGISTRATION,"JBT jbt_session_service_deregistration")
    TRC_MSG(JBT_MSG_ID_BT_JSR82_RESTROE_ACL_CNF,"JBT MSG_ID_BT_JSR82_RESTROE_ACL_CNF")
    TRC_MSG(JBT_BT_HANDLE_SESSION_CONNECT_IND_PARMSTRANSACTION_IDx08X,"JBT bt_handle_session_connect_ind parms.transaction_id:%08x")
    TRC_MSG(JBT_JBT_SDPDB_CONTEXTJBT_REGISTER_RECORDOPERATION_STATE_x02X,"JBT jbt_sdpdb_context.jbt_register_record.operation_state :%02x")
    TRC_MSG(JBT_JBT_HANDLE_SESSION_DEREGISTRATION_RESULT,"JBT jbt_handle_session_deregistration_result")
    TRC_MSG(JBT_JBT_CMD_KICK_CHECK_LIST,"JBT jbt_cmd_kick_check_list")
    TRC_MSG(JBT_JBT_HANDLE_DEVICE_DISCOVERY_ENTRY_RESULT,"JBT jbt_handle_device_discovery_entry_result")
    TRC_MSG(JBT_JBT_GET_LOCAL_COD_CMD_BODY,"JBT jbt_get_local_cod_cmd_body")
    TRC_MSG(JBT_JBT_SESSION_SERVICE_REGISTRATION,"JBT jbt_session_service_registration")
    TRC_MSG(JBT_JBT_CMD_CHECK_AND_REMOVE_IN_QUEUE_JBT_CMD_LIST_RESET,"JBT jbt_cmd_check_and_remove_in_queue jbt_cmd_list_reset")
    TRC_MSG(JBT_JBT_HANDLE_SESSION_TURNON_RESULT_MSGRESULTx02X,"JBT jbt_handle_session_turnon_result msg->result:%02x")
    TRC_MSG(JBT_JSR82_HANDLE_MESSAGE_COMPLETED,"JBT JSR82 Handle message completed")
    TRC_MSG(JBT_BT_HANDLE_SESSION_DISCONNECT_IND_PARMSCON_IDx02X,"JBT bt_handle_session_disconnect_ind parms.con_id:%02x")
    TRC_MSG(JBT_INSERT_NODE_TO_TARGETLIST_TAIL,"JBT insert_node_to_targetList_tail")
    TRC_MSG(JBT_TYPEx02X,"JBT type:%02x")
    TRC_MSG(JBT_MSG_ID_BT_JSR82_TX_READY_IND,"JBT MSG_ID_BT_JSR82_TX_READY_IND")
    TRC_MSG(JBT_BT_HANDLE_SESSION_DISCONNECT_IND_FREE_CHANNEL_BUFFER,"JBT bt_handle_session_disconnect_ind free channel_buffer")
    TRC_MSG(JBT_JBT_SDPDB_CONTEXTJBT_GET_RECORD_HANDLEOPERATION_STATEx02X,"JBT jbt_sdpdb_context.jbt_get_record_handle.operation_state:%02x")
    TRC_MSG(JBT_JBT_CMD_INSERT_QUEUE_TYPExD,"JBT jbt_cmd_insert_queue type:%d")
    TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_GET_LOCAL_DISCOVERABLEOPERATION_STATEx02X,"JBT jbt_gap_context.jbt_get_local_discoverable.operation_state:%02x")
    TRC_MSG(JBT_JBT_HANDLE_POWER_ON_REQ_RESULT,"JBT jbt_handle_power_on_req_result")
    TRC_MSG(JBT_MSG_ID_BT_JSR82_DISCONNECT_IND,"JBT MSG_ID_BT_JSR82_DISCONNECT_IND")
    TRC_MSG(JBT_IN_JBT_SPP_DEVRX_SET_READYTOREAD_FALSE,"JBT In jbt_spp_DevRx(): Set readyToRead FALSE")
    TRC_MSG(JBT_JBT_HANDLE_SESSION_TURNOFF_RESULT_PARMSTRANSACTION_IDx08X,"JBT jbt_handle_session_turnoff_result parms.transaction_id:%08x")
    TRC_MSG(JBT_BT_HANDLE_SESSION_CONNECT_REQ_CNF_PARMSL2CAP_IDx04X,"JBT bt_handle_session_connect_req_cnf parms.l2cap_id:%04x")
    TRC_MSG(JBT_BT_HANDLE_SESSION_CONNECT_REQ_CNF_PARMSCON_IDx02X,"JBT bt_handle_session_connect_req_cnf parms.con_id:%02x")
    TRC_MSG(JBT_JBT_HANDLE_DEVICE_DISCOVERY_COMPLETED_RESULT,"JBT jbt_handle_device_discovery_completed_result")
    TRC_MSG(JBT_JBT_SDPDB_CONTEXTSDP_RECORDDB_INDEXUSED,"JBT jbt_sdpdb_context.sdp_record[db_index].used")
    TRC_MSG(JBT_MSG_ID_BT_APP_SDPDB_REGISTER_CNF,"JBT MSG_ID_BT_APP_SDPDB_REGISTER_CNF")
    TRC_MSG(JBT_MSG_ID_BT_BM_READ_REMOTE_NAME_CNF,"JBT MSG_ID_BT_BM_READ_REMOTE_NAME_CNF")
    TRC_MSG(JBT_JBT_RESTORE_BTSTACK_COD,"JBT jbt_restore_btstack_cod")
    TRC_MSG(JBT_JBT_HANDLE_DEREGISTER_RECORD_RESULTx02X,"JBT jbt_handle_deregister_record_result:%02x")
    TRC_MSG(JBT_JBT_HANDLE_REGISTER_RECORD_RESULT_x02X,"JBT jbt_handle_register_record_result :%02x")
    TRC_MSG(JBT_JBT_CMD_KICK_CHECK_LIST_DONE,"JBT jbt_cmd_kick_check_list_done")
    TRC_MSG(JBT_JBT_HANDLE_DEREGISTER_RECORD_RESULT_x02X,"JBT jbt_handle_deregister_record_result :%02x")
    TRC_MSG(JBT_JBT_SET_LOCAL_COD_CMD_MODEx08X,"JBT jbt_set_local_cod_cmd, mode:%08x")
    TRC_MSG(JBT_JBT_CMD_QUEUE_NONCONCURRENT_COMPLETED,"JBT jbt_cmd_queue_nonconcurrent_completed")
    TRC_MSG(JBT_JBT_DEVICE_DISCOVERY_CANCEL_CMD_TRANSACTION_IDx02X,"JBT jbt_device_discovery_cancel_cmd, transaction_id:%02x")
    TRC_MSG(JBT_JBT_DEVICE_DISCOVERY_CMD_BODY,"JBT jbt_device_discovery_cmd_body")
    TRC_MSG(JBT_JBT_HANDLE_SESSION_ENABLED_RESULT,"JBT jbt_handle_session_enabled_result")
    TRC_MSG(JBT_PSM_CHANNELx04X,"JBT psm_channel:%04x")
    TRC_MSG(JBT_JBT_HANDLE_SESSION_DEREGISTRATION_RESULT_PARMSCON_IDx02X,"JBT jbt_handle_session_deregistration_result parms.con_id:%02x")
    TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_READ_ADDROPERATION_STATEx02X,"JBT jbt_gap_context.jbt_read_addr.operation_state:%02x")
    TRC_MSG(JBT_MSG_ID_BT_BM_DISCOVERY_CNF,"JBT MSG_ID_BT_BM_DISCOVERY_CNF")
    TRC_MSG(JBT_JBT_HANDLE_SDAP_RESULT,"JBT jbt_handle_sdap_result")
    TRC_MSG(JBT_JBT_HANDLE_GET_RECORD_HANDLE_RESULT_x08X,"JBT jbt_handle_get_record_handle_result :%08x")
    TRC_MSG(JBT_MSG_ID_BT_BM_GET_LINK_STATE_CNF,"JBT MSG_ID_BT_BM_GET_LINK_STATE_CNF")
    TRC_MSG(JBT_JBT_REGISTER_RECORD_CMD_RECORD_TRANSACTION_IDx08X,"JBT jbt_register_record_cmd record transaction_id:%08x")
    TRC_MSG(JBT_SEARCH_TYPEx02X,"JBT search_type:%02x")
    TRC_MSG(JBT_JBT_CMD_CHECK_DEVICE_IN_QUEUE_STATUS_x02X,"JBT jbt_cmd_check_device_in_queue status :%02x")
    TRC_MSG(JBT_JBT_SET_ACL_SECURITY_CMD_ADDRx02Xx02Xx02Xx02Xx02Xx02X,"JBT jbt_set_acl_security_cmd, addr:%02x,%02x,%02x,%02x,%02x,%02x")
    TRC_MSG(JBT_INDEXx02X_USEDx02XHANDLEx08X,"JBT index:%02x, used:%02x,handle:%08x")
    TRC_MSG(JBT_JBT_HANDLE_DEVICE_DISCOVERY_CANCEL_RESULT,"JBT jbt_handle_device_discovery_cancel_result")
    TRC_MSG(JBT_TRANSACTION_IDx08X,"JBT transaction_id:%08x")
    TRC_MSG(JBT_JBT_HANDLE_DEREGISTER_RECORD_RESULT_x08X,"JBT jbt_handle_deregister_record_result :%08x")
    TRC_MSG(JBT_SIZEx02X,"JBT size:%02x")
    TRC_MSG(JBT_JBT_HANDLE_GET_REMOTE_NAME_RESULT,"JBT jbt_handle_get_remote_name_result")
    TRC_MSG(JBT_JBT_REGISTER_RECORD_CMD_RECORD_SIZEx08X,"JBT jbt_register_record_cmd record size:%08x")
    TRC_MSG(JBT_MSG_ID_BT_BM_DISCOVERY_CANCEL_CNF,"JBT MSG_ID_BT_BM_DISCOVERY_CANCEL_CNF")
    TRC_MSG(JBT_JBT_HANDLE_SESSION_TURNOFF_RESULT_MSGRESULTx02X,"JBT jbt_handle_session_turnoff_result msg->result:%02x")
    TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_GET_CODOPERATION_STATEx02X,"JBT jbt_gap_context.jbt_get_cod.operation_state:%02x")
    TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_GET_CODTRANSACTION_IDx08X,"JBT jbt_gap_context.jbt_get_cod.transaction_id:%08x")
    TRC_MSG(JBT_MSG_ID_BT_BM_SEARCH_RAW_RESULT,"JBT MSG_ID_BT_BM_SEARCH_RAW_RESULT")
    TRC_MSG(JBT_SESSION_ENTRYTURN_ON_OPOPERATION_STATEx02X,"JBT session_entry->turn_on_op.operation_state:%02x")
    TRC_MSG(JBT_JBT_INIT,"JBT jbt_init")
    TRC_MSG(JBT_INITIALIZE,"JBT_Initialize")
    TRC_MSG(JBT_JBT_SESSION_SERVICE_TURN_ON,"JBT jbt_session_service_turn_on")
    TRC_MSG(JBT_JBT_HANDLE_SESSION_ENABLED_RESULT_PARMSPSM_CHANNELx04X,"JBT jbt_handle_session_enabled_result parms.psm_channel:%04x")
    TRC_MSG(JBT_JBT_POWER_ON_CMD,"JBT jbt_power_on_cmd")
    TRC_MSG(JBT_BT_HANDLE_SESSION_CONNECT_IND_ADDRx02Xx02Xx02Xx02Xx02Xx02X,"JBT bt_handle_session_connect_ind addr:%02x,%02x,%02x,%02x,%02x,%02x")
    TRC_MSG(JBT_JBT_SET_LOCAL_COD_CMD_BODY,"JBT jbt_set_local_cod_cmd_body")
    TRC_MSG(JBT_JBT_SDPDB_RELEASE_ENTRY,"JBT jbt_sdpdb_release_entry")
    TRC_MSG(JBT_JBT_HANDLE_RESTORE_BTSTACK_RESULT,"JBT jbt_handle_restore_btstack_result")
    TRC_MSG(JBT_JBT_GAP_POWER_STATE_RETURN_STATUSxD,"JBT jbt_gap_power_state, return status:%d")
    TRC_MSG(JBT_IN_JBT_SPP_READCASE2_SET_READYTOREAD_TO_FALSE,"JBT In jbt_spp_read():case2 Set readyToRead to FALSE")
    TRC_MSG(JBT_BT_HANDLE_SESSION_CONNECT_REQ_CNF_PARMSTRANSACTION_IDx08X,"JBT bt_handle_session_connect_req_cnf parms.transaction_id:%08x")
    TRC_MSG(JBT_VALUEx08X,"JBT value:%08x")
    TRC_MSG(JBT_BT_HANDLE_SESSION_DISCONNECT_IND_PARMSPS_TYPEx02X,"JBT bt_handle_session_disconnect_ind parms.ps_type:%02x")
    TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_RESTORE_STATEx02X,"JBT jbt_gap_context.jbt_restore_state:%02x")
    TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_SET_CODOPERATION_STATEx02X,"JBT jbt_gap_context.jbt_set_cod.operation_state:%02x")
    TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_DEVICE_DISCOVERYTRANSACTION_IDx08X,"JBT jbt_gap_context.jbt_device_discovery.transaction_id:%08x")
    TRC_MSG(JBT_SECURITY_VALUEx02X,"JBT security_value:%02x")
    TRC_MSG(JBT_JBT_CMD_CHECK_AND_REMOVE_IN_QUEUE_MATCHED,"JBT jbt_cmd_check_and_remove_in_queue matched")
    TRC_MSG(JBT_MSG_ID_BT_JSR82_TURNOFF_SERVICE_CNF,"JBT MSG_ID_BT_JSR82_TURNOFF_SERVICE_CNF")
    TRC_MSG(JBT_SDAP_INIT,"JBT sdap init")
    TRC_MSG(JBT_JBT_POWER_OFF_CMD,"JBT jbt_power_off_cmd")
    TRC_MSG(JBT_MSG_ID_MMI_BT_BCC_GET_DISCOVERABLE_MODE_CNF,"JBT MSG_ID_MMI_BT_BCC_GET_DISCOVERABLE_MODE_CNF")
    TRC_MSG(JBT_BT_HANDLE_SESSION_CONNECT_IND_PARMSRESULTx02X,"JBT bt_handle_session_connect_ind parms.result:%02x")
    TRC_MSG(JBT_JBT_HANDLE_POWER_OFF_REQ_RESULT_JBT_POWEROFF_BY_JBT,"JBT jbt_handle_power_off_req_result JBT_POWEROFF_BY_JBT")
    TRC_MSG(JBT_EXISTED_VALUEx08X_USEDx02X,"JBT existed_value:%08x, used:%02x")
    TRC_MSG(JBT_BT_HANDLE_SESSION_DISCONNECT_IND,"JBT bt_handle_session_disconnect_ind")
    TRC_MSG(JBT_BT_HANDLE_SESSION_CONNECT_IND_PARMSPS_TYPEx02X,"JBT bt_handle_session_connect_ind parms.ps_type:%02x")
    TRC_MSG(JBT_JBT_GET_RECORD_HANDLE_CMD,"JBT jbt_get_record_handle_cmd")
    TRC_MSG(JBT_RESULTx02X,"JBT result:%02x")
    TRC_MSG(JBT_MSGDISCOVERABLE_MODEx02X,"JBT msg->discoverable_mode:%02x")
    TRC_MSG(JBT_JBT_HANDLE_SESSION_DEREGISTRATION_RESULT_PARMSPS_TYPEx02X,"JBT jbt_handle_session_deregistration_result parms.ps_type:%02x")
    TRC_MSG(JBT_MSG_ID_BT_JSR_DEACTIVE_CNF,"JBT MSG_ID_BT_JSR_DEACTIVE_CNF")
    TRC_MSG(JBT_JBT_INIT_COMPLETED,"JBT jbt_init completed")
    TRC_MSG(JBT_BT_HANDLE_SESSION_DISCONNECT_IND_FREE_READRINGBUF,"JBT bt_handle_session_disconnect_ind free ReadRingBuf")
    TRC_MSG(JBT_MSG_ID_MMI_BT_BCC_POWER_ON_CNF,"JBT MSG_ID_MMI_BT_BCC_POWER_ON_CNF")
    TRC_MSG(JBT_JBT_CMD_QUEUE_CONCURRENT_PROCESSING_END,"JBT jbt_cmd_queue_concurrent_processing end")
    TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_POWER_STATUSx02X,"JBT jbt_gap_context.jbt_power_status:%02x")
    TRC_MSG(JBT_JBT_SESSION_CONNECT_REQ,"JBT jbt_session_connect_req")
    TRC_MSG(JBT_JBT_DEREGISTER_RECORD_CMD_HANDLEx08X,"JBT jbt_deregister_record_cmd handle:%08x")
    TRC_MSG(JBT_JBT_CMD_HANDLE_RESTORE_JBT_CMD_QUEUE_CONTEXTCMD_RUN_NOx02X,"JBT jbt_cmd_handle_restore jbt_cmd_queue_context.cmd_run_no:%02x")
    TRC_MSG(JBT_JBT_CMD_QUEUE_NONCONCURRENT_PROCESSING,"JBT jbt_cmd_queue_nonconcurrent_processing")
    TRC_MSG(JBT_MSG_ID_BT_JSR82_ENABLE_SERVICE_CNF,"JBT MSG_ID_BT_JSR82_ENABLE_SERVICE_CNF")
    TRC_MSG(JBT_MSG_ID_BT_JSR_POWER_OFF_REQ,"JBT MSG_ID_BT_JSR_POWER_OFF_REQ")
    TRC_MSG(JBT_COMMAND_REJECT_A,"JBT Command Reject A")
    TRC_MSG(JBT_SDAP_SEARCH_PATTx02Xx02Xx02Xx02X,"JBT  SDAP search patt:%02x,%02x,%02x,%02x")
    TRC_MSG(JBT_DEVICE_NAMEx02X_xC,"JBT Device name:%02x, %c")
    TRC_MSG(JBT_JBT_SESSION_SERVICE_TURN_OFF,"JBT jbt_session_service_turn_off")
    TRC_MSG(JBT_JBT_GAP_CONTEXT_JBT_RESTORE_STATExD,"JBT jbt_gap_context, jbt_restore_state:%d")
    TRC_MSG(JBT_MSGWRITE_TYPEx08X,"JBT msg->write_type:%08x")
    TRC_MSG(JBT_MSG_ID_BT_JSR_TEST_CMD2_REQ,"JBT MSG_ID_BT_JSR_TEST_CMD2_REQ")
    TRC_MSG(JBT_BT_HANDLE_SESSION_CONNECT_IND_PARMSL2CAP_IDx04X,"JBT bt_handle_session_connect_ind parms.l2cap_id:%04x")
    TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_GET_REMOTE_NAMEOPERATION_STATEx02X,"JBT jbt_gap_context.jbt_get_remote_name.operation_state:%02x")
    TRC_MSG(JBT_JBT_REGISTER_RECORD_CMD,"JBT jbt_register_record_cmd")
    TRC_MSG(JBT_JBT_HANDLE_POWER_OFF_REQ_RESULT,"JBT jbt_handle_power_off_req_result")
    TRC_MSG(JBT_COMMAND_REJECT_C_DUE_TO_NO_ENTRY,"JBT Command Reject C Due to no entry")
    TRC_MSG(JBT_JBT_CMD_CHECK_DEVICE_IN_QUEUE_JBT_CMD_LIST_INIT,"JBT jbt_cmd_check_device_in_queue jbt_cmd_list_init")
    TRC_MSG(JBT_JBT_GET_REMOTE_NAME_CMD_BODY,"JBT jbt_get_remote_name_cmd_body")
    TRC_MSG(JBT_JBT_POWER_STATUSx02X,"JBT jbt_power_status:%02x")
    TRC_MSG(JBT_MSG_ID_MMI_BT_BCC_SET_DISCOVERABLE_MODE_CNF,"JBT MSG_ID_MMI_BT_BCC_SET_DISCOVERABLE_MODE_CNF")
    TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_GET_ACL_INFOTRANSACTION_IDx08X,"JBT jbt_gap_context.jbt_get_acl_info.transaction_id:%08x")
    TRC_MSG(JBT_MSG_ID_BT_JSR82_RX_READY_IND,"JBT MSG_ID_BT_JSR82_RX_READY_IND")
    TRC_MSG(JBT_ADDRx02Xx02Xx02Xx02Xx02Xx02X,"JBT addr:%02x,%02x,%02x,%02x,%02x,%02x")
    TRC_MSG(JBT_BT_HANDLE_SESSION_CONNECT_REQ_CNF,"JBT bt_handle_session_connect_req_cnf")
    TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_GET_REMOTE_NAMETRANSACTION_IDx08X,"JBT jbt_gap_context.jbt_get_remote_name.transaction_id:%08x")
    TRC_MSG(JBT_JBT_SET_LOCAL_NAME_CMD_TRANSACTION_IDx08X,"JBT jbt_set_local_name_cmd, transaction_id:%08x")
    TRC_MSG(JBT_JBT_SDPDB_FIND_ENTRY_BY_HANDLE_x08X,"JBT jbt_sdpdb_find_entry_by_handle :%08x")
    TRC_MSG(JBT_COMMAND_REJECT_B,"JBT Command Reject B")
    TRC_MSG(JBT_MSG_ID_BT_JSR_TEST_CMD1_REQ,"JBT MSG_ID_BT_JSR_TEST_CMD1_REQ")
    TRC_MSG(JBT_JBT_DEREGISTER_RECORD_CMD,"JBT jbt_deregister_record_cmd")
    TRC_MSG(JBT_NODECMD_CODExD,"JBT node->cmd_code:%d")
    TRC_MSG(JBT_JBT_CMD_QUEUE_CONCURRENT_PROCESSING_OPCODExD,"JBT jbt_cmd_queue_concurrent_processing opcode:%d")
    TRC_MSG(JBT_SESSION_ENTRYINITIATORxD,"JBT session_entry->initiator:%d")
    TRC_MSG(JBT_JBT_GET_LOCAL_ADDR_CMD_BODY,"JBT jbt_get_local_addr_cmd_body")
    TRC_MSG(JBT_JBT_HANDLE_SESSION_TURNOFF_RESULT,"JBT jbt_handle_session_turnoff_result")
    TRC_MSG(JBT_RESULTx02X_IS_MASTERx02X_IS_AUTHx02X_IS_ENCRYPTED,"JBT result:%02x, is_master:%02x, is_auth:%02x, is_encrypted")
    TRC_MSG(JBT_MSG_ID_BT_BM_WRITE_LOCAL_COD_CNF,"JBT MSG_ID_BT_BM_WRITE_LOCAL_COD_CNF")
    TRC_MSG(JBT_MSGNAME_LENx02X,"JBT msg->name_len:%02x")
    TRC_MSG(JBT_JBT_HANDLE_GET_DISCOVERABLE_MODE_RESULT,"JBT jbt_handle_get_discoverable_mode_result")
    TRC_MSG(JBT_JBT_GET_LOCAL_NAME_CMD_TRANSACTION_IDx08X,"JBT jbt_get_local_name_cmd, transaction_id:%08x")
    TRC_MSG(JBT_JBT_SET_LOCAL_DISCOVERY_CMD_MODEx08X,"JBT jbt_set_local_discovery_cmd, mode:%08x")
    TRC_MSG(JBT_JBT_REGISTER_RECORD_CMD_HANDLEx08X,"JBT jbt_register_record_cmd handle:%08x")
    TRC_MSG(JBT_JBT_SEARCH_AN_EXISTING_ENTRY,"JBT jbt_search_an_existing_entry")
    TRC_MSG(JBT_REMOVE_NODE_FROM_TARGETLIST,"JBT remove_node_from_targetList")
    TRC_MSG(JBT_JBT_HANDLE_SESSION_ENABLED_RESULT_PARMSCON_IDx02X,"JBT jbt_handle_session_enabled_result parms.con_id:%02x")
    TRC_MSG(JBT_JBT_HANDLE_SESSION_TURNOFF_RESULT_PARMSCON_IDx02X,"JBT jbt_handle_session_turnoff_result parms.con_id:%02x")
    TRC_MSG(JBT_JBT_HANDLE_POWER_OFF_REQ_RESULT_TYPEx02X,"JBT jbt_handle_power_off_req_result type:%02x")
    TRC_MSG(JBT_IN_JBT_SPP_READCASE1_SET_READYTOREAD_TO_TRUE_AND_READMORExD,"JBT In jbt_spp_read():case1 Set readyToRead to TRUE and ReadMore=%d")
    TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_GET_ACL_INFOOPERATION_STATEx02X,"JBT jbt_gap_context.jbt_get_acl_info.operation_state:%02x")
    TRC_MSG(JBT_JBT_SDAP_CMD,"JBT jbt_sdap_cmd")
    TRC_MSG(JBT_JBT_HANDLE_SESSION_TURNOFF_RESULT_MSGPS_TYPEx02X,"JBT jbt_handle_session_turnoff_result msg->ps_type:%02x")
    TRC_MSG(JBT_JBT_CMD_QUEUE_CONTEXTQUEUE_KICK_OFF_D,"JBT jbt_cmd_queue_context.queue_kick_off :%d")
    TRC_MSG(JBT_JBT_CMD_LIST_INSERT_TAIL,"JBT jbt_cmd_list_insert_tail")
    TRC_MSG(JBT_MSG_ID_BT_JSR82_DISABLE_SERVICE_CNF,"JBT MSG_ID_BT_JSR82_DISABLE_SERVICE_CNF")
    TRC_MSG(JBT_JBT_SET_ACL_SECURITY_CMD_SECURITY_MODEx02X,"JBT jbt_set_acl_security_cmd, security_mode:%02x")
    TRC_MSG(JBT_JBT_SDAP_SS_CMD,"JBT jbt_sdap_ss_cmd")
    TRC_MSG(JBT_JBT_SDAP_SA_CMD,"JBT jbt_sdap_sa_cmd")
    TRC_MSG(JBT_JBT_SDAP_SSA_CMD,"JBT jbt_sdap_sss_cmd")
    TRC_MSG(JBT_JBT_SDAP_SA_RECORD_HANDLERx08X,"JBT sa record handler:%08x")
    TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_DEVICE_DISCOVERYOPERATION_STATEx02X,"JBT jbt_gap_context.jbt_device_discovery.operation_state:%02x")
    TRC_MSG(JBT_JBT_HANDLE_REGISTER_RECORD_RESULT_x08X,"JBT jbt_handle_register_record_result :%08x")
    TRC_MSG(JBT_JBT_DEVICE_DISCOVERY_CMD_TRANSACTION_IDx08X,"JBT jbt_device_discovery_cmd, transaction_id:%08x")
    TRC_MSG(JBT_PARMSRESULTx02X,"JBT parms.result:%02x")
    TRC_MSG(JBT_BT_HANDLE_SESSION_CONNECT_REQ_CNF_MSGRESULTx02X,"JBT bt_handle_session_connect_req_cnf msg->result:%02x")
    TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_SET_LOCAL_DISCOVERABLEOPERATION_STATEx02X,"JBT jbt_gap_context.jbt_set_local_discoverable.operation_state:%02x")
    TRC_MSG(JBT_JBT_CMD_QUEUE_CONTEXTCMD_RUN_NOx02X,"JBT jbt_cmd_queue_context.cmd_run_no:%02x")
    TRC_MSG(JBT_JBT_CMD_CHECK_DEVICE_IN_QUEUE_CMD_OPCODExD,"JBT jbt_cmd_check_device_in_queue cmd_opcode:%d")
    TRC_MSG(JBT_MSG_ID_BT_JSR82_TURNON_SERVICE_CNF,"JBT MSG_ID_BT_JSR82_TURNON_SERVICE_CNF")
    TRC_MSG(JBT_JBT_SET_LOCAL_COD_CMD_TRANSACTION_IDx08X,"JBT jbt_set_local_cod_cmd, transaction_id:%08x")
    TRC_MSG(JBT_MSG_ID_BT_JSR_KICK_NEW_COMMAND,"JBT MSG_ID_BT_JSR_KICK_NEW_COMMAND")
    TRC_MSG(JBT_BT_HANDLE_SESSION_DISCONNECT_IND_SESSION_ENTRYINITIATORxD,"JBT bt_handle_session_disconnect_ind session_entry->initiator:%d")
    TRC_MSG(JBT_JBT_RESTORE_BTSTACK_LINK_CMD,"JBT jbt_restore_btstack_link_cmd")
    TRC_MSG(JBT_JBT_HANDLE_GET_LOCAL_ADDR_RESULT,"JBT jbt_handle_get_local_addr_result")
    TRC_MSG(JBT_JBT_NODECMD_CODExD,"JBT jbt node->cmd_code:%d")
    TRC_MSG(JBT_MSG_ID_BT_JSR_POWER_OFF_IND,"JBT MSG_ID_BT_JSR_POWER_OFF_IND")
    TRC_MSG(JBT_JBT_GAP_CONTEXTJBT_SET_CODTRANSACTION_IDx08X,"JBT jbt_gap_context.jbt_set_cod.transaction_id:%08x")
    TRC_MSG(JBT_JBT_GET_LOCAL_DISCOVERY_CMD_TRANSACTION_IDx08X,"JBT jbt_get_local_discovery_cmd, transaction_id:%08x")
    TRC_MSG(JBT_JBT_HANDLE_GET_ACL_INFO_RESULT,"JBT jbt_handle_get_acl_info_result")
    TRC_MSG(JBT_MSG_ID_BT_BM_READ_LOCAL_ADDR_CNF,"JBT MSG_ID_BT_BM_READ_LOCAL_ADDR_CNF")
    TRC_MSG(JBT_JBT_SDAP_CONTEXTJBT_SERVICE_SEARCHOPERATION_STATEx02X,"JBT jbt_sdap_context.jbt_service_search.operation_state:%02x")
    TRC_MSG(JBT_JBT_CMD_INSERT_QUEUE,"JBT jbt_cmd_insert_queue")
    TRC_MSG(JBT_SPP_INIT,"JBT Spp init")
    TRC_MSG(JBT_PS_TYPEx02X,"JBT ps_type:%02x")
    TRC_MSG(JBT_CON_IDx02X,"JBT con_id:%02x")
    TRC_MSG(JBT_JBT_HANDLE_SESSION_TURNON_RESULT,"JBT jbt_handle_session_turnon_result")
    TRC_MSG(JBT_JBT_HANDLE_GET_LOCAL_COD_RESULT,"JBT jbt_handle_get_local_cod_result")

    TRC_MSG(FUNC_JBT_OPEN_FILE_FAILED,"JBT UT: Open file failed with errcode=%d")
    TRC_MSG(FUNC_JBT_GET_FILE_SIZE,"JBT UT: Get file size =%d")
    TRC_MSG(FUNC_JBT_PUTBYTES,"JBT UT PutBytes(): actual_write=%d,wanted_write_this_time=%d,accumulate_len=%d,tmp_buf_pos=%d,wanted_write_next_time=%d,fsize=%d")
    TRC_MSG(FUNC_JBT_PUTBYTES_CLOSE01,"JBT UT: Put All Data to TX buf, close file")
    TRC_MSG(FUNC_JBT_READ_FAILED,"JBT UT: Read failed with errcode=%d")
    TRC_MSG(FUNC_JBT_WRITE_FAILED,"JBT UT: Write failed with errcode=%d")
    TRC_MSG(FUNC_JBT_OPEN_FILE_FOR_RECEIVED_DATA,"JBT UT: Open file for received data later successfully")
    TRC_MSG(FUNC_JBT_GETBYTES,"JBT UT GetBytes(): actual read=%d,wanted_read_this_time=%d,accumulate_len=%d,tmp_buf_pos=%d,fsize=%d")
    TRC_MSG(FUNC_JBT_WRITE_BUF_DATA_TO_FILE,"JBT UT: Write Received data in tmp_buf to File")
    TRC_MSG(FUNC_JBT_RECEIVED_ALL_DATA,"JBT UT: Received all data with size=%d")
    TRC_MSG(FUNC_JBT_WAIT_FOR_READY_TO_WRITE_IND,"JBT UT: Wait for MSG READY TO WRITE IND")
    TRC_MSG(FUNC_JBT_WAIT_FOR_READY_TO_READ_IND,"JBT UT: Wait for MSG READY TO READ IND")
    TRC_MSG(FUNC_JBT_SEARCH_EACH_ENTRY,"JBT UT:In jbt_search_an_existing_entry():Search each entry, Its  inx or transactionId value=%d,used=%d")
    TRC_MSG(FUNC_JBT_DISC_IND_CLIENT_FREE_RINGBUF,"JBT UT: bt_handle_session_disconnect_ind(): client free rw ringbuf")
    TRC_MSG(FUNC_JBT_DISC_IND_SRV_RESET_RW_PTR,"JBT UT: bt_handle_session_disconnect_ind(): server resets rw ptr to pStart")
    TRC_MSG(FUNC_JBT_DISC_IND_CLIENT_FREE_CHNL_BUF,"JBT UT: bt_handle_session_disconnect_ind(): client release channel_buffer")
    TRC_MSG(FUNC_JBT_CON_REQ_FAILED_FREE_RINGBUF,"JBT UT: spp client connect req failed, release RW ringbuf")
    TRC_MSG(FUNC_JBT_CON_REQ_FAILED_FREE_CHNL_BUF,"JBT UT: spp client connect req failed, release channel buffer")
    TRC_MSG(FUNC_JBT_REG_SERVICE_ALLOCATE_CHNL_BUF,"JBT SESSION: Register service request: allocate channel buffer")
    TRC_MSG(FUNC_JBT_REG_SERVICE_ALLOCATE_RWRING_BUF,"JBT SESSION: Register service request: allocate rw ring buffer")
    TRC_MSG(FUNC_JBT_ENABLE_SERVICE_FAILED_FREE_RING_BUF,"JBT UT: Enable service failed, release rw ring buf")
    TRC_MSG(FUNC_JBT_ENABLE_SERVICE_FAILED_FREE_CHNL_BUF,"JBT UT: Enable service failed, release channel buffer")
    TRC_MSG(FUNC_JBT_DEREG_SERVICE_SUCCESS_FREE_CHNL_BUF,"JBT UT: Deregister service success: release channel buffer")
    TRC_MSG(FUNC_JBT_DEREG_SERVICE_SUCCESS_FREE_RING_BUF,"JBT UT: Deregister service success: release rw ring buffer")
    TRC_MSG(FUNC_JBT_CON_REQ_ALLOCATE_CHNL_BUF,"JBT: SPP con req, allocate channel buffer")
    TRC_MSG(FUNC_JBT_CON_REQ_ALLOCATE_RING_BUF,"JBT: SPP con req, allocate rw ring buffer")
    TRC_MSG(FUNC_JBT_DISC_IND_CLIENT_FREE_SESSION_ENTRY,"JBT UT: bt_handle_session_disconnect_ind(): client release session_entry")
    TRC_MSG(FUNC_JBT_WRITE_BUT_SESSION_NOT_FIND,"JBT UT: Write but session entry not found, check if the session is closed or not")
    TRC_MSG(FUNC_JBT_CAN_NOT_GET_ONE_FREE_SUBENTRY,"JBT: jbt_session_con_req(): can not get one free subsession entry")
    TRC_MSG(FUNC_JBT_CAN_NOT_FIND_EXISTING_SUBENTRY,"JBT UT: connect_request_cnf(): can not find subsession entry with type=%d, value=%d")
    TRC_MSG(FUNC_JBT_REQ_CMD_FAILED_FREE_BUF_AND_RESET_ENTRY,"JBT: jbt_reset_session_entry() free RWBuf ChnlBuf and reset entries due to req cmd failed")
    TRC_MSG(FUNC_JBT_UT_RW_PTR,"JBT_UT: jbt_ut_rw_acceptor APPRingBuf: start=%08X,read=%08X,write=%08X,end=%08X")
    TRC_MSG(FUNC_JBT_CURRENT_LB_MODE,"JBT: current enable_txrx_loopback_mode=%d")
    TRC_MSG(FUNC_JBT_REJCT_DUE_TO_POWEROFF_ONGOING,"JBT: Reject this request due to POWER OFF state")
    TRC_MSG(FUNC_JBT_UT_SET_ACL_SECURITY_INFO,"JBT: Get notification of Set ACL Security info")
    TRC_MSG(JBT_HANDLE_SET_ACL_SECURITY_RESULT,"JBT: jbt_handle_set_acl_security_result()")

    TRC_MSG(FUNC_JBT_BCC_INIT, "[JSRBCC] jbt_bcc_init")
    TRC_MSG(FUNC_JBT_BCC_AUTHORIZE_REQ_CMD, "[JSRBCC] jbt_authorize_req_cmd, op_state=%d, tran_id=%d, bd_addr[0]=0x%02x, bd_addr[1]=0x%02x, bd_addr[2]=0x%02x, bd_addr[3]=0x%02x, bd_addr[4]=0x%02x, bd_addr[5]=0x%02x")
    TRC_MSG(FUNC_JBT_BCC_IS_AUTHORIZED_REQ_CMD, "[JSRBCC] jbt_is_authorized_req_cmd, op_state=%d, tran_id=%d, bd_addr[0]=0x%02x, bd_addr[1]=0x%02x, bd_addr[2]=0x%02x, bd_addr[3]=0x%02x, bd_addr[4]=0x%02x, bd_addr[5]=0x%02x")
    TRC_MSG(FUNC_JBT_BCC_IS_TRUSTED_REQ_CMD, "[JSRBCC] jbt_is_trusted_req_cmd, op_state=%d, tran_id=%d, bd_addr[0]=0x%02x, bd_addr[1]=0x%02x, bd_addr[2]=0x%02x, bd_addr[3]=0x%02x, bd_addr[4]=0x%02x, bd_addr[5]=0x%02x")
    TRC_MSG(FUNC_JBT_BCC_GET_HOST_SECURITY_MODE_REQ_CMD, "[JSRBCC] jbt_get_host_security_mode_cmd, op_state=%d, tran_id=%d")
    TRC_MSG(FUNC_JBT_BCC_GET_PREKNOWN_DEV_COUNT_REQ_CMD, "[JSRBCC] jbt_get_preknown_device_count_req_cmd, op_state=%d, tran_id=%d")
    TRC_MSG(FUNC_JBT_BCC_GET_PREKNOWN_DEV_REQ_CMD, "[JSRBCC] jbt_get_preknown_devices_req_cmd, op_state=%d, tran_id=%d")
    TRC_MSG(FUNC_JBT_BCC_GET_NATIVE_PWR_STATUS_REQ_CMD, "[JSRBCC] jbt_get_native_pwr_status_req_cmd, op_state=%d, tran_id=%d")
    TRC_MSG(FUNC_JBT_BCC_AUTHORIZE_REQ_CMD_RESULT, "[JSRBCC] jbt_authorize_req_cmd_result, result=%d, tran_id=%d, bd_addr[0]=0x%02x, bd_addr[1]=0x%02x, bd_addr[2]=0x%02x, bd_addr[3]=0x%02x, bd_addr[4]=0x%02x, bd_addr[5]=0x%02x")
    TRC_MSG(FUNC_JBT_BCC_IS_AUTHORIZED_REQ_CMD_RESULT, "[JSRBCC] jbt_is_authorized_req_cmd_result, result=%d, tran_id=%d, bd_addr[0]=0x%02x, bd_addr[1]=0x%02x, bd_addr[2]=0x%02x, bd_addr[3]=0x%02x, bd_addr[4]=0x%02x, bd_addr[5]=0x%02x")
    TRC_MSG(FUNC_JBT_BCC_IS_TRUSTED_REQ_CMD_RESULT, "[JSRBCC] jbt_is_trusted_req_cmd_result, result=%d, tran_id=%d, bd_addr[0]=0x%02x, bd_addr[1]=0x%02x, bd_addr[2]=0x%02x, bd_addr[3]=0x%02x, bd_addr[4]=0x%02x, bd_addr[5]=0x%02x")
    TRC_MSG(FUNC_JBT_BCC_GET_HOST_SECURITY_MODE_REQ_CMD_RESULT, "[JSRBCC] jbt_get_host_security_mode_cmd_result, security_mode=%d, tran_id=%d")
    TRC_MSG(FUNC_JBT_BCC_GET_PREKNOWN_DEV_COUNT_REQ_CMD_RESULT, "[JSRBCC] jbt_get_preknown_device_count_req_cmd_result, dev_count=%d, tran_id=%d")
    TRC_MSG(FUNC_JBT_BCC_GET_PREKNOWN_DEV_REQ_CMD_RESULT, "[JSRBCC] jbt_get_preknown_devices_req_cmd_result, device_count=%d, tran_id=%d")
    TRC_MSG(FUNC_JBT_BCC_GET_NATIVE_PWR_STATUS_REQ_CMD_RESULT, "[JSRBCC] jbt_get_native_pwr_status_req_result, native_pwr_status=%d, tran_id=%d")
    TRC_MSG(JBT_FINALIZE_REQ_EVENT,"jbt_finalize(): block in request events =%08X")
    TRC_MSG(JBT_FINALIZE_COMPLETE,"jbt_finalize(): retrieve events successfully, end of jbt_finalize()")
    TRC_MSG(JBT_FINALIZE_ALREADY_OFF,"jbt_finalize(): jbt is already in power off state, end of jbt_finalize()")
    TRC_MSG(JBT_POWEROFF_BY_MMI_END_BEFORE_JBT_POWER_OFF,"jbt_handle_power_off_req_result():Recv power_off_ind before end of JBT_POWER_OFF_CMD")
    TRC_MSG(JBT_FINALIZE_WAIT_POWER_ON,"jbt_finalize():waiting JBT power on end")
    TRC_MSG(JBT_FINALIZE_START_POWER_OFF,"jbt_finalize(): powered on, start to power of JBT")
    TRC_MSG(JBT_FINALIZE_COMPLETE_POWER_ON_FAILED,"jbt_finalize(): wait for power on but failed, finalize complete")
    TRC_MSG(JBT_SET_END_POWER_ON_EVENT,"jbt_finalize(): set event due to recv result of jbt power on")
    TRC_MSG(JBT_JBT_GET_LOCAL_NAME_CMD_BODY,"jbt_get_local_name_cmd_body()")
    TRC_MSG(JBT_BT_GET_LOCAL_NAME_TRANSACTION_ID,"jbt_get_local_name_cmd_body() with transaction_id=%d")
    TRC_MSG(JBT_BT_COMPLETE_RESTORE_MMI_AND_COD,"jbt_restore_procedure(): complete of MMI restore and CoD restored by MMI, not from JBT to BTStack")
    TRC_MSG(JBT_HANDLE_GET_LOCAL_NAME_RESULT,"jbt_handle_get_local_name_result()")
    TRC_MSG(FUNC_JBT_RING_WRITE_DATA_INFO,"JBTRING_WriteData(): pStart=%08x,pEnd=%08x,pRead=%08x,pWrite=%08x")
    TRC_MSG(FUNC_JBT_RING_READ_DATA_INFO,"JBTRING_ReadData():pStart=%08x,pEnd=%08x,pRead=%08x,pWrite=%08x")
    TRC_MSG(FUNC_JBT_RING_READ_DATA_CASE1,"JBTRING_ReadData(), case1: readable_len=%d")
    TRC_MSG(FUNC_JBT_RING_READ_DATA_CASE2,"JBTRING_ReadData(), case2: first_readable_len=%d,total_data_len=%d")
    TRC_MSG(FUNC_JBT_RING_READ_DATA_CASE2_INFO,"JBTRING_ReadData() case2:pStart=%08x,pEnd=%08x,pRead=%08x,pWrite=%08x")
    TRC_MSG(FUNC_JBT_RING_READ_DATA_CASE2_LEFT_INFO,"JBTRING_ReadData():left_wanted_read_len=%d,left_available_data_len=%d,actual_read_len=%d")
    TRC_MSG(FUNC_JBT_CANCEL_INQUIRY_DUE_TO_VM_TERMINATE,"JBT:Cancel an ongoing Discovery operation due to speed VM termination")
    TRC_MSG(FUNC_JBT_CANCEL_INQUIRY_FAILED_WHILE_VM_TERMINATE,"JBT:Cancel Discovery operation failed while VM termination")
    TRC_MSG(FUNC_JBT_GET_CNF_GENERATE_BY_JBT_DUE_TO_VM_TERMINATE,"JBT:get cnf generated by JBT due to vm termination with case=%d")
    TRC_MSG(FUNC_JBT_DISC_IND_SUBSESSION_COUNT,"JBT:Disc_Ind_hdler, subsession_count=%d")
    TRC_MSG(FUNC_JBT_ADM_CREATE_INIT,"JBT: Adm is created at init stage due to jvm_main invokes jbt_init")
    TRC_MSG(FUNC_JBT_ADM_ALREADY_CREATE_INIT,"JBT: Adm is already created in jbt_init")
    TRC_MSG(FUNC_JBT_ADM_CREATE_POWER_ON_SUCCESS,"JBT: Adm is created when jbt_power_on is ok")
    TRC_MSG(FUNC_JBT_ADM_DELETE_STATUS,"JBT:status of kal_adm_delete()=%d")
    TRC_MSG(FUNC_JBT_MEM_ALLOC_INX_SIZE_PTR,"jbt_malloc inx=%d,size=%d,ptr=%08X")
    TRC_MSG(FUNC_JBT_MEM_FREE_INX_SIZE_PTR,"jbt_free inx=%d,size=%d,ptr=%08X")
    TRC_MSG(FUNC_JBT_REPORT_JBT_POWER_OFF_OR_ABNORMAL_RESET,"jbt reports JBT_POWER_OFF_OR_ABNORMAL_RESET to vm after jbt_init")
/* JBT TRACE END */

/* OBEX TRACE START */
TRC_MSG(BT_OBEX_TRACE_START,"BT_OBEX_TRACE_START")  /* MBT LOG FILTER. DO NOT MODIFY */

/* OBEX */
    TRC_MSG(BTSTACK_SENDTXBUFFER_STATUS_xD,"BTSTACK_SendTxBuffer status: %d")
    TRC_MSG(OBEX_RECEIVED_NEW_OBEX_COMMAND_BEFORE_PREVIOUS_RESPONSE_SENT_SUCCESSFULLY,"[OBEX]---ERROR: Received new OBEX command before previous response sent successfully.")
    TRC_MSG(OBEX_CLIENT_RFCOMM_EVENT_RECEIVED_xD_BYTES,"OBEX: Client RFCOMM Event: Received %d bytes")
    TRC_MSG(OBEX_SERVER_SEQUENCE_NUMBER_ERROR__xD,"OBEX: Server Sequence Number Error = %d!!")
    TRC_MSG(DATAIND_RECV_FAILED_WSAGETLASTERROR__xD,"DataInd: Recv() failed, WSAGetLastError() = %d")
    TRC_MSG(OBEX_TRANSPORT_BUSY,"OBEX: Transport Busy!")
    TRC_MSG(OBEX_ASYNDPROC_SOCKET_xX_RECEIVED_MESSAGE_CLOSE,"OBEX: AsyndProc() Socket %x received message: Close")
    TRC_MSG(OBEX_SERVER_RFCOMM_EVENT_TRANSMIT_COMPLETE,"OBEX: Server RFCOMM Event: RFEVENT_PACKET_HANDLED,status=%d, dataLen=(%d), appHndl=0x%x")
    TRC_MSG(OBEX_SERVER_L2CAP_EVENT_TRANSMIT_COMPLETE,"OBEX: Server L2CAP Event: RFEVENT_PACKET_HANDLED,status=%d, dataLen=(%d), appHndl=0x%x")    
    TRC_MSG(OBEX_CLIENT_RFCOMM_EVENT_CLOSED,"OBEX: Client RFCOMM Event: RFEVENT_CLOSED")
    TRC_MSG(OBEX_CLIENT_L2CAP_EVENT_CLOSED,"OBEX: Client L2CAP Event: RFEVENT_CLOSED")    
    TRC_MSG(OBEX_TCP_CONNECT_FAILED,"OBEX: TCP Connect failed.")
    TRC_MSG(OBEX_SERVER_RECEIVED_CLOSE_FOR_SESSION_OTHER_THAN_THE_ACTIVE_ONE,"OBEX: Server received Close for session other than the active one.")
    TRC_MSG(OBEX_CLIENT_CMEVENT_DATA_LINK_DIS_REPORTS_LINK_DISCONNECT,"OBEX Client: CMEVENT_DATA_LINK_DIS Reports Link Disconnect.")
    TRC_MSG(OBEX_RECEIVED_OBEX_CONNECT_OBEX_PACKET_SIZE_xD_BYTES,"OBEX: Received OBEX Connect. OBEX Packet Size %d bytes.")
    TRC_MSG(OBEX_RF_SENDDATA_FAILED,"OBEX: RF_SendData FAILED: return (%d)")
    TRC_MSG(OBEX_SERVER_SENT_RFPKT_NUM,"---OBEX: SERVER sent out (%d) RF_PACKET---")
    TRC_MSG(OBEX_ASYNCPROC_SOCKET_xX_RECEIVED_MESSAGE_WRITE_CONN_ACCEPTED,"OBEX: AsyncProc() Socket %x received message: Write (Conn Accepted).")
    TRC_MSG(OBEX_ASYNCPROC_CLIENT_SOCKET_xX_RECEIVED_MESSAGE_READ,"OBEX: AsyncProc() Client Socket %x received message: Read")
    TRC_MSG(OBEX_NONCE_TRC,"OBEX: Nonce:")
    TRC_MSG(BEFORE_BTSTACK_SENDTXBUFFER_SIF_xD,"before BTSTACK_SendTxBuffer SIF: %d")
    TRC_MSG(OBEX_CLIENT_RECV_RFPKT_NUM,"---OBEX: CLIENT recv (%d) RF_PACKET---")
    TRC_MSG(TCPSTACK_SOCKET_FAILURExD,"TCPSTACK: Socket failure=%d")
    TRC_MSG(OBEX_SEQNUM_xD,"OBEX: SeqNum: %d.")
    TRC_MSG(BTCLIENTSDPCALLBACK_BTXPCLIENTSTATE__OCS_DISCONNECTING,"BtClientSdpCallback: btxp->client.state == OCS_DISCONNECTING")
    TRC_MSG(BTCLIENTSDPCALLBACK_BTXPCLIENTSTATE_L2CAP_OCS_DISCONNECTING,"BtClientSdpCallback: btxp->client.state == OCS_DISCONNECTING")
    TRC_MSG(OBEX_CLIENT_IGNORED_EVENT_xD,"OBEX Client: Ignored Event %d")
    TRC_MSG(OBEX_CLIENT_IGNORED_RFCOMM_EVENT_xD,"OBEX Client: Ignored RFCOMM Event %d")    
    TRC_MSG(OBEX_CLIENT_IGNORED_L2CAP_EVENT_xD,"OBEX Client: Ignored L2CAP Event %d")    
    TRC_MSG(OBEX_CLIENT_RFCOMM_EVENT_TRANSMIT_COMPLETE,"OBEX: Client RFCOMM Event: RFEVENT_PACKET_HANDLED, status=%d,dataLen=%d")
    TRC_MSG(OBEX_CLIENT_L2CAP_EVENT_TRANSMIT_COMPLETE,"OBEX: Client L2CAP Event: RFEVENT_PACKET_HANDLED, status=%d,dataLen=%d")    
    TRC_MSG(BTSTACK_SENDTXBUFFER_LEN_xD,"BTSTACK_SendTxBuffer len: %d")
    TRC_MSG(OBEX_CALL_OBPARSE_BUFFAVAIL,"[OBEX] call ObParserBuffAvail()... appHndl(0x%x) - (%d)")
    TRC_MSG(OBEX_ASYNDPROC_SOCKET_xX_RECEIVED_MESSAGE,"OBEX: AsyndProc() Socket %x received message:")
    TRC_MSG(OBEX_IGNORED_EVENT_xD,"OBEX: Ignored Event %d")
    TRC_MSG(OBEX_CLIENT_SEQUENCE_STATUSxD_EXPECT_SEQNUMxD_NEXTSEQNUMxD_GOT_SEQNUMxD,"OBEX: Client Sequence: Status=%d, Expect: SeqNum=%d, NextSeqNum=%d, Got: SeqNum=%d.")
    TRC_MSG(OBEX_CONNECTED_TRC,"OBEX: Connected.")
    TRC_MSG(OBEX_SESSION_ID_TRC,"OBEX: Session ID:")
    TRC_MSG(OBEX_SENDTXBUFFER,"[OBEX] ObParserTxBuffAvail Call OBSTACK_SendTxBuffer. AppHndl=0x%x, obp=0x%x")
    TRC_MSG(OBEX_NO_FREE_PACKET,"[OBEX] --- OBPROT_TxDone: NO FREE packet ---- ")
    TRC_MSG(OBEXCLIENTCONNECTIONCALLBACK_BTXPCLIENTSTATE__OCS_DISCONNECTING,"ObexClientConnectionCallback: btxp->client.state == OCS_DISCONNECTING")
    TRC_MSG(OBEX_SERVER_RFCOMM_EVENT_RECEIVED_xD_BYTES,"OBEX: Server RFEVENT_DATA_IND: Received %d bytes")
    TRC_MSG(OBEX_SERVER_RFCOMM_EVENT_CLOSED,"OBEX: Server RFCOMM Event: RFEVENT_CLOSED. server state=(%d),appHndl=0x%x")
    TRC_MSG(OBSERVERSENDRESPONSE_xD,"ObServerSendResponse: %d")
    TRC_MSG(OBEX_BT_DEBUGx02X,"OBEX: %02x")
    TRC_MSG(OBEX_OBEXPACKET_RECEIVED, "[OBEX]=== One OBEX Packect is received. packetLen=(%d) ===")
    TRC_MSG(OBEX_TIMEOUT_x0X,"OBEX: Timeout: %0X.")
    TRC_MSG(OBEX_INVALID_SESSION_PARAMETERS_HEADER,"OBEX: Invalid Session Parameters Header!")
    TRC_MSG(OBEX_ASYNCPROC_SOCKET_xX_RECEIVED_MESSAGE_ACCEPT,"OBEX: AsyncProc() Socket %x received message: Accept")
    TRC_MSG(OBEX_RFCOMM_SENDDATA_FAILED,"[OBEX]==== RF_SendData failed! ===, status=%d")
    TRC_MSG(OBEX_CLIENT_RECV_RESPONSE_WITH_NO_FINALBIT,"[OBEX] === OBClientEventInd(OBPE_OPER_IND) Error: respcode(0x%x) has NO Final Bit. Disconnect...")
    TRC_MSG(OBEX_CLIENT_RESUME_SEQUENCE_STATUSxD_EXPECT_SEQNUMxD_NEXTSEQNUMxD_GOT_SEQNUMxD,"OBEX: Client Resume Sequence: Status=%d, Expect: SeqNum=%d, NextSeqNum=%d, Got: SeqNum=%d.")
    TRC_MSG(OBEX_SELECT_WINDOW_REGISTRATION_FAILED_xX,"OBEX: Select Window Registration failed, %x")
    TRC_MSG(OBEX_CMEVENT_DATA_LINK_DIS,"OBEX: CMEVENT_DATA_LINK_DIS. server state=(%d)")
    TRC_MSG(OBEX_SERVER_SEQUENCE_NUMBER_VALID,"OBEX: Server Sequence Number Valid!!")
    TRC_MSG(OBEX_OBPROT_TXDONE,"[OBEX] OBPROT_TxDone: AppHndl= 0x%x")
    TRC_MSG(OBEX_SEND_PACKET_WHEN_TRANSPORT_LAYER_IS_DISCONNECTED,"[OBEX]---ObParserSendPacket when obp->rxState == OBSC_RX_NOP: no CONNECTTION.")
    TRC_MSG(OBEX_CLIENTSENDCOMMAND,"OBEX: ClientSendCommand: 0x%x")
    TRC_MSG(OBEX_CALL_RF_SENDDATA,"OBEX: call RF_SendData, datalen=%d, b1=0x%x,b2=0x%x,b3=0x%x")
    TRC_MSG(OBEX_CALL_RF_CLOSECHANNEL,"OBEX: BTSTACK_DisconnectReq call RF_CloseChannel")
    TRC_MSG(OBEX_CLIENT_RFCOMM_DATA_IND,"OBEX: BtClientCallBack RFCOMM_DATA_IND. received (%d) bytes")
    TRC_MSG(OBEX_CLIENT_RFCOMM_OPEN,"OBEX: BtClientCallBack RFCOMM_OPEN!client.state=(%d)")
    TRC_MSG(OBEX_CLIENT_L2CAP_OPEN,"OBEX: BtL2ClientCallBack L2EVENT_OPEN!client.state=(%d)")
    TRC_MSG(OBEX_CLIENT_RFCOMM_CLOSED,"[OBEX] BtClientCallBack btxp=0X%x, RFChannel 0X%x :RFEVENT_CLOSED!! client.state=(%d)")
    TRC_MSG(OBEX_SERVER_RFCOMM_OPEN_IND,"OBEX: BtServerCallBack RFCOMM_OPEN_IND! server state=(%d), appHndl=0x%x")
    TRC_MSG(OBEX_SERVER_RFCOMM_OPEN,"OBEX: BtServerCallBack RFCOMM_OPEN! server state=(%d), appHndl=0x%x")
    TRC_MSG(OBEX_CLIENT_DEINIT, "[OBEX]: OBEX_ClientDeinit...")
    TRC_MSG(OBEX_CLIENT_SENDREQUEST, "[OBEX] OBEX_ClientSendRequest....opcode=%d")
    TRC_MSG(OBEX_CLIENT_SENDREQUEST_BUSY, "[OBEX]OBEX_ClientSendRequest return OB_STATUS_BUSY!")
    TRC_MSG(OBEX_CLIENT_SENDREQUEST_NOCONNECT, "[OBEX]OBEX_ClientSendRequest return OB_STATUS_NO_CONNECT!")
    TRC_MSG(OBEX_CLIENT_SENDREQUEST_TOOSMALL, "[OBEX]OBEX_ClientSendRequest return OB_STATUS_PACKET_TOO_SMALL!")
    TRC_MSG(OBEX_CLIENT_ABORT, "[OBEX]OBEX_ClientAbort...")
    TRC_MSG(OBEX_CLIENT_ABORT_NOCONNECT, "[OBEX]OBEX_ClientAbort return OB_STATUS_NO_CONNECT!")
    TRC_MSG(OBEX_CLIENT_ABORT_BUSY, "[OBEX]OBEX_ClientAbort return OB_STATUS_BUSY!")
    TRC_MSG(OBEX_CLIENT_EVENTIND, "[OBEX] ObClientEventInd - OBPE_Event: %d")
    TRC_MSG(OBEX_CLIENT_PROCESS_SIMPLEEVENT, "[OBEX] ProcessSimpleOpEvents - response=%x")
    TRC_MSG(OBEX_CLIENT_COMPLETE, "[OBEX] ClientComplete - OBCE_Event=%d")
    TRC_MSG(OBEX_CLIENT_SENDREQUEST_INVALIDPARAM, "[OBEX]OBEX_ClientSendRequest return OB_STATUS_INVALID_PARM!")
    TRC_MSG(OBEX_SERVER_EVENTIND,"[OBEX] ObServerEventInd Event: %d")
    TRC_MSG(OBEX_SERVER_PUTDELETE, "======OBEX::SERVER PUT-DELETE===")
    TRC_MSG(OBEX_SERVER_CREATEEMPTY, "======OBEX::SERVRE PUT CREATE-EMPTY ===")
    TRC_MSG(OBEX_PARSE_RX, "[OBEX]ObParseRx..AppHndl=0x%x, obp=0x%x, obp->rxState=(%d), b1=0x%x,b2=0x%x,b3=0x%x")
    TRC_MSG(OBEX_PARSE_RX_OPCODE, "[OBEX]ObParseRx.ServerParser.opcode=0x%x,obp->rxState=(%d), obp=0x%x, packetLen=%d, obp=0x%x")
    TRC_MSG(OBEX_PARSE_RX_RSP, "OBEX: ObParseRx..ClientParser.rsp=0x%x, packetLen=%d, obp=0x%x")
    TRC_MSG(OBEX_PARSE_RX_STAGEBUFF0, "[OBEX] ServerParser: obp->stageBuff[0] = 0x%x")
    TRC_MSG(OBEX_PARSE_RX_OPCODE_MISMATCH, "OBEX: opcode missmatch : opcode=0x%x, obp->stageBuff[0] = 0x%x - disconnecting")
    TRC_MSG(OBEX_PARSE_RX_COMPARE,"[OBEX] obp->stageBuff[0]=0x%x, obp->opcode=0x%x")
    TRC_MSG(OBEX_PARSE_RX_DEFER_OPER, "[OBEX]===ObParserRx: obp->flags |= OBPF_DEFER_OPER_IND!")
    TRC_MSG(OBEX_PARSE_RX_DEFER_OPER_FLOAT, "[OBEX](obp->flags & OBPF_DEFER_OPER_IND), call eventIndFunc with OBPE_NO_EVENT!")
    TRC_MSG(OBEX_PARSER_SENDPACKET, "[OBEX]---AppHndl=0x%x,obp=0x%x ObParserSendPacket cmd=0x%x, packetLen=(%d) ...")
    TRC_MSG(OBEX_NO_FREETXBUFFER, "[OBEX]----obp(0x%x) cmd(0x%x) OBSTACK_GetTxBuffer return NULL: obp->flags|=OBPF_PENDING")
    TRC_MSG(OBEX_SENDRESPONDSE, "OBEX: obp:0x%x ObServerSendResponse: rsp=0x%x, handle=%d")
    TRC_MSG(OBEX_SENDCOMMAND, "OBEX: obp:0x%x ObClientSendCommand: cmd=0x%x, handle=%d")
    TRC_MSG(OBEX_SETABORT, "[OBEX]obp:0x%x ObParserSetAbort...")
    TRC_MSG(OBEX_TX_DONE, "[OBEX]====obp:0x%x ObParserTxDone =====")
    TRC_MSG(OBEX_REMOVE_DEFER, "[OBEX]obp:0X%x (obp->flags & OBPF_DEFER_OPER_IND), call eventIndFunc with OBPE_OPER_IND...")
    TRC_MSG(OBEX_PARSER_DISONNECT, "[OBEX]ObParserDisconnect...parser=0X%x")
    TRC_MSG(OBEX_PARSER_DISONNECTIND, "[OBEX]ObParserDisconnectInd...parser=0X%x")
    TRC_MSG(OBEX_PARSER_LINKTRANS,"[OBEX]obp:0X%x ObParserLinkTransport set stack!")
    TRC_MSG(OBEX_BTSTACK_CLIENTCONNECT, "[OBEX]BTSTACK_ClientConnect....ClientState=%d")
    TRC_MSG(OBEX_BTSTACK_CLIENTDISCONNECT, "[OBEX]BTSTACK_ClientDisconnect...ClientState=(%d) bConnType(%d)")
    TRC_MSG(OBEX_BTSTACK_RFCLOSECHANNEL, "[OBEX]BTSTACK_ClientDisconnect call RF_CloseChannel channel=0X%x, btxp=0X%x")
    TRC_MSG(OBEX_BTSTACK_RFCLOSECHANNEL_RETURN, "[OBEX]RF_CloseChannel return: %d")
    TRC_MSG(OBEX_SET_MASTER, "[OBEX] Try to be a master when receiving RFEVENT_OPEN event in BtServCallBack()")
    TRC_MSG(OBEX_SERVER_CONN_CB, "[OBEX] CMGR ServerCallback: Event=%d, Status=%d, server state =(%d)")
    TRC_MSG(OBEX_CLIENT_CONN_CB, "[OBEX] CMGR ClientCallback Event=%d, Status=%d")
    TRC_MSG(OBEX_SERVER_REMOVE_DL, "[OBEX]ObexServerConnectionCallback call CMGR_RemoveDataLink...")
    TRC_MSG(OBEX_SERVER_BDADDR_ERR, "[OBEX] Server: bad address: Not the connect bd_addr")
    TRC_MSG(OBEX_CLIENT_BDADDR_ERR, "[OBEX]CLIENT: Not the connect bd_addr")
    TRC_MSG(OBEX_CLIENT_SDPCALLBACK, "[OBEX] BtClientSdpCallback with result=%d, attribute_index=%d")
    TRC_MSG(OBEX_CLIENT_OPEN_RFCHANNEL, "[OBEX]call RF_OpenClientChannel:btxp->client.channel =0x%x, uuid:0x%04x channel:0x%02x")
    TRC_MSG(OBEX_TPCONNECT, "[OBEX]OBEX_TpConnect....")
    TRC_MSG(OBEX_TPCONNECT_INVALIDPARAM, "[OBEX]OBEX_TpConnect return OB_STATUS_INVALID_PARM")
    TRC_MSG(OBEX_TPCONNECT_CONNECTED, "[OBEX]OBEX_TpConnect already has a connection!!")
    TRC_MSG(OBEX_TPCONNECT_RETURN, "[OBEX] OBEX_TpConnect return status = %d")
    TRC_MSG(OBEX_TPDISCONNECT, "[OBEX]OBEX_TpDisconnect ....")
    TRC_MSG(OBEX_TPDISCONNECT_INVALID_PARM,"[OBEX]OBEX_TpDisconnect .return OB_STATUS_INVALID_PARM.")
    TRC_MSG(OBEX_TPDISCONNECT_NOCONNECT, "[OBEX]---OBEX_TpDisconnect return OB_STATUS_NO_CONNECT!!")

    TRC_MSG(OBEX_CLIENT_L2SDPCALLBACK, "[OBEX] BtClientL2SdpCallback with result=%d, attribute_index=%d")
    TRC_MSG(OBEX_CLIENT_OPEN_L2Channel, "[OBEX]call l2cap_OpenClientChannel:btxp->client.channel =0x%x, uuid:0x%04x channel:0x%02x psm:0x%x")
    TRC_MSG(OBEX_OPEN_L2CHANNEL_RETURN, "[OBEX] L2CAP_OpenClientChannel return : (%d)")
    TRC_MSG(OBEX_CLIENT_L2CALLBACK, "OBEX: L2CAP_callback channelId(0x%x) event(0x%x) psmvalue(0x%x)")
    
    TRC_MSG(OBEX_RFCOMM_REGISTER_SERVER_CHANNEL_FAILED, "[OBEX] Fatal Error: RF_RegisterServerChannel FAILED!")
    TRC_MSG(OBEX_SERVER_EXPECT_FINALBIT, "[OBEX]Server:ProcessGeneral:Opcode=(0x%x),Final bit expected - Rejecting")
    TRC_MSG(OBEX_PARSERX_HEADERLEN_ERROR, "[OBEX]ObParseRx: Header Length is not 0 - disconnect")
    TRC_MSG(OBEX_PARSERX_PACKETLEN_ERROR, "[OBEX]ObParseRx: Packet data Overflow/Underflow - disconnect! PacketLen : %d CurPacketLen : %d")
    TRC_MSG(OBEX_PACKET_SIZE_OVERFLOW, "[OBEX]Error: Sending Packet (%d bytes) exceeds Maximum OBEX Packet Size.")
    TRC_MSG(OBEX_VERIFY_SERVER_EVENT_FAILED, "[OBEX]Verify Server Event Failed: Received event %d, Last event %d")
    TRC_MSG(OBEX_CMGR_SCO_REJECT, "[OBEX] ==== CMGR_ClientCallback: BT_STATUS_SCO_REJECT ===")
    TRC_MSG(OBEX_CMGR_BTCHIP_REASON, "[OBEX] ==== CMGR_ClientCallback: BT_STATUS_BTCHIP_REJECT === ")
    TRC_MSG(OBEX_DISCONNECT_CLIENT_LINK, "[OBEX] BtDisconnectClientLink...")
    TRC_MSG(OBEX_START_SERVICE_QUERY, "[OBEX]---BtStartServiceQuery...")
    TRC_MSG(OBEX_START_L2CAP_SERVICE_QUERY, "[OBEX]---BtStartL2ServiceQuery...")    
    TRC_MSG(OBEX_SERVER_READ_HEADERBLOCK_ERROR,"[OBEX] == ObServerReadHeaderBlock ReadFile Error! rcode=%d")
    TRC_MSG(OBEX_CLIENT_STATE, "[OBEX] btxp->client.state=%d")
    TRC_MSG(OBEX_RESEND_PENDING_PACKET, "[OBEX] ObParserTxBuffAvail: Re-send the pending packet obp=0x%x...")
    TRC_MSG(OBEX_CALL_CMGR_CREATEDATALINK, "[OBEX] call CMGR_CreateDataLink...")
    TRC_MSG(OBEX_CMGR_CREATEDATALINK_RETURN, "[OBEX] CMGR_CreateDataLink return : %d")
    TRC_MSG(OBEX_CMGR_REMOVEDATALINK_RETURN, "[OBEX] CMGR_RemoveDataLink return : %d")
    TRC_MSG(OBEX_OPEN_RFCHANNEL_RETURN, "[OBEX]RF_OpenClientChannel return : (%d)")
    TRC_MSG(OBEX_CALL_CMGR_REMOVEDATALINK, "[OBEX]call CMGR_RemoveDataLink....")
    TRC_MSG(OBEX_SERVER_BUSY_REJECT_CONNECT, "[OBEX]server state is busy, REJECT the connection")
    TRC_MSG(OBEX_SERVER_LINKTRANSPORTFAILED_REJECT_CONNECT, "[OBEX]OBPROT_LinkTransport failed, REJECT the connection")
    TRC_MSG(OBEX_SENDTXBUFFER_LEN_ERROR, "[OBEX]BTSTACK_SendTxBuffer ERROR: len (%d) > BTSTACK_MaxTxSize (%d)")
    TRC_MSG(OBEX_CALL_RF_SENDDATA_RETURN,"OBEX: call RF_SendData(DataLen=%d) return status=(%d)")
    TRC_MSG(OBEX_TOOMUCH_RESPHEADERS, "[OBEX] TOO much response headers, resp_len=%d, ServerMaxHeaderSize=%d")
    TRC_MSG(OBEX_SERVER_NO_OBJECT,"[OBEX]--- OBEX server: app has NOT provided object!")
    TRC_MSG(OBEX_SERVER_WRITE_OBJECT_FAILED,"[OBEX]--- OBEX server: Write Object failed! ret=(%d)")
    TRC_MSG(OBEX_INVALID_CONNECTIONID, "[OBEX]=== Invalid connection ID (%d) === ")
    TRC_MSG(OBEX_SERVER_ABORT, "[OBEX]OBEX_ServerAbort...resp=(0x%x)")
    TRC_MSG(OBEX_SERVER_DEINIT_BUSY, "[OBEX]OBEX_ServerDeinit, OSC(currentOperation)=(%d)")
    TRC_MSG(OBEX_SERVER_DEINIT_RFDEREGISTER_RETURN, "[OBEX]BTSTACK_ServerDeinit: RF_DeregisterService return (%d)")
    TRC_MSG(OBEX_SERVER_DEINIT_CMGRDEREGISTER_RETURN, "[OBEX]BTSTACK_ServerDeinit: CMGR_DeregisterHandler return (%d)")
    TRC_MSG(OBEX_SERVER_ABORT_RSP_INVALID, "[OBEX]OBEX_ServerAbort INVALID RspCode(0x%x)!")
    TRC_MSG(OBEX_SERVER_ABORT_EVENT_INVALID, "[OBEX]OBEX_ServerAbort INVALID event! CurOper=%d,event=%d")
    TRC_MSG(OBEX_CLIENT_START_TIMER, "[OBEX][TIMER] OBEX_ClientStartReqTimer for cmd=(0x%x), AppHndl=0x%x, timer_dur=%d")
    TRC_MSG(OBEX_CLIENT_STOP_TIMER, "[OBEX][TIMER]OBEX_ClientStopReqTimer AppHndl=0x%x, timer_id=%d")
    TRC_MSG(OBEX_CLIENT_RESTART_TIMER, "[OBEX][TIMER]OBEX_ClientRestartReqTimer AppHndl=0x%x, timer_id=%d")
    TRC_MSG(OBEX_CLIENT_REQTIMEOUT, "[OBEX][TIMER] ===OBEX_ClientRequestTimeout: AppHndl=0x%x, timer_id=%d, tpStatus=(%d)")
    TRC_MSG(OBEX_SERVER_CANFITONEPACKET, "[OBEX]===Server ProcessGet: OSC(canFitOnePacket)=TRUE, txTotalLen=%d, maxTxLen=%d")
    TRC_MSG(OBEX_SERVER_READHDBLOCK_FITONEPKT, "[OBEX]===ObServerReadHeaderBlock_FitOnePkt, len=%d == ")
    TRC_MSG(OBEX_SERVER_READ_HEADERBLOCK_FITONEPKT, "[OBEX]----ObServerReadHeaderBlock_FitOnePkt..curOper=%d,canFitOnePacket=%d,hb=%d,len=%d")
    TRC_MSG(OBEX_SERVER_READ_HEADERBLOCK_FITONEPKT_FILL_EOB, "[OBEX]----ObServerReadHeaderBlock_FitOnePkt...fill OBEXH_END_BODY Header")
    TRC_MSG(OBEX_CLIENT_READ_HEADERBLOCK_READOBJ_FAILED, "[OBEX]----ObClientReadHeaderBlock FAILED! ret = %d")
    TRC_MSG(OBEX_CLIENT_SEND_ABORT_FOR_RW_ERROR, "[OBEX]----ProcessGetEvents: OBRC_CLIENT_RW_ERROR, send ABORT request!AppHndl=0x%x")
    TRC_MSG(OBEX_SERVER_SEND_RESPONSE,"[OBEX]OBEX_ServerSendResponse...ObexApp=0x%x,OSC(resp)=0x%x, Opcode()=0x%x")
    TRC_MSG(OBEX_SERVER_PROCGET_SENDOBJ, "[OBEX]Server ProcessGet: objLen=%d,txLength=%d,resp=0x%x, hb=HB_SERVER_OBJECT")
    TRC_MSG(OBEX_SERVER_GET_HB_LEN, "[OBEX]ObServerGetHeaderBlockLen: len=%d")
    TRC_MSG(OBEX_SERVER_READ_HB, "[OBEX]ObServerReadHeaderBlock: ObexApp=0x%x, hb=%d, len=%d, rspCode=0x%x")
    TRC_MSG(OBEX_SERVER_GET_HB_LEN_FOP,"[OBEX]--ObServerGetHeaderBlockLen_FitOnePkt..curOper=%d, canFitOnePacket=%d, block_len=%d")
    TRC_MSG(OBEX_BUFAVAIL_MAX_TX_SIZE_ZERO, "[OBEX]--ObParserTxBuffAvail:obp=0x%x, len==0, maybe RF channel is closing")
    TRC_MSG(OBEX_SERVER_EVENTIND_OPER_ABORTED,"[OBEX]--ObServerEventInd,OBPE_OPER_COMPLETE,OBSE_ABORTED: OSC(resp)=0x%x,ObServerGetOpcode()=0x%x,OSC(opcode)=0x%x")
    TRC_MSG(OBEX_PARSE_TXDONE_SENDINGRFPNUM,"[OBEX]obParserTxDone: server 0x%x SendingRFPktNum = %d")
    TRC_MSG(OBEX_BTSTACK_TXTIMEOUT,"[OBEX] ---- BTSTACK_TxTimeout : con=0x%x ---")
    TRC_MSG(OBEX_GIVEPKT_TO_WAITINGAPP,"[OBEX]-- OBPROT_GivePktToWaitingApp_IfNeed  call ObParserTxBuffAvail(0x%x)")
    TRC_MSG(OBEX_RETURN_PENDING_PKT,"[OBEX TxTimer]---OBPROT_ReturnTxBuffer_IfNeed con=0x%x,buf=0x%x")
    TRC_MSG(OBEX_OBPROT_TXTIMEOUT,"[OBEX TxTimer] ==== OBPROT_TxTimeout ==== con=0x%x")
    TRC_MSG(OBEX_PROC_PENDING_RFPKT,"[OBEX]---RFCLOSED: OBPROT_ReturnTxBuffer_IfNeed return (%d),SendingRFPktNum=%d")
    TRC_MSG(OBEX_RFOPEN_TIMEOUT, "[OBEX] RFOpenTimeout: btxp[%x] state[%d] timer[%d]")
    TRC_MSG(OBEX_CLIENT_DISCONNECTING_ED,"[OBEX] client(tpStatus=%d) is already DISCONNECTING or DISCONNECTED!")
    TRC_MSG(OBEX_CLIENTTPDISCONNECT_RETURN,"[OBEX] OBEX_ClientTpDisconnect return (%d)")
    TRC_MSG(OBEX_READHEADBLK_ERR,"[OBEX] ObParserTxBuffAvail:Observer:ObReadHeaderBlock Error(%d)! So Disconnect!")
    TRC_MSG(OBEX_PBAP_PARAMS,"[OBEX]ProcessGet:PBAP Server: appHeaderLen=%d, OSC(objLen)=%d,txTotalLen=%d, maxTxLen=%d")
    TRC_MSG(OBEX_TX_TIMEOUT_INDEX,"[OBEX] -- OBPROT_TxTimeout: index i=(%d)")
    TRC_MSG(OBEX_ACCEPT_RFCHNL,"[OBEX] BTSTACK_AcceptRFChnConn btxp=0x%x...")
    TRC_MSG(OBEX_REJECT_RFCHNL,"[OBEX] BTSTACK_RejectRFChnConn btxp=0x%x...")
    TRC_MSG(OBEX_PARSER_SEND_ABORT_FOR_READ_ERROR, "[OBEX]ObParserSendPacket: ReadData ERROR(%d), for Client, send ABORT command")
    TRC_MSG(OBEX_DISCONNECT_FOR_READHEADBLK_ERR, "[OBEX]ObParserTxBuffAvail ReadData ERROR(%d), DISCONNECT the connection!")
    TRC_MSG(OBEX_NOT_TPCONNECTED_RETURN, "[OBEX] obp 0x%x ObParserTxBuffAvail..NOT OB_TP_CONNECTED., just RETURN")
    TRC_MSG(OBEX_OBPARSE_TXBUFAVAIL, "[OBEX] obp 0x%x ObParserTxBuffAvail...")
    TRC_MSG(OBEX_CLIENT_READ_HB, "[OBEX]ObClientReadHeaderBlock: ObexApp=0x%x, hb=%d, len=%d")
    TRC_MSG(OBEX_TXSEND_FAILED_RETURN_BUF, "[OBEX]OBSTACK_SendTxBuffer FAILED (status=%d): return packet buffer ===")
    TRC_MSG(OBEX_PUT_PACKET_TOO_SMALL, "[OBEX][ERR] packet too small hbLength:%d max:%d")
    TRC_MSG(OBEX_CLIENTSENDREQUEST_TXLENGTH, "[OBEX] sendrequest txOffset:%d txLength:%d")
    TRC_MSG(OBEX_CLIENTSENDCOMMAND_TXLENGTH, "[OBEX] send command txOffset:%d txLength:%d hb:%d OCC(objLen):%d OCC(opcode):0x%x")
    TRC_MSG(OBEX_CLIENT_APPEND_CONNID, "[OBEX][CONN] Append CONNID and adjust OCC(txLength):%d")
    TRC_MSG(OBEX_CLIENT_CALC_OBJ_TXLENGTH_BUFSTYLE, "[OBEX][CONN] OBEX_ClientSendCommand bufstyle Assign OCC(txLength):%d OCC(objLen):%d idFlag:%d")
    TRC_MSG(OBEX_CLIENT_CALC_OBJ_TXLENGTH_OBSTYLE, "[OBEX][CONN] OBEX_ClientSendCommand obstyle Assign OCC(txLength):%d OCC(objLen):%d idFlag:%d")
    TRC_MSG(OBEX_CONNID_VALUE, "[OBEX][CONN] Setup CONNID idFlag:%d")
    TRC_MSG(OBEX_APPEND_CONNID_QUEUEHEADER, "[OBEX][CONN] Append CONNID to queue header")
    TRC_MSG(OBEX_REG_RFCOMM_CHANNEL, "OBEX: register rfcomm %d")
    TRC_MSG(OBEX_SERV_INIT_L2CAP_BUF, "OBEX: S GoepL2cap is %d pl2Buffer:0x%x")
    TRC_MSG(OBEX_NO_L2CAP_BUF, "OBEX: WRN no l2cap buffer")
    TRC_MSG(OBEX_REG_L2CAP_PSM, "OBEX: Register L2cap set the inLinkMode psm:0x%x inLinkMode:%d")
    TRC_MSG(OBEX_REG_L2CAP_PSM_RETURN, "OBEX: L2CAP_RegisterPsm return:0x%x psm:0x%x")
    TRC_MSG(OBEX_DEREG_L2CAP_PSM, "OBEX: l2cap deregister status:%d")
    TRC_MSG(OBEX_SERVER_CONNECTED_REJECT_INCOMING_RFCOMM, "OBEX: server has connected with l2cap. reject rfcomm incoming")
    TRC_MSG(OBEX_SERVER_CURRENT_STATE, "OBEX: S current state:%d appHndl:0x%x")
    TRC_MSG(OBEX_SERVER_REJECT_SECOND_INCOMING, "OBEX: BtServL2Callback reject incoming state:%d l2channelId:%d")
    TRC_MSG(OBEX_SERVER_L2CAP_OPEN, "OBEX: L2EVENT_CONNECTED state:%d appHndl:0x%x")
    TRC_MSG(OBEX_SERVER_L2CAP_DISCONNECTED, "OBEX: L2EVENT_DISCONNECTED state:%d appHndl:0x%x")
    TRC_MSG(OBEX_SERVER_L2CAP_PACKET_HANDLED, "OBEX: L2EVENT_PACKET_HANDLED state:%d appHndl:0x%x pkt:0x%x left:%d")
    TRC_MSG(OBEX_L2TIMEOUT_IGNORE, "BTSTACK_AUTO_GOEPL2SDP_Timeout_Ignore ")
    TRC_MSG(OBEX_L2CAP_DISCONNECT_REQ, "OBEX: L2CAP_DisconnectReq channelid:%d status:%d")
    TRC_MSG(OBEX_L2CAP_FLOW_DATA_IND, "OBEX: L2EVENT_FLOW_DATA_IND state:%d appHndl:0x%x len:%d")
    TRC_MSG(OBEX_L2CAP_GOEPL2SDP_TIMEOUT, "OBEX: BTSTACK_AUTO_GOEPL2SDP_Timeout ")
    TRC_MSG(OBEX_START_SERVICE_QUERY_FAIL, "OBEX: [WRN] BTSTACK_AUTO_GOEPL2SDP_Timeout fail to start query %d")
    TRC_MSG(OBEX_L2CAP_FLOW_DATA_IND_ERR, "OBEX: Data Flow ind, rx buffer shall not be empty")
    TRC_MSG(OBEX_L2CAP_UNREGEISTER_PSM, "OBEX: BtClientL2CallBack unregister l2cap bConnType:%d psm:0x%x")
    TRC_MSG(OBEX_L2CAP_CONFIG_INLINKMODE, "OBEX: set the inLinkMode psm:0x%x inLinkMode:%d")
    TRC_MSG(OBEX_L2CAP_SENDDATA, "OBEX: L2CAP_SendData status:%x (datalen:%d pkt:0x%x) left:%d")
    TRC_MSG(OBEX_L2CAP_CONNECT_RSP, "OBEX: L2CAP_ConnectRsp channelId:%d accept:%d return:%d")
    TRC_MSG(OBEX_ACCEPT_RFCHNL_RETURN, "OBEX: RF_AcceptChannel return:%d")
    TRC_MSG(OBEX_RFCOMM_QUERY_UNKNOW, "OBEX: BtStartServiceQuery Unknow uuid:%x")
    TRC_MSG(OBEX_SDPCALLBACK_IGNORE, "OBEX: attribute:%d status:%d")
    TRC_MSG(OBEX_CLIENT_PROCESS_SIMPLEOP, "[OBEX][CLIENT] ProcessSimpleOpEvents obap:0x%x OBPE_OPER:%d")
    TRC_MSG(OBEX_CLIENT_PROCESS_PUTOP, "[OBEX][CLIENT] ProcessPutEvents obap:0x%x OBPE_OPER:%d status:%d")
    TRC_MSG(OBEX_CLIENT_PROCESS_GETOP, "[OBEX][CLIENT] ProcessGetEvents obap:0x%x OBPE_OPER:%d status:%d")
    TRC_MSG(OBEX_TXCOMPLETE_EVENT, "[CLIENT] Tx_Complete Clear srm flags")
    TRC_MSG(OBEX_REMOTE_MTU_VALUE, "OBEX: Get mtu maxTxPacket:%d")
    TRC_MSG(OBEX_LOCAL_MTU_VALUE, "OBEX: prepare mtu maxTxPacket:%d")
    TRC_MSG(OBEX_L2CAP_INIT, "[OBEX][SERV] init l2buffer:0x%x")
    TRC_MSG(OBEX_VERSION_MTU, "OBEX: Connect Field mtu:%d version0x%x")
    TRC_MSG(OBEX_SERVER_EVENT_IND, "[OBEX] ObServerEventInd OBPE_EVENT:%d curOp:%d")
    TRC_MSG(OBEX_SERVER_EVENT_START_IND, "OBEX: OPER_IND_START opcode:0x%x bConntype:%d")
    TRC_MSG(OBEX_SERVER_REMOTE_MTU_TOO_LARGE_WRN, "[OBEX][WRN] Remote mtu is large then l2cap !mtu:%d  l2cap:%d")
    TRC_MSG(OBEX_SERVER_DISABLE_SRM_ENABLE, "[OBEX][SERVER] Got all data. disable srm receive:%d objLen:%d")
    TRC_MSG(OBEX_SERVER_REMOTE_SEND_LARGE_THEN_MTU, "[OBEX][ERR] Error! remote sends too much data ! mru:%d received:%d")
    TRC_MSG(OBEX_SERVER_DISABLE_SRM_ENABLE_ENDBODY, "[OBEX][SERVER] Got endbody. disable srm")
    TRC_MSG(OBEX_SERVER_PROCESS_GET, "[OBEX][SERVER] ProcessGet obap:0x%x OBPE_OPER:%d")
    TRC_MSG(OBEX_SERVER_PROCESS_GENERAL, "[OBEX][SERVER] ProcessGeneral OBPE_OPER:%d")
	TRC_MSG(OBEX_CONN_ID_NOT_VALIED, "[OBEX][ERR] id is not valid ! disconnect it")
	TRC_MSG(OBEX_SERVER_SENDRESPONSE_COUNT_REJECT, "[OBEX][WRN] sendResponse count is 0 ! %d ")
	TRC_MSG(OBEX_RESET_SRM_ENABLE, "[SRM] reset obap:0x%x srm_server ")
	TRC_MSG(OBEX_UNACK_NUMBER, "[OBEX][CLIENT] OBPE_OPER_IND unack:%d")
	TRC_MSG(OBEX_CLIENT_READ_HB_IN_HEADER, "[OBEX] ObClientReadHeaderBlock OCC(txLength):%d OCC(txOffset):%d remainlen:%d")
	TRC_MSG(OBEX_BCONNTYPE, "OBEX: obap:0x%x bConnType:%d")

    /* BTMMIObex.c  Trace*/
    TRC_MSG(BT_BT_MMI_OBEX_GET_PROFILE_SHARED_BUF, "[BTMMIOBEX] mmi_bt_obex_get_profile_shared_buffer().")
    TRC_MSG(OADP_FSM_BEGIN, "[OADP]FSM Begin: state[%d] event[%d] inst[0x%x] op[0x%x]")
    TRC_MSG(OADP_FSM_END, "[OADP]FSM End: state[%d] status[%d]")
    TRC_MSG(OADP_GOEP_CLINET_EVENT, "[OADP]incoming Client event: event[%d] oper[%d] header[%d] inst[0x%x]")
    TRC_MSG(OADP_GOEP_SERVER_EVENT, "[OADP]incoming Server event: event[%d] oper[%d] header[%d] inst[0x%x]")
    TRC_MSG(OADP_NEW_INSTANCE, "[OADP]new instance: id[%d] mod[%d]")
    TRC_MSG(OADP_NEW_OPERATION, "[OADP]new operation: inst[0x%x] op[0x%x] id[%d] type[%d]")
    TRC_MSG(OADP_NEW_CONNECTION, "[OADP]new connection: inst[0x%x] op[0x%x]")
    TRC_MSG(OADP_DELETE_INSTANCE, "[OADP]delete instance: inst[0x%x]")
    TRC_MSG(OADP_DELETE_OPERATION, "[OADP]delete operation: inst[0x%x] op[0x%x]")
    TRC_MSG(OADP_DELETE_CONNECTION, "[OADP]delete connection: inst[0x%x] conn[0x%x]")
    TRC_MSG(OADP_DATA_READ, "[OADP]OBEX read [%d] bytes: inst[0x%x] op[0x%x] obj[0x%x]")
    TRC_MSG(OADP_DATA_WRITE, "[OADP]OBEX write [%d] bytes: inst[0x%x] op[0x%x] obj[0x%x]")
    TRC_MSG(OADP_DATA_OBJLEN, "[OADP]OBEX get object len: inst[0x%x] op[0x%x] obj[0x%x] total[%d]")
    TRC_MSG(OADP_NEW_OBJECT, "[OADP]new object: inst[0x%x] obj[0x%x]")
    TRC_MSG(OADP_OBJECT_SIZE, "[OADP]set object size: inst[0x%x] obj[0x%x] size[%d]")
    TRC_MSG(OADP_OPEN_OBJECT, "[OADP]open object: inst[0x%x] obj[0x%x] mode[%d] data[0x%x]")
    TRC_MSG(OADP_DELETE_OBJECT, "[OADP]delete object: inst[0x%x] obj[0x%x]")

TRC_MSG(BT_OBEX_TRACE_END,"BT_OBEX_TRACE_END")  /* MBT LOG FILTER. DO NOT MODIFY */
/* OBEX TRACE END */

/* GOEP TRACE START */
    TRC_MSG(GOEP_SERVERCONTINUE_STATUS__xD,"[GOEP]--GOEP_ServerContinue: status = %d")
    TRC_MSG(GOEP_SERVERACCEPT_STATUS__xD,"[GOEP]--GOEP_ServerAccept: status = %d")
    TRC_MSG(GOEP_SERVERABORT_STATUS__xD,"[GOEP]--GOEP_ServerAbort: status = %d")
    TRC_MSG(GOEP_SERVERAUTH_STATUS__xD,"[GOEP]--GOEP_ServerAuthenticate: status = %d")
    TRC_MSG(GOEP_MAIN_DISCONECT_AN_INEXISTENT_GOEP_CONN_ID_xD,"goep_main: Disconect an inexistent goep_conn_id: %d")
    TRC_MSG(GOEP_CANNOT_FIND_FREE_GOEP_CONN_ID,"goep_main: Can not find free goep id")
    TRC_MSG(GOEP_CANNOT_FIND_SERVER_WITH_GOEP_CONN_ID,"goep_main: Can not find server with goep_conn_id")
    TRC_MSG(GOEP_CANNOT_FIND_CLIENT_WITH_GOEP_CONN_ID,"goep_main: Can not find client with goep_conn_id")
    TRC_MSG(GOEP_CANNOT_FIND_CLIENT_WITH_REQ_ID,"goep_main: Can not find client with req_id")
    TRC_MSG(GOEP_CANNOT_FIND_BT_UUID,"goep_main: Can not find matched BT uuid")
    TRC_MSG(GOEP_CANNOT_FIND_OBEX_UUID,"goep_main: Can not find matched OBEX uuid")
    TRC_MSG(GOEP_REGISTER_SERVER_RSP_CODE,"goep_main: Register server failed: %d")
    TRC_MSG(GOEP_DEREGISTER_SERVER_RSP_CODE,"goep_main: Deregister server failed: %d")
    TRC_MSG(GOEP_DISCONNECT_REQ_RSP_CODE,"goep_disconnect_req_hdlr: status = %d")
    TRC_MSG(GOEP_OBEX_DISCONNECT_FAIL,"goep_main: GOEP_Disconect fail with rspcode: %d! so send disconnect_ind to mmi!")
    TRC_MSG(GOEP_CALL_OBEX_CLIENTDISCONNECT,"goep: GOEP_Disconect CALL OBEX_ClientDisconnect")
    TRC_MSG(GOEP_CLIENT_TP_DISCONNECTED,"goep: ClientCallback TP_Disconnected!")
    TRC_MSG(GOEP_CLIENT_CALLBACK,"========goep: ClientCallback --- event = %d")
    TRC_MSG(GOEP_ABORTREQFAIL_SEND_ABORT_RSP,"goep: GOEP_Abort fail! Send Abort Response to MMI!")
    TRC_MSG(GOEP_CLIENT_CONNECTED,"goep: ClientCallback -- Connected!")
    TRC_MSG(GOEP_SEND_CONNECT_RSP,"goep_main: send OBEX CONNECT_RSP msg with rsp_code = %d")
    TRC_MSG(GOEP_CLIENT_CALL_TEMPOP_HANDLER_CALLBACK,"goep: CALL Client tempOp.handler->callback, event=(%d)")
    TRC_MSG(GOEP_RECV_MSG_FROM_MMI,"goep_main: recieve msg from MMI! msg = %d")
    TRC_MSG(GOEP_SERVER_CALLBACK,"========goep: ServerCallback --- event = %d, server=0x%x")
    TRC_MSG(GOEP_OBEX_CONNECTION_NUM,"[GOEP] Current Obex connections = %d!!")
    TRC_MSG(GOEP_ENTER_SERVER_TPDISCONNECT, "[GOEP] GOEP_ServerTpDisconnect...Server=0X%x")
    TRC_MSG(GOEP_REGISTER_CLIENT, "[GOEP] GOEP_RegisterClient...ClientApp=0X%x")
    TRC_MSG(GOEP_DEREGISTER_CLIENT,"[GOEP] GOEP_DeregisterClient...ClientApp=0X%x")
    TRC_MSG(GOEP_CONNECT_ENTERING,"[GOEP] GOEP_Connect.ClientApp=0X%x..GoepClientObexCons client=0x%x mru=%d")
    TRC_MSG(GOEP_CONNECT_STATUS_BUSY, "[GOEP] GOEP_Connect..OB_STATUS_BUSY.")
    TRC_MSG(GOEP_CONNECT_BUILDHEADERS_FAILED, "[GOEP] GOEP_Connect..ClientBuildHeaders failed. OB_STATUS_FAILED.")
    TRC_MSG(GOEP_CONNECT_STATUS_RESTRICTED, "[GOEP] GOEP_Connect: set status = OB_STATUS_RESTRICTED!!")
    TRC_MSG(GOEP_DISCONNECT_ENTERING, "[GOEP] GOEP_Disconnect.AppClient=0x%x..GoepClientObexCons client=0x%x")
    TRC_MSG(GOEP_PUSH_ENTERING, "[GOEP]GOEP_Push.ClientApp=0X%x.GoepClientObexCons client=0x%x")
    TRC_MSG(GOEP_PULL_ENTERING, "[GOEP] GOEP_Pull.ClientApp=0X%x..GoepClientObexCons client=0x%x")
    TRC_MSG(GOEP_SETFOLDER_ENTERING, "[GOEP] GOEP_SetFolder.ClientApp=0X%x...GoepClientObexCons client=0x%x")
    TRC_MSG(GOEP_CLIENTABORT_ENTERING,"[GOEP] GOEP_ClientAbort.ClientApp=0X%x..GoepClientObexCons client=0x%x")
    TRC_MSG(GOEP_TPCONNECT_ENTERING,"[GOEP] GOEP_TpConnect.ClientApp=0X%x..GoepClientObexCons=0X%x")
    TRC_MSG(GOEP_TPDISCONNECT_ENTERING, "[GOEP] GOEP_TpDisonnect.ClientApp=0X%x..GoepClientObexCons=0x%x")
    TRC_MSG(GOEP_CLIENTCONTINUE_ENTERING, "[GOEP] GOEP_ClientContinue.ClientApp=0X%x..GoepClientObexCons client=0x%x")
    TRC_MSG(GOEP_CLIENT_QUEUEHEADER, "[GOEP]GOEP_ClientQueueHeader, type=%d, Len=%d........")
    TRC_MSG(GOEP_OBCE_CONNECTED,"[GOEP] GoepClntCallback.CONNECTED..GoepClientObexCons=0X%x")
    TRC_MSG(GOEP_OBCE_DISCONNECT, "[GOEP] GoepClntCallback.DISCONNECTED..GoepClientObexCons=0X%x")
    TRC_MSG(GOEP_OBCE_ABORTED, "[GOEP]====GoepClntCallback con=0X%x get event: OBCE_ABORTED, reason=0X%x")
    TRC_MSG(GOEP_CLIENT_BUILDHEADERS_FAILED, "[GOEP]ClientBuildHeaders failed!")
    TRC_MSG(GOEP_CLIENTABORT_ALREADY_PENDING, "[GOEP] GOEP_ClientAbort...client->obc.client.status == OBRC_USER_ABORT, return PENDING")
    TRC_MSG(GOEP_TPCONNECT_STATUS_BUSY, "[GOEP] GOEP_TpConnect OB_STATUS_BUSY!")
    TRC_MSG(GOEP_TPCONNECT_ACTIVE, "[GOEP] GOEP_TpConnect client->flags & GOEF_ACTIVE!!!!")
    TRC_MSG(GOEP_TPDISCONNECT_INUSE, "GOEP: GOEP_TpDisconnect inUse > 1. So cann't call OBEX_ClientTpDisconnect")
    TRC_MSG(GOEP_TPDISCONNECT_STATUS, "[GOEP] OBEX_ClientTpDisconnect return status =%d ")
    TRC_MSG(GOEP_CLIENT_QUEUEHEADER_LENTOOLARGE, "[GOEP]GOEP_ClientQueueHeader, Len=%d is too large! availible len = %d")
    TRC_MSG(GOEP_WAITFOR_AUTH_REQ, "[GOEP] NotifyAllClients: Pending to wait for authenticate request")
    TRC_MSG(GOEP_RECV_AUTH_CHAL, "[GOEP]NotifyCurrClient: Received GOEP_EVENT_AUTH_CHALLENGE")
    TRC_MSG(GOEP_RECV_AUTH_RESP, "[GOEP] NotifyCurrClient: Received GOEP_EVENT_AUTH_RESPONSE")
    TRC_MSG(GOEP_CLIENT_RELEASE_CONNID, "[GOEP]client ReleaseConnID: %d")
    TRC_MSG(GOEP_SERVICE_RELEASE_CONNID, "[GOEP]service ReleaseConnID: %d")
    TRC_MSG(GOEP_SERVICE_ALLOC_CONNID, "[GOEP]Service AllocateConnID: %d")
    TRC_MSG(GOEP_CLIENT_ALLOC_CONNID, "[GOEP]client AllocateConnID: %d")
    TRC_MSG(GOEP_CALL_RFCLOSECHANNEL, "[GOEP]: ====goep_disconnect_req_hdlr call  RF_CloseChannel... ")
    TRC_MSG(GOEP_CALL_RFCLOSECHANNEL_FAILED, "[GOEP]:=== RF_CloseChannel return %d, failed! call goep_send_disconnect_ind_msg...")
    TRC_MSG(GOEP_DISCONNECT_FLAG_SETUP, "[GOEP]: Setup the disconncting flag state:%d ")
    TRC_MSG(GOEP_DEINIT_SERVER_FAILED, "[GOEP]===goep_deinit server failed: status %d")
    TRC_MSG(GOEP_DEINIT_CLIENT_FAILED,"[GOEP]===goep_deinit client failed: status %d")
    TRC_MSG(GOEP_IS_OPERATING, "[GOEP]GOEP_Disconnect: client->currOp.handler!=NULL, return BUSY!!")
    TRC_MSG(GOEP_NO_ACTIVE_CONNECT, "[GOEP] !GOEF_ACTIVE, return OB_STATUS_NO_CONNECT")
    TRC_MSG(GOEP_CLIENT_HANDLE_ERROR, "[GOEP] Client != client->currOp.handler(%d)")
    TRC_MSG(GOEP_RFCOMM_OPENIND_ACCEPT, "[GOEP] RFCommOpenInd, Accept it!")
    TRC_MSG(GOEP_SERVER_APP_CALLBACK, "[GOEP]--- GOEP Server call app callback with event=(%d)---")
    TRC_MSG(GOEP_ENTER_SERVER_ABORT, "[GOEP]--- GOEP_ServerAbort...Server=0X%x, RespCode=0X%x ---")
		TRC_MSG(GOEP_NOTIFY_ALLCLIENT, "[GOEP]NotifyAllClients: i=%d, client->profiles[i]->connState=%d")
    TRC_MSG(GOEP_CLIENT_ABORTED, "[GOEP]NotifyCurrClient ABORTED: reason=%d,CurOper=%d, status=%d")

    TRC_MSG(GOEP_ENTER_SERVER_ACCEPT, "[GOEP] GOEP_ServerAccept...Server=0X%x")
    TRC_MSG(GOEP_PROCESS_NAME_HEADER, "[GOEP]GoepServerProcessHeaders:OBEXH_NAME,nameLen=%d,currLen=%d, remainLen=%d, b_truncate=%d")
    TRC_MSG(GOEP_FIND_SAME_TARGETUUID, "[GOEP]=== Find SAME target UUID, i=(%d), uuid=(%d) ===")
    TRC_MSG(GOEP_SAME_SERVICE_HAS_REQUESTED, "[GOEP]=== Not allow 2 SAME profile Client! ===")
    TRC_MSG(GOEP_ENTER_SERVER_ACCEPT_NO_OBJECT, "[GOEP] GOEP_ServerAcceptNoObject...Server=0X%x")
    TRC_MSG(GOEP_SERVER_TPDISCONNECT_RETURN, "[GOEP] GOEP_ServerTpDisconnect return status=(%d)")
    TRC_MSG(GOEP_SERVERAUTH, "[GOEP] GOEP_ServerAuthenticate Server=0X%x, Resp=0X%x, Chall=0X%x")
    TRC_MSG(GOEP_SERVER_VERIFYAUTHRESP, "[GOEP] GOEP_ServerVerifyAuthResponse Server=0X%x")
    TRC_MSG(GOEP_SERVER_VERIFYAUTHRESP_RETURN, "[GOEP] GOEP_ServerVerifyAuthResponse return status=(%d)")
    TRC_MSG(GOEP_SERVER_RECEIVE_AUTHCHAL_HEADER, "[GOEP]---GOEP Server received AUTH challenge header!")
    TRC_MSG(GOEP_SERVER_QUEUEHEADER, "[GOEP]GOEP_ServerQueueHeader, type=%d, Len=%d........")
    TRC_MSG(GOEP_ENTER_SERVER_CONTINUE, "[GOEP]GOEP_ServerContinue...Server=0X%x")
    TRC_MSG(GOEP_SERVER_CONTINUE_FAILED,"[GOEP]GOEP_ServerContinue:handler=0x%x,oustandingResp=%d,event=(%d),oper=(%d)")
    TRC_MSG(GOEP_SERVER_CONTINUE_BUILDHEADER_FAIL, "[GOEP] -- GOEP_ServerContinue: ServerBuildHeaders Error! --")
    TRC_MSG(GOEP_CONNECT_NO_CHALLENGE,"[GOEP] GOEP_Connect..no GOEF_CHALLENGE .OB_STATUS_INVALID_PARM.")
    TRC_MSG(GOEP_SERVER_AUTHORIZE_RES,"[GOEP] GOEP_ServerAuthorizeResponse server=0x%x, rsp_code=%d")
    TRC_MSG(GOEP_INVALID_MSG, "[GOEP]goep_main INVALID msg: msg_id=%d, REGISTER_SERVER_REQ=%d, AUTHORIZE_RES=%d")
    TRC_MSG(GOEP_CMCONNID_HAS_ALLOCED,"[GOEP] Service->cm_conn_id=(%d) has alloced before!")
    TRC_MSG(GOEP_ALREADY_DISCONNECTING, "[GOEP] client is already CS_DISCONNECTING!")
    TRC_MSG(GOEP_SDPIND_CLIENTAPP_ISNULL, "[GOEP]GOEP_ClientSDPSupportedFormatsInd, clientApp is NULL!===")	
    
/* GOEP TRACE END */

/* OPP TRACE START */
    /* OPP SERVER */
    //GENERAL
    TRC_MSG(BT_OPPS_CTX_CHECK, "[OPPS]")
    TRC_MSG(BT_OPPS_MSG_CHECK_ERR, "[OPPS]")
    TRC_MSG(BT_OPPS_ACTIVATE, "[OPPS] activate")

    /* OPP CLIENT */
    //GENERAL
    TRC_MSG(BT_OPPC_DEINIT_API, "[OPPC] deinit")
    TRC_MSG(BT_OPPC_INIT_API, "[OPPC] init api")
    TRC_MSG(BT_OPPC_STATE_ERROR, "[OPPC] check error state:(%d)")
    TRC_MSG(BT_OPPC_CTX_CHECK, "[OPPC] check :(%d)")
    TRC_MSG(BT_OPPC_MSG_CHECK_ERR, "[OPPC] check :(%d)")
    TRC_MSG(BT_OPPC_MAX_PACKET_SIZE, "[OPPC] max apcket size:(%d)")
    //HANDLER
    TRC_MSG(BT_OPPC_DISCONNECT_FEATURE, "[OPPC] ")
    TRC_MSG(BT_OPPC_PULL_FEATURE, "[OPPC] pull_feature")
    TRC_MSG(BT_OPPC_PULL_FEATURE_WRONG_STATE, "[OPPC] pull_feature")
    TRC_MSG(BT_OPPC_PULL_FEATURE_WRONG_PARAM, "[OPPC] pull_feature")
    TRC_MSG(BT_OPPC_CONNECT_CNF_HDL, "[OPPC] connect_cnf")
    //INTERNAL
    TRC_MSG(BT_OPPC_CONN_TERM, "[OPPC] conn_term")
    TRC_MSG(BT_OPPC_CONN_SERVER, "[OPPC] conn server")
    TRC_MSG(BT_OPPC_DISC_CLIENT, "[OPPC] disc_client idx:(%d)")
    TRC_MSG(BT_OPPC_PUSH_RSP_FS_READ, "[OPPC] push_rs_fs_read")
    TRC_MSG(BT_OPPC_SEND_FILE_OBJ_FS_OPEN, "[OPPC] send file fh:(%d)")
/* OPP TRACE END */

/* FTP TRACE START */
    /* FTP Server */
    /* FTP MMI trace state */
    TRC_MSG(BT_FTPC_STATE_TRANSITION, "[FTPMMI_GOEP] state transition. (%d -> %d)")
    TRC_MSG(BT_FTPC_STATE_ERROR, "[FTPMMI_GOEP] wrong state. (%d)")
    TRC_MSG(BT_FTP_POPUP_HDLR, "[FTPMMI] mmi_bt_ftp_popup_hdlr(), behavior[%d]")
    TRC_MSG(BT_FTPS_STATE_TRANSITION, "[FTPMMI_GOEP] state transition. index: %d , state:(%d -> %d)")
    TRC_MSG(BT_FTPS_STATE_ERROR, "[FTPMMI_GOEP] wrong state. index: %d , state:(%d)")
    TRC_MSG(BT_FTPS_INIT, "[FTPMMI_GOEP] mmi_bt_ftp_init()")
    TRC_MSG(BT_FTPS_DEINIT, "[FTPMMI_GOEP] mmi_bt_ftp_deinit()")
    TRC_MSG(BT_FTPS_EVENT_HDLR, "[FTPMMI_GOEP] mmi_bt_ftp_event_hdlr()")
    TRC_MSG(BT_FTPS_ACTIVATE, "[FTPMMI_GOEP] mmi_bt_ftps_activate()")
    TRC_MSG(BT_FTPS_DEACTIVATE, "[FTPMMI_GOEP] mmi_bt_ftps_deactivate()")
    TRC_MSG(BT_FTPS_STATE, "[FTPMMI_GOEP] FTPS check state. index:(%d) , state:(%d)")
    TRC_MSG(BT_FTPS_DISCONNECT_CLIENT, "[FTPMMI_GOEP] mmi_bt_ftps_disconnect_client()")
    TRC_MSG(BT_FTPS_DISCONNECT_CLIENT_CHECK, "[FTPMMI_GOEP] mmi_bt_ftps_disconnect_client() state:(%d), context.g_conn_id:(%d), cm.g_conn_id(%d)")
    TRC_MSG(BT_FTPS_SET_FOLDER_SCR_CALLBACK, "[FTPMMI_GOEP] mmi_bt_ftps_set_shared_fodler()")
    TRC_MSG(BT_FTPS_AUTHORIZE_ACCEPT, "[FTPMMI_GOEP] mmi_bt_ftps_authorize_accept() check context index:(%d), state:(%d), cur_goep_conn_id:(%d)")
    TRC_MSG(BT_FTPS_AUTHORIZE_REJECT, "[FTPMMI_GOEP] mmi_bt_ftps_authorize_reject() check context index:(%d), state:(%d), cur_goep_conn_id:(%d)")   
    TRC_MSG(BT_FTPS_AUTHORIZE_DEL_CB, "[FTPMMI_GOEP] mmi_bt_ftps_authorize_confirm_del_cb() check context index:(%d), state:(%d), cur_goep_conn_id:(%d)")   
    TRC_MSG(BT_FTPS_GET_DEV_NAME, "[FTPMMI_GOEP] mmi_bt_ftps_get_dev_name() check context index:(%d), cur_goep_conn_id:(%d)")
    TRC_MSG(BT_FTPS_ICON_STOP_TIMER, "[FTPMMI_GOEP] mmi_bt_ftps_stop_icon_timer_expire_hdler()")
    TRC_MSG(BT_FTPS_DISCONN_IND_HDLR_FIND_INDEX_FAILED_ONLY_FTPS, "[FTPMMI_GOEP] mmi_bt_ftp_disconnect_ind_hdlr()-- only open FTS: find index failed")   
    TRC_MSG(BT_FTPS_DISCONN_IND_HDLR_FIND_INDEX_FAILED_ONLY_FTPC, "[FTPMMI_GOEP] mmi_bt_ftp_disconnect_ind_hdlr()-- only open FTC: find index failed")   
    //TRC_MSG(BT_FTPS_CNTX_INIT, "[FTPMMI_GOEP] mmi_bt_ftps_cntx_init()")
    TRC_MSG(BT_FTPS_CNTX_INIT_FS_OPEN, "[FTPMMI_GOEP] mmi_bt_ftps_cntx_init(), folder path init FS_OPEN(%d)")
    TRC_MSG(BT_FTPS_CNTX_INIT_FS_READ, "[FTPMMI_GOEP] mmi_bt_ftps_cntx_init(), folder path init read root folder FS_READ(%d)")
    TRC_MSG(BT_FTPS_WRITE_OBJ, "[FTPMMI_GOEP] mmi_bt_ftps_write_obj(), push_ind->pkt_type(%d)")
    TRC_MSG(BT_FTPS_WRITE_OBJ_PATH_ERROR, "[FTPMMI_GOEP] mmi_bt_ftps_write_obj() -- path error")
    TRC_MSG(BT_FTPS_WRITE_OBJ_OPEN, "[FTPMMI_GOEP] mmi_bt_ftps_write_obj(), file open FS_OPEN(%d)")
    TRC_MSG(BT_FTPS_WRITE_OBJ_WRITE, "[FTPMMI_GOEP] mmi_bt_ftps_write_obj(), file write FS_WRITE(%d)")
    TRC_MSG(BT_FTPS_GEN_DUP_OBJ_NAME, "[FTPMMI_GOEP] mmi_bt_ftps_gen_dup_name()")
    TRC_MSG(BT_FTPS_PUSH_OBJ, "[FTPMMI_GOEP] mmi_bt_ftps_push_obj()")
    TRC_MSG(BT_FTPS_PUSH_OBJ_CHECK_FOLDER, "[FTPMMI_GOEP] mmi_bt_ftps_push_obj(), check folder FS_OPEN(%d)")
    TRC_MSG(BT_FTPS_PUSH_OBJ_ERR_GOTO, "[FTPMMI_GOEP] mmi_bt_ftps_push_obj() -- ERR GOTO")
    TRC_MSG(BT_FTPS_PUSH_DELETE, "[FTPMMI_GOEP] mmi_bt_ftps_push_delete()")
    TRC_MSG(BT_FTPS_PUSH_DELETE_INVALID_NAME, "[FTPMMI_GOEP] mmi_bt_ftps_push_delete() -- invalid name")
    TRC_MSG(BT_FTPS_PUSH_DELETE_WITHOUT_NAME, "[FTPMMI_GOEP] mmi_bt_ftps_push_delete() -- without name")
    TRC_MSG(BT_FTPS_PUSH_DELETE_FILE, "[FTPMMI_GOEP] mmi_bt_ftps_push_delete() -- delete file FS_XDelete(%d)")
    TRC_MSG(BT_FTPS_PUSH_DELETE_FOLDER, "[FTPMMI_GOEP] mmi_bt_ftps_push_delete() -- delete folder FS_RemoveDir(%d)")
    TRC_MSG(BT_FTPS_PUSH_CONTINUE, "[FTPMMI_GOEP] mmi_bt_ftps_write_obj_continue(), push_ind->pkt_type(%d)")
    TRC_MSG(BT_FTPS_PUSH_CONTINUE_WRITE, "[FTPMMI_GOEP] mmi_bt_ftps_write_obj_continue(), file write FS_WRITE(%d)")
    TRC_MSG(BT_FTPS_PUSH_INBUF_CONTINUE, "[FTPMMI_GOEP] mmi_bt_ftps_inbuf_write_obj_continue()")
    TRC_MSG(BT_FTPS_PUSH_INBUF_CONTINUE_WRITE, "[FTPMMI_GOEP] mmi_bt_ftps_inbuf_write_obj_continue(), file write FS_WRITE(%d)")
    TRC_MSG(BT_FTPS_CREATE_FOLDER, "[FTPMMI_GOEP] mmi_bt_ftps_create_folder(), goep_conn_id(%d)")
    TRC_MSG(BT_FTPS_CREATE_FOLDER_CREATE_DIR, "[FTPMMI_GOEP] mmi_bt_ftps_create_folder(), FS_CreateDir(%d)")
    TRC_MSG(BT_FTPS_SET_FOLDER, "[FTPMMI_GOEP] mmi_bt_ftps_set_folder(), goep_conn_id(%d)")
    TRC_MSG(BT_FTPS_SET_PARENT_FOLDER, "[FTPMMI_GOEP] mmi_bt_ftps_set_parent_folder(), goep_conn_id(%d)")
    TRC_MSG(BT_FTPS_PULL_CONTINUE, "[FTPMMI_GOEP] mmi_bt_ftps_pull_continue(), goep_conn_id(%d)")
    TRC_MSG(BT_FTPS_SEND_OBJ, "[FTPMMI_GOEP] mmi_bt_ftps_send_obj(), goep_conn_id(%d)")
    TRC_MSG(BT_FTPS_SEND_FOLDER_CONTENT, "[FTPMMI_GOEP] mmi_bt_ftps_send_folder_content(), goep_conn_id(%d)")
    TRC_MSG(BT_FTPS_SEND_FOLDER_CONTENT_OPEN_ERROR, "[FTPMMI_GOEP] mmi_bt_ftps_send_folder_content() -- open folder content file error ")
    TRC_MSG(BT_FTPS_FIND_GOEP_ID_FAILED, "[FTPMMI_GOEP] mmi_bt_ftps_find_goep_id() -- failed, server->goep_conn_id:(%d), find->goep_conn_id:(%d)")  
    TRC_MSG(BT_FTPS_SDP_DEREGISTER_CNF_HDLR, "[FTPMMI_GOEP] mmi_bt_ftps_sdp_deregister_cnf_hdlr(), state(%d)")
    TRC_MSG(BT_FTPS_REGISTER_SERVER_CNF_HDLR, "[FTPMMI_GOEP] mmi_bt_ftps_register_server_rsp_hdlr(), state(%d)")
    TRC_MSG(BT_FTPS_DEREGISTER_SERVER_CNF_HDLR, "[FTPMMI_GOEP] mmi_bt_ftps_deregister_server_rsp_hdlr(), state(%d)")
    TRC_MSG(BT_FTPS_CONNECT_IND_HDLR, "[FTPMMI_GOEP] mmi_bt_ftps_connect_ind_hdlr(), state(%d)")
    TRC_MSG(BT_FTPS_PUSH_IND_HDLR, "[FTPMMI_GOEP] mmi_bt_ftps_push_ind_hdlr(), state(%d)")
    TRC_MSG(BT_FTPS_PULL_IND_HDLR, "[FTPMMI_GOEP] mmi_bt_ftps_pull_ind_hdlr(), state(%d), ind->pkt_type:(%d)")  
    TRC_MSG(BT_FTPS_PULL_IND_HDLR_CONTINUE_WRITE_FOLDER, "[FTPMMI_GOEP] mmi_bt_ftps_pull_ind_hdlr() -- continue write, state(%d)")  
    TRC_MSG(BT_FTPS_PULL_IND_HDLR_CONTINUE_WRITE_FOLDER_FS_ERROR, "[FTPMMI_GOEP] mmi_bt_ftps_pull_ind_hdlr() -- gen folder error, ret(%d)")  
    TRC_MSG(BT_FTPS_SET_FOLDER_IND_HDLR, "[FTPMMI_GOEP] mmi_bt_ftps_set_folder_ind_hdlr(), state(%d), ind->setpath_flag:(%d)")
    TRC_MSG(BT_FTPS_ABORT_IND_HDLR, "[FTPMMI_GOEP] mmi_bt_ftps_abort_ind_hdlr(), state(%d)")
    TRC_MSG(BT_FTPS_AUTHORIZE_IND_HDLR, "[FTPMMI_GOEP] mmi_bt_ftps_authorize_ind_hdlr(), state(%d)")
    TRC_MSG(BT_FTPS_SET_FS_FLAG, "[FTPMMI_GOEP] mmi_bt_ftps_set_fs_flag() = %d")
    TRC_MSG(BT_FTPS_READ_FS_FLAG, "[FTPMMI_GOEP] mmi_bt_ftps_read_fs_flag_and_popup()")   
    TRC_MSG(BT_FTPS_PUSH_DEL_CBK, "[FTPMMI_GOEP] mmi_bt_ftps_push_delete_call_back() state(%d), DEL result:(%d)")   
    TRC_MSG(BT_FTPS_USB_PLUG_IN, "[FTPMMI_GOEP] mmi_bt_ftps_usb_plugin_hdle()")   
    TRC_MSG(BT_FTPS_AUTH_SCR_HDLR, "[FTPMMI] mmi_bt_ftps_auth_scr_hdlr(), behavior[%d]")
    TRC_MSG(BT_FTPS_CNTX_INIT, "[FTPS] bt_ftps_cntx_init()")
    TRC_MSG(BT_FTPS_WORK_FOLDER_INIT, "[FTPS] bt_ftps_work_folder_init()")
    TRC_MSG(BT_FTP_UTIL_DELETE_FILE, "[FTP] delete file:(%s)")
    TRC_MSG(BT_FTPS_WRITER_FLUSH_BUFFER_FAIL,"[FTPS][WRN] write data to file ret:%d")
    TRC_MSG(BT_FTPS_WRITER_FLUSH_NEWDATA_FAIL, "[FTPS][WRN] wriet data to file ret:%d")
    //TRC_MSG(BT_FTPS_GEN_FOLDER_PARAM, "[FTPS] gen_folder_content root:(%d) path:(%s) output:(%s) max:(%d)")
    TRC_MSG(BT_FTPS_UTIL_OPEN_FILE_FAIL, "[FTPS][ERR] open file fail fh:(%d)")
    TRC_MSG(BT_FTPS_INIT_NBUFFER_DISABLE, "[FTPS] nbuffer_isInit false. disable it. set:(%d)")
    TRC_MSG(BT_FTPS_GEN_FOLDER_PARAM,"[FTPS] gen_folder_content root:(%d) path:(%s) output:(%s) max:(%d)")
    TRC_MSG(BT_FTPS_GEN_FOLDER_PARAM_CHECK_FAIL, "[FTPS][WRN] gen_folder folderpath is 0(%d) xmlFilepath is 0(%d)")
    TRC_MSG(BT_FTPS_GEN_FOLDER_FINDFIRST_FAIL,"[FTPS][WRN] gen_folder fail to browse folder")
    TRC_MSG(BT_FTPS_GEN_FOLDER_ADD_EXTRA_OBJECT,"[FTPS] add extra object to xml file num:(%d)")
    TRC_MSG(BT_FTPC_CLOSE_RECV_FILE, "[FTPC] close recv file handle")
    TRC_MSG(BT_FTPC_OPEN_FILE_FAIL, "[FTPC][WRN] fail to open file fh:(%d)")
    TRC_MSG(BT_FTPC_GET_FILESIZE_FAIL, "[FTPC][WRN] fail to get file size:(%d)")
    TRC_MSG(BT_FTPC_CLOSE_PUSH_FILE, "[FTPC] close push file handle")
    TRC_MSG(BT_FTPC_ACTION_DELETE_FOLDER, "[FTPC] delete_folder_routine delete folder name:(%s)")
    TRC_MSG(BT_FTPC_ACTION_CREATE_FOLDER, "[FTPC] create_folder_routine create folder name:(%s)")
    TRC_MSG(BT_FTPC_ACTION_PUSH_FILE, "[FTPC] start_push_a_file filename state:(%d)")
    TRC_MSG(BT_FTPC_ACTION_PUSH_FILE_FAIL, "[FTPC][WRN] start_push_a_file wrong state")
    TRC_MSG(BT_FTPC_ACTION_PUSH_FILE_CHECKSIZE_FAIL, "[FTPC][WRN] start_push_a_file filename too long")
    TRC_MSG(BT_FTPC_ACTION_PUSH_FILE_GETFILENAME_FAIL, "[FTPC][WRN] start_push_a_file filename too long")
    TRC_MSG(BT_FTPC_PUSH_FILE_HDL, "[FTPC] start_push_a_file filename rsp_code:(%d) state:(%d) fh:(%d)")
    TRC_MSG(BT_FTPC_FILE_STATE_CHECK, "[FTPC][WRN] file-state:(%d) total:(%d) reamin:(%d) fh:(%d)")
		
    /* FTP Client */
    TRC_MSG(BT_FTPC_TARGET_FILEPATH, "[FTPC] target filepath:(%s)")
    TRC_MSG(BT_FTPC_TARGET_FILENAME, "[FTPC] target filename:(%s)")
    TRC_MSG(BT_FTPC_TARGET_FOLDERPATH, "[FTPC] target folderpath:(%s)")
    TRC_MSG(BT_FTPC_UTIL_OPEN_FILE_FAIL, "[FTPC][ERR] open file fail fh:(%d)")
    TRC_MSG(BT_FTPC_DEL_RECV_FILE, "[FTPC] delete receive file:(%s)")
    TRC_MSG(BT_FTPC_ACTION_PUSH_FILE_DONE, "[FTPC] push_file done")
    TRC_MSG(BT_FTPC_PUSH_CNF_HDLR, "[FTPC] push_cnf rsp_code:(%d) state:(%d) abort:(%d)")
    TRC_MSG(BT_FTPC_TARGET_FOLDERPATH_NO_RESOURCE, "[FTPC][ERR] NO ENOUGH SPACE to save filepath")
    // API
    TRC_MSG(BT_FTPC_CONNECT_SERVER, "[FTPC] bt_ftpc_connect_server()")
    TRC_MSG(BT_FTPC_CONNECT_SERVER_CHECK, "[FTPC] bt_ftpc_connect_server() check context index:(%d), state:(%d), lap:(%d), uap:(%d), nap:(%d)")
    TRC_MSG(BT_FTPC_BACK_FOLDER, "[FTPC] bt_ftpc_back_folder() state:(%d), goep_conn_id:(%d)")   
    TRC_MSG(BT_FTPC_ROOT_FOLDER, "[FTPC] bt_ftpc_root_folder() state:(%d), goep_conn_id:(%d)")
    TRC_MSG(BT_FTPC_CHANGE_FOLDER, "[FTPC] bt_ftpc_change_folder() state:(%d), goep_conn_id:(%d)")
    TRC_MSG(BT_FTPC_CHANGE_FOLDER_FORWARD, "[FTPC] bt_ftpc_change_folder(): Forward Folder")
    TRC_MSG(BT_FTPC_CHANGE_FOLDER_BACK, "[FTPC] bt_ftpc_change_folder(): Back Folder")
    TRC_MSG(BT_FTPC_CHANGE_FOLDER_REFRESH, "[FTPC] bt_ftpc_change_folder(): Refresh Folder")
    TRC_MSG(BT_FTPC_GET_FILE_OBJ, "[FTPC] bt_ftpc_get_file_obj() FTPC check state. state:(%d)")
    // INTERNAL
    TRC_MSG(BT_FTPC_IS_RUN, "[FTPC] bt_ftpc_is_run() FTPC check state. state:(%d)")
    TRC_MSG(BT_FTPC_IS_CANCELING, "[FTPC] bt_ftpc_is_canceling() FTPC check state. state:(%d) abort-flag:(%d)")
    TRC_MSG(BT_FTPC_IS_ABORTING, "[FTPC] bt_ftpc_is_aborting() FTPC check state. state:(%d) abort-flag:(%d)")
    TRC_MSG(BT_FTPC_CONNECTION_TERMINATED, "[FTPC] bt_ftpc_connection_terminated()")
    TRC_MSG(BT_FTPC_WORK_FOLDER_INIT, "[FTPC] bt_ftp_work_folder_init()")
    TRC_MSG(BT_FTPC_WORK_FOLDER_INIT_OPEN_NO_ERROR, "[FTPC] bt_ftp_work_folder_init() open no error")
    TRC_MSG(BT_FTPC_WORK_FOLDER_INIT_OPEN_ERROR, "[FTPC] bt_ftp_work_folder_init() open error")
    TRC_MSG(BT_FTPC_DISCONNECT_IND_HDLR, "[FTPC] bt_ftp_disconnect_ind_hdlr() client->goep_id:(%d), client->req_id:(%d), client->state:(%d)")
    TRC_MSG(BT_FTPS_DISCONNECT_IND_HDLR, "[FTPS] bt_ftp_disconnect_ind_hdlr() ind->goep_id:(%d), ind->req_id:(%d), server->goep_id:(%d), server->state:(%d) ")
    //TRC_MSG(BT_FTPC_DISCONNECT_IND_HDLR, "[FTPC] bt_ftp_disconnect_ind_hdlr() ind->goep_id:(%d), ind->req_id:(%d), client->goep_id:(%d), client->req_id:(%d), client->state:(%d)")
    TRC_MSG(BT_FTPC_DISCONNECT_IND_HDLR_FIND_INDEX_FAILED, "[FTPC] bt_ftp_disconnect_ind_hdlr()-- all open FTS and FTC:find index failed")   
    TRC_MSG(BT_FTPC_DISCONN_IND_HDLR_FIND_INDEX_FAILED_CONN_CACEL, "[FTPC] bt_ftp_disconnect_ind_hdlr()-- client connect cacel case: find index failed")   
    // HDLR/MSG
    TRC_MSG(BT_FTPC_UNKNOW_MSG_HDLR, "[FTPC][ERR] Unhandle msg-id:(%d)" )
    TRC_MSG(BT_FTPC_CONNECT_CANCEL, "[FTPC] bt_ftpc_connect_cancel() FTPC check state. state:(%d)")
    TRC_MSG(BT_FTPC_SEND_DISCONNECT_MSG, "[FTPC] bt_ftpc_send_disconnect() FTPC check state. state:(%d)")
    TRC_MSG(BT_FTPC_SEND_ABORT_MSG, "[FTPC] send abort message ")
    TRC_MSG(BT_FTPC_CNTX_INIT, "[FTPC] btmtk_ftpc_client_enable()")
    TRC_MSG(BT_FTPC_CNTX_INIT_WRN, "[FTPC] btmtk_ftpc_client_enable() has enabled")
    TRC_MSG(BT_FTPC_CNTX_DEINIT, "[FTPC] btmtk_ftpc_client_disable()")
    TRC_MSG(BT_FTPC_CNTX_DEINIT_WRN, "[FTPC] btmtk_ftpc_client_disable() has disabled")
    TRC_MSG(BT_FTPC_RECEIVED_FOLDER_INIT_OPEN, "[FTPC] bt_ftpc_received_folder_init() FS_Open(%d)")
    TRC_MSG(BT_FTPC_RECEIVED_FOLDER_INIT_CREATE, "[FTPC] bt_ftpc_received_folder_init() FS_CreateDir(%d)")
    TRC_MSG(BT_FTPC_FIND_GOEP_ID_FAILED, "[FTPC] bt_ftpc_find_goep_id() -- failed, client->goep_conn_id:(%d), find->goep_conn_id:(%d)")  
    TRC_MSG(BT_FTPC_WRITE_OBJ, "[FTPC] bt_ftpc_write_obj(), rsp->pkt_type(%d) rsp->frag_len(%d)")
    TRC_MSG(BT_FTPC_WRITE_OBJ_OPEN, "[FTPC] bt_ftpc_write_obj(), file open FS_OPEN(%d)")
    TRC_MSG(BT_FTPC_WRITE_OBJ_WRITE, "[FTPC] bt_ftpc_write_obj(), file write FS_WRITE(%d)")
    TRC_MSG(BT_FTPC_WRITE_OBJ_CONTINUE, "[FTPC] bt_ftpc_write_obj_continue(), rsp->pkt_type(%d) rsp->frag_len(%d)")
    TRC_MSG(BT_FTPC_WRITE_OBJ_CONTINUE_WRITE,"[FTPC] bt_ftpc_write_obj_continue(), file write FS_WRITE(%d)")
    TRC_MSG(BT_FTPC_GET_FOLDER, "[FTPC] bt_ftpc_get_folder(), rsp->rsp_code(%d), rsp->pkt_type(%d), rsp->to_self(%d)")
    TRC_MSG(BT_FTPC_GET_FOLDER_PARSE_RESUME, "[FTPC] bt_ftpc_get_folder() -- parse resume, entity of cur folder:(%d), parsed cnt of cur folder:(%d)")
    TRC_MSG(BT_FTPC_GET_FOLDER_PARSE_DONE, "[FTPC] bt_ftpc_get_folder() -- parse done(goto), parse_return:(%d), entity of cur folder:(%d), parsed cnt of cur folder:(%d)")
    TRC_MSG(BT_FTPC_GET_FOLDER_CONTINUE_PARSE, "[FTPC] bt_ftpc_get_folder() -- continue parse(goto) send pull_rsp to self")
    TRC_MSG(BT_FTPC_GET_FOLDER_OPEN, "[FTPC] bt_ftpc_write_obj(), file open FS_OPEN(%d)")
    TRC_MSG(BT_FTPC_GET_FOLDER_WRITE, "[FTPC] bt_ftpc_write_obj(), file write fh:(%d) FS_WRITE(%d)")
    TRC_MSG(BT_FTPC_GET_OBJ, "[FTPC] bt_ftpc_get_obj(), rsp->rsp_code(%d), rsp->pkt_type(%d)")
    TRC_MSG(BT_FTPC_PARSE_FOLDER_CONTENT, "[FTPC] bt_ftpc_parse_folder_content()")
    TRC_MSG(BT_FTPC_PARSE_FOLDER_CONTENT_PAUSE, "[FTPC] bt_ftpc_parse_folder_content() -- parsing pause!!, entity of cur folder:(%d)")
    TRC_MSG(BT_FTPC_FOLDER_LISTING_START_EL, "[FTPC] bt_ftpc_folder_listing_startElement() -- parsing pause!!, entity of cur folder:(%d)")
    TRC_MSG(BT_FTPC_GET_FOLDER_CONTENT, "[FTPC] bt_ftpc_get_folder_content(), state:(%d), goep_conn_id:(%d)")
    TRC_MSG(BT_FTPC_CONNECT_CNF_HDLR, "[FTPC] bt_ftpc_connect_rsp_hdlr(), rsp_code:(%d) state:(%d)")
    TRC_MSG(BT_FTPC_PULL_CNF_HDLR, "[FTPC] bt_ftpc_pull_rsp_hdlr(), state:(%d) abort:(%d)")
    TRC_MSG(BT_FTPC_SET_FOLDER_CNF_HDLR, "[FTPC] bt_ftpc_set_folder_rsp_hdlr(), state:(%d)")
    TRC_MSG(BT_FTPC_ABORT_CNF_HDLR, "[FTPC] bt_ftpc_abort_rsp_hdlr(), state:(%d)")
    TRC_MSG(BT_FTPS_CONNECTION_TERMINATED, "[FTPS] bt_ftp_connection_terminated(), server/client role:(%d)")
    TRC_MSG(BT_FTPC_CHECK_FOLDER_EXISTED, "[FTPC] bt_ftp_check_folder_existed(), path:(%s)")   
    TRC_MSG(BT_FTPC_CHECK_FOLDER_EXISTED_ERROR, "[FTPC] bt_ftp_check_folder_existed(), return(%d)")   
    TRC_MSG(BT_FTPC_DELETE_FILE, "[FTPC] bt_ftp_delete_file()")   
    TRC_MSG(BT_FTPC_GET_LIST, "[FTPMMI_SCR] bt_ftpc_get_list_files()")   
    TRC_MSG(BT_FTPC_GET_RECV_CALL_BACK, "[FTPMMI_SCR] bt_ftpc_get_recv_drv_callback() uuid=0x%x,drv=%d,selected=%d")
    TRC_MSG(BT_FTPC_GET_ALL, "[FTPMMI_SCR] bt_ftpc_get_all_files()")
    TRC_MSG(BT_FTPC_FIND_NEXT_FILE, "[FTPMMI_SCR] bt_ftpc_find_next_file()")
    TRC_MSG(BT_FTPC_CHECK_LIST, "[FTPMMI_SCR] bt_ftpc_check_list()")
    TRC_MSG(BT_FTPC_FREE_LIST, "[FTPMMI_SCR] bt_ftpc_free_list()")
    TRC_MSG(BT_FTPC_GET_NEXT_FILE, "[FTPMMI_SCR] bt_ftpc_get_next_file()")
    TRC_MSG(BT_FTPC_RESET_PULL_VAR, "[FTPMMI_SCR] bt_ftpc_reset_pull_variable()")
    TRC_MSG(BT_FTPC_PARSE_EL_START_ERR, "[FTPC] bt_ftpc_folder_listing_startElement() -- parser error and stopped.")
    TRC_MSG(BT_FTPC_PARSE_EL_END_ERR, "[FTPC] bt_ftpc_folder_listing_endElement() -- parser error and stopped.")
    TRC_MSG(BT_FTPC_RENAME_OBJ, "[FTPMMI_SCR] bt_ftpc_rename_recved_obj().")
    TRC_MSG(BT_FTPC_ABORTED_HDL, "[FTPC] bt_ftpc_receiving_aborted_hdlr().")
    TRC_MSG(BT_FTPC_DEL_TMP_FILE, "[FTPC] bt_ftpc_delete_pulling_file().")
    TRC_MSG(BT_FTPC_SET_FLAG_ABORT_REQ_SENT, "[FTPC] bt_ftpc_set_abort_req_sent_flag().")
    TRC_MSG(BT_FTPC_RESET_FLAG_ABORT_REQ_SENT, "[FTPC] bt_ftpc_reset_abort_req_sent_flag().")
    TRC_MSG(BT_FTPC_BROWSE_FILES_TIMER_TIMEOUT_FAILED_HDLR, "[FTPC] bt_ftpc_browse_files_failed_timer_expire_hdler().")
    TRC_MSG(BT_FTPC_PARSE_FOLDER_CONTENT_FS_OPEN, "[FTPC] bt_ftpc_parse_folder_content().  parsed file FS_OPEN(%d)")
    TRC_MSG(BT_FTPC_PARSE_FOLDER_CONTENT_FS_OPEN_LNAME_FILE, "[FTPC] bt_ftpc_parse_folder_content().  long file name file FS_OPEN(%d)")
    //TRC_MSG(BT_FTPC_WRITE_BUF2FILE_FS_WRITE, "[FTPC] bt_ftp_write_buf2file().   FS_WRITE(%d)")
    //TRC_MSG(BT_FTPC_READ_FS_FLAG, "[FTPC] bt_ftpc_read_fs_flag_and_popup(). ")
    TRC_MSG(BT_FTPC_SET_FS_FLAG, "[FTPC] bt_ftpc_set_fs_flag(). = %d ")
    //TRC_MSG(BT_FTPC_ADD_HISTORY_BEFORE_CM, "[FTPC] bt_ftp_add_history_before_cm_marker(). ")
    //TRC_MSG(BT_FTPC_INTBUF_WRITE_OBJ_CONTINUE, "[FTPC] bt_ftpc_intbuf_write_obj_continue()")   
    //TRC_MSG(BT_FTPC_INTBUF_WRITE_OBJ_CONTINUE_WRITE,"[FTPC] bt_ftpc_intbuf_write_obj_continue(), file write FS_WRITE(%d)")
    //TRC_MSG(BT_FTPC_USB_PLUG_IN,"[FTPC] bt_ftpc_usb_plugin_hdle()")
    TRC_MSG(BT_FTPC_MAKE_RECV_PATH, "[FTPMMI_SCR] bt_ftpc_make_recv_path()")
    TRC_MSG(BT_FTPC_WRITE_LNAME2FILE,"[FTPC] bt_ftpc_write_lname2file()")
    TRC_MSG(BT_FTPC_WRITE_LNAME2FILE_FS_OPEN,"[FTPC] bt_ftpc_write_lname2file() FS_OPEN(%d)")
    TRC_MSG(BT_FTPC_WRITE_LNAME2FILE_FS_SEEK,"[FTPC] bt_ftpc_write_lname2file() FS_SEEK(%d)")
    TRC_MSG(BT_FTPC_WRITE_LNAME2FILE_FS_WRITE,"[FTPC] bt_ftpc_write_lname2file() FS_WRITE(%d)")
    TRC_MSG(BT_FTPC_READ_LNAME,"[FTPC] bt_ftpc_read_lname()")
    TRC_MSG(BT_FTPC_READ_LNAME_FS_OPEN,"[FTPC] bt_ftpc_read_lname() FS_OPEN(%d)")
    TRC_MSG(BT_FTPC_READ_LNAME_FS_SEEK,"[FTPC] bt_ftpc_read_lname() FS_SEEK(%d)")
    TRC_MSG(BT_FTPC_READ_LNAME_FS_READ,"[FTPC] bt_ftpc_read_lname() FS_READ(%d)")
    TRC_MSG(BT_FTPC_DISCONNECT_CLIENT_CHECK, "[FTPC] bt_ftpc_disconnect_server() state:(%d), context.g_conn_id:(%d), cm.g_conn_id(%d)")  
/* FTP TRACE END */

/* HID TRACE START */
    TRC_MSG(BT_HIDD_ADP_STATUS, "[HID ADP] hidd status: hidd_state=%d, hidd_active=%d, num_intr_queue=%d, intrTx=%d")
    TRC_MSG(BT_HIDD_ADP_STATE_CHANGE_IND, "[HID ADP] hidd state change: %d --> %d")
    TRC_MSG(BT_HIDD_ADP_START_TIMER, "[HID ADP] start timer, timer_id=%d, timer_duration=%d")      
    TRC_MSG(BT_HIDD_ADP_STOP_TIMER, "[HID ADP] stop timer, timer_id=%d")      
    TRC_MSG(BT_HIDD_ADP_SEND_MOUSE_COMMAND, "[HID ADP] send mouse cmd, cmd:0x%02x 0x%02x")      
    TRC_MSG(BT_HIDD_ADP_SEND_KBD_COMMAND, "[HID ADP] send kbd cmd, cmd:0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x")      
    TRC_MSG(BT_HIDD_ADP_SEND_COMPLETE_STATUS,"[HID ADP] Interrupt complete status, status = %d, intrTx = %d")
    TRC_MSG(BT_HIDD_ADP_SEND_STATUS,"[HID ADP] Interrupt complete status, status = %d")
    TRC_MSG(BT_HIDD_ADP_TRANSATION_COMPLETE,"[HID ADP] Transation complete status, status = %d, transation type = %d")
    TRC_MSG(INTERRUPT_COMPLETE_FAILED,"[HID ADP] Interrupt complete failed")
    TRC_MSG(CONNECTION_OPENED,"[HID ADP] Connection opened")
    TRC_MSG(HID_SENDING_SET_PROTOCOL_RESPONSE,"[HID ADP] HID Sending Set Protocol Response...")
    TRC_MSG(CONTROL_FUNCTION_RECEIVED_SUSPEND,"[HID ADP] Control Function Received: SUSPEND")
    TRC_MSG(HID_SENDING_INTERRUPT,"[HID ADP] HID Sending Interrupt...")
    TRC_MSG(INTERRUPT_RECEIVED,"[HID ADP] Interrupt Received:")
    TRC_MSG(CONTROL_FUNCTION_RECEIVED_SOFT_RESET,"[HID ADP] Control Function Received: SOFT RESET")
    TRC_MSG(SET_PROTOCOL_PROTOCOL__x02X,"[HID ADP] Set Protocol, Protocol = %02X")
    TRC_MSG(HID_SENDING_GET_PROTOCOL_RESPONSE,"[HID ADP] HID Sending Get Protocol Response...")
    TRC_MSG(SET_REPORT_REPORT_DATA_LEN__xD,"[HID ADP] Set Report, Report data len = %d:")
    TRC_MSG(OPEN_REQUEST_RECEIVED,"[HID ADP] Open request received")
    TRC_MSG(INTRPOOL_IS_EMPRY,"intrPool is empry")
    TRC_MSG(HID_CHANNEL_COULD_NOT_SEND_SET_IDLE_RATE_RESPONSE_REASON_x02X,"[HID ADP] HID Channel could not send Set Idle Rate Response, reason: %02x")
    TRC_MSG(CONTROL,"[HID ADP] Control:")
    TRC_MSG(CONTROL_FUNCTION_RECEIVED_HARD_RESET,"[HID ADP] Control Function Received: HARD RESET")
    TRC_MSG(HID_CHANNEL_COULD_NOT_SEND_GET_REPORT_RESPONSE_REASON_x02X,"[HID ADP] HID Channel could not send Get Report Response, reason: %02x")
    TRC_MSG(TRANSACTION_RECEIVED,"[HID ADP] Transaction Received:")
    TRC_MSG(TRANSACTION_COMPLETE_STATUS__x0X2,"[HID ADP] Transaction complete, status = %0x2")
    TRC_MSG(CONTROL_FUNCTION_RECEIVED_NOP,"[HID ADP] Control Function Received: NOP")
    TRC_MSG(HID_SENDING_SET_REPORT_RESPONSE,"[HID ADP] HID Sending Set Report Response...")
    TRC_MSG(INTERRUPT_COMPLETE,"[HID ADP] Interrupt complete successfully")
    TRC_MSG(HID_CHANNEL_COULD_NOT_SEND_GET_IDLE_RATE_RESPONSE_REASON_x02X,"[HID ADP] HID Channel could not send Get Idle Rate Response, reason: %02x")
    TRC_MSG(GET_PROTOCOL,"[HID ADP] Get Protocol:")
    TRC_MSG(SET_IDLE_IDLE_RATE__xD,"[HID ADP] Set Idle, Idle Rate = %d:")
    TRC_MSG(HID_CHANNEL_COULD_NOT_SEND_SET_REPORT_RESPONSE_REASON_x02X,"[HID ADP] HID Channel could not send Set Report Response, reason: %02x")
    TRC_MSG(HID_CHANNEL_COULD_NOT_SEND_SET_PROTOCOL_RESPONSE_REASON_x02X,"[HID ADP] HID Channel could not send Set Protocol Response, reason: %02X")
    TRC_MSG(COULD_NOT_ACCEPT_THE_INCOMING_CONNECTION,"[HID ADP] Could Not accept the incoming connection, status: %d")
    TRC_MSG(CONTROL_FUNCTION_RECEIVED_VIRTUAL_CABLE_UNPLUG,"[HID ADP] Control Function Received: VIRTUAL CABLE UNPLUG")
    TRC_MSG(UNKNOWN_CONTROL_FUNCTION,"[HID ADP] Unknown Control Function")
    TRC_MSG(HID_SENDING_GET_IDLE_RATE_RESPONSE,"[HID ADP] HID Sending Get Idle Rate Response...")
    TRC_MSG(CLOSE_INDICATION_RECEIVED,"[HID ADP] Close indication received")
    TRC_MSG(HID_SENDING_GET_REPORT_RESPONSE,"[HID ADP] HID Sending Get Report Response...")
    TRC_MSG(GET_IDLE,"[HID ADP] Get Idle:")
    TRC_MSG(CONTROL_FUNCTION_RECEIVED_EXIT_SUSPEND,"[HID ADP] Control Function Received: EXIT SUSPEND")
    TRC_MSG(GET_REPORT,"[HID ADP] Get Report:")
    TRC_MSG(CONNECTION_CLOSED,"[HID ADP] Connection closed")
    TRC_MSG(HID_CHANNEL_COULD_NOT_SEND_GET_PROTOCOL_RESPONSE_REASON_x02X,"[HID ADP] HID Channel could not send Get Protocol Response, reason: %02x")
    TRC_MSG(HID_SENDING_SET_IDLE_RATE_RESPONSE,"[HID ADP] Sending Set Idle Rate Response...")
    TRC_MSG(HID_CHANNELx08X,"[HID] L2CAP callback channel:%08x")
    TRC_MSG(HIDSTATEOPEN1_PKT_RETURNED_WITH_TRANS_TYPExD,"[HID] HidStateOpen pkt returned with trans type:%d")
    TRC_MSG(HIDSTATEOPEN2_PKT_RETURNED_WITH_TRANS_TYPExD,"[HID] HidStateOpen pkt returned with trans type1:%d")
    TRC_MSG(HIDSTATEOPEN_SEND_MORE_DATA,"[HID] HidStateOpen: send more data")
    TRC_MSG(HIDSTATEOPENPKT_RETURNED_WITH_ERR_FLAG,"[HID] HidStateOpen:Pkt returned with err flag")
    TRC_MSG(HIDCOMPLETETRANSACTION_WITH_TYPExD,"[HID] HidCompleteTransaction: with type=%d")
    TRC_MSG(CHANNELSTATEx02X,"channel->state:%02x")
    TRC_MSG(GET_REPORT_BIT3_IS_0,"Get Report bit3 is 0")
    TRC_MSG(GET_REPORT_BIT3_IS_1,"Get Report bit3 is 1")
    TRC_MSG(GET_REPORTIDxD,"Get ReportId=%d")
    TRC_MSG(UNUSED_CHANNEL_0_IGNORE_IT,"Unused channel ==0, ignore it")
    TRC_MSG(INSERT_TO_TRANSQUEUE_WITH_TYPExD,"Insert to transQueue with type=%d")
    TRC_MSG(TRY_TO_REGISTER_SECURITY_RECORDx02X,"Try to register security record:%02x")
    TRC_MSG(TRY_TO_REGISTER_SECURITY_RECORD,"Try to register security record")
    TRC_MSG(RECV_GET_REPORT_WITH_VALID_ID,"Recv GET_REPORT with valid Id")
    TRC_MSG(CHANNEL_IS_0_RETURN,"channel is 0, return")
    TRC_MSG(GET_REPORT_PARMA_LENxD,"Get Report Parma Len=%d")
    TRC_MSG(BEFORE_L2CAP_SEND_TRANSTYPExD,"Before L2Cap Send, transType=%d")
    TRC_MSG(L2CAP_CONNECTRSPx02X,"L2CAP_ConnectRsp:%02x")
    TRC_MSG(CIDxDCTRLCIDxD,"cid=%d,ctrlCid=%d")

    TRC_MSG(CAR_SDP_PARSEATTRIBUTES__CONTINUATION_STATE_QUERY_AGAIN,"CAR: SDP_ParseAttributes - Continuation State. Query Again!")
    TRC_MSG(HID_HOST_INVALID_CONTROL_COMMAND,"[HID] Host: invalid CONTROL command")
    TRC_MSG(HID_SDP_QUERY_FAILED,"[HID] SDP Query failed")
    TRC_MSG(HID_SDP_PARSEATTRIBUTES_SUCCEEDED_VALUE__0Xx02XUPDATED_BUFF_LEN__xD,"[HID] SDP_ParseAttributes succeeded! Value = 0x%02x,Updated Buff Len = %d")
    TRC_MSG(HID_HIDSENDNEXTTRANSACTION_x02X,"[HID] HidSendNextTransaction :%02x")
    TRC_MSG(HID_C_SMAx02XBx02X,"[HID] Connected Channel state:%02x,CID:%02x")
    TRC_MSG(HID_HIDSENDNEXTINTERRUPT_x02X,"[HID] HidSendNextInterrupt :%02x")
    TRC_MSG(HID_COULD_NOT_RESTART_QUERY,"[HID] Could not restart query")
    TRC_MSG(HID_OPENCONNECTION,"[HID] OpenConnection")
    TRC_MSG(HID_CHANNEL_CLOSED_STATE_RECEIVED_AN_UNEXPECTED_EVENT_x02X,"[HID] Channel closed state received an unexpected event: %02X")
    TRC_MSG(HID_STATUSx02X,"[HID] CMGR link status:%02x")
    TRC_MSG(BT_HID_SDP_QUERY_CALLBACK_x02X,"[HID] bt_hid_sdp_query_callback :%02x")
    TRC_MSG(HIDSTATEOPENx02X,"[HID] HidStateOpen event:%02x")
    TRC_MSG(HID_SDP_PARSING_FAILED,"[HID] SDP Parsing failed")
    TRC_MSG(HIDSTATECONNPENDINGx02X,"[HID] HidStateConnPending event:%02x")
    TRC_MSG(HIDSTATECLOSEDx02X,"[HID] HidStateClosed event:%02x")
    TRC_MSG(HIDSTATEDISCPENDINGx02X_CIDx02X,"[HID] HidStateDiscPending event:%02x, Cid:%02x, reason: %02x")
    TRC_MSG(HID_SDP_PARSEATTRIBUTES_SUCCEEDED_BYTES_READ__xD_UPDATED_BUFF_LEN__xD,"[HID] SDP_ParseAttributes succeeded!, Bytes Read = %d, Updated Buff Len = %d")
    TRC_MSG(HID_CHANNEL_CONN_PENDING_STATE_RECEIVED_AN_UNEXPECTED_EVENT_x02X,"[HID] Channel conn pending state received an unexpected event %02X")
    TRC_MSG(HIDCHANNELCTRLCIDx02X,"[HID] OpenInd Control channel Cid:%02x")
    TRC_MSG(HID_SERVER_OPEN_STATE_RECEIVED_AN_UNEXPECTED_EVENT_x02X,"[HID] Server open state received an unexpected event: %02X")
    TRC_MSG(HID_HID_ISCONNECTEDx02X,"[HID] HID_IsConnected:%02x")
    TRC_MSG(HID_E_SMAx02XBx02X,"[HID] L2CAP callback default event state:%02x,CID:%02x")
    TRC_MSG(HID_INVALID_PROFILE_VERSION,"[HID] Invalid profile version")
    TRC_MSG(HID_RESPONDOPENIND_STATEx02X,"[HID] HID_RespondOpenInd, state:%02x")
    TRC_MSG(HID_TRY_TO_DISCONNECT_INTR_CHANNEL,"[HID] Try to disconnect intr channel")
    TRC_MSG(HID_HOST_UNEXPECTED_DATC,"[HID] Host: unexpected DATC")
    TRC_MSG(HID_CTRL_L2CAP_CONNECTREQSTATUSx02X,"[HID] CTRL L2CAP_ConnectReqstatus:%02x")
    TRC_MSG(HID_B_SMAx02XBx02X,"[HID] L2CAP callback CONN_IND state:%02x,CID:%02x")
    TRC_MSG(HID_A_SMAx02XBx02X,"[HID] L2CAP callback CONN_AUTH state:%02x,CID:%02x")
    TRC_MSG(HID_CID_x02X,"[HID] L2CAP callback CID: %02x")
    TRC_MSG(HIDL2CAP_AUTHORIZECONNECTRSP_STATUSx02X,"[HID] L2Cap_AuthorizeConnectRsp status%02x")
    TRC_MSG(HIDPARMSEVENTx02X,"[HID] L2CAP callback event: %02x")
    TRC_MSG(L2CAP_HID_TX_STATUSx02X,"[HID] L2CAP hid tx status:%02x")
    TRC_MSG(HIDCOMPLETETRANSACTION,"[HID] HidCompleteTransaction")
    TRC_MSG(HID_D_SMAx02XBx02X,"[HID] L2CAP callback DISCONNECTED state:%02x,CID:%02x")
    TRC_MSG(HID_SDP_PARSEATTRIBUTES_SUCCEEDED_VALUE__0Xx04XUPDATED_BUFF_LEN__xD,"[HID] SDP_ParseAttributes succeeded! Value = 0x%04x,Updated Buff Len = %d")
    TRC_MSG(HIDCMGRCALLBACKx02X,"[HID] CMGR callback event: %02x")
    TRC_MSG(HIDFINDUNUSEDCHANNELx02X,"[HID] HidFindUnusedChannel:%02x")
    TRC_MSG(HID_L2CAP_DISCONNECT_REQ_CID_CIDx02X_STATUSx02X,"[HID] L2CAP Disconnect Req CID:%02x, status:%02x")
    TRC_MSG(CHANNELCTRLCIDx02XCHANNELINTRCIDx02X,"[HID] StateDiscPending Channel->ctrlCid:%02x,Channel->intrCid:%02x")
    TRC_MSG(HID_NOT_THE_CONNECT_BD_ADDR,"[HID] CMGR callback Not the connect bd_addr")
    TRC_MSG(HID_CHANNELCONCOUNTx02X,"[HID] StateDiscPending Channel->conCount:%02x")
    TRC_MSG(HIDSENDTRANSPACKET,"[HID] HidSendTransPacket")
    TRC_MSG(HIDCLEARCONNECTIONx02X,"[HID] HidClearConnection Status:%02x")
    TRC_MSG(HID_CHANNELSTATEx02X,"[HID] OpenConnection Channel->state:%02x")
    TRC_MSG(HID_START_L2CAP_CONNECTION,"[HID] Start L2CAP connection")
    TRC_MSG(HIDCHANNEL_0,"[HID] L2CAP callback wrong channel")
    TRC_MSG(HID_HIDCOMPLETETRANSACTION,"[HID] HidCompleteTransaction")
    TRC_MSG(HIDCHANNELINTRCIDx02X,"[HID] OpenInd Interrupt channel Cid:%02x")
    TRC_MSG(HIDCLEARCONNECTION,"[HID] HidClearConnection")
    TRC_MSG(HIDSENDNEXTTRANSACTION,"[HID] HidSendNextTransaction")
    TRC_MSG(HIDCHANNELCMGRHANDLERBDC0,"[HID] channel->cmgrHandler.bdc==0")
    TRC_MSG(HID_HID_SENDINTERRUPT,"[HID] HID_SendInterrupt")
    TRC_MSG(HID_INITIALIZED,"[HID] Initialized.")
    TRC_MSG(HID_SDP_SUCCESSFULLY,"[HID] SDP successfully")
    TRC_MSG(HID_THIS_IS_DEFININTELY_THE_ONE,"[HID] This is definintely the one")
    TRC_MSG(HID_INVALID_CONNECT_REQUEST,"[HID] Invalid connection request!")
    TRC_MSG(HID_HOST_RESPONSE_RECEIVED_BEFORE_REQUEST_SENT,"[HID] Host: response received before request sent")
    TRC_MSG(HID_HOST_RECEIVED_INPUT_REPORT_IND, "[HID_EXT_ADP] Host: reveived input report, callback: %x, dev_idx: %d, trans_proto: %d")
/* HID TRACE END */

/* PBAP TRACE START */
    TRC_MSG(BT_PBAP_SERVER_STATE_LOG, "[PBAP_ADP] pbap server state is (%d)")
    TRC_MSG(BT_PBAP_SERVER_STATE_TRANS_LOG, "[PBAP_ADP] pbap server state trans from (%d) --> (%d)")
    TRC_MSG(BT_PBAP_FUNC_CONNECT_RSP_HDLR, "[PBAP_ADP] connect_rsp_hdlr func")
    TRC_MSG(BT_PBAP_INIT, "[PBAP_ADP] pbap adp init")
    TRC_MSG(BT_PBAP_DEINIT, "[PBAP_ADP] pbap adp deinit")
    TRC_MSG(BT_PBAP_START_UP_MOD_USBMS_BOOT, "[PBAP_ADP] pbap adp start up in USBMS_BOOT")
    TRC_MSG(BT_PBAP_WORK_FOLDER_INIT, "[PBAP_ADP] pbap adp work folder init")
    TRC_MSG(BT_PBAP_ACTIVATE_WITH_WRONG_STATE, "[PBAP_ADP] pbap adp activate with wrong state : %d")
    TRC_MSG(BT_PBAP_SERVER_ACTIVATE_FAIL, "[PBAP_ADP] pbap adp server activate fail")
    TRC_MSG(BT_PBAP_DEACTIVATE_WITH_WRONG_STATE, "[PBAP_ADP] pbap adp server deactivate with wrong state : %d")
    TRC_MSG(BT_PBAP_SERVER_DEACTIVATE_FAIL, "[PBAP_ADP] pbap adp server deactivate fail")
    TRC_MSG(BT_PBAP_DISCONNECT_RSP_HDLR, "[PBAP_ADP] disconnect rsp hdlr")
    TRC_MSG(BT_PBAP_RECEIVE_DISCONNECT_IN_WRONG_STATE, "[PBAP_ADP] receive disconnect in wrong state : %d")
    TRC_MSG(BT_ADP_PBAP_RELEASE_OBJECT, "[PBAP_ADP] bt_adp_pbap_release_object")
    TRC_MSG(BT_ADP_PBAP_CHECK_STATE_VALID, "[PBAP_ADP] check state is valid : state = %d")
    TRC_MSG(BT_ADP_PBAP_GET_OBJECT_LENGTH, "[PBAP_ADP] get object length , op = %d")
    TRC_MSG(BT_ADP_PBAP_GET_NEW_CALLS, "[PBAP_ADP] get new calls number, %d")
    TRC_MSG(BT_ADP_PBAP_SET_FOLDER_SIZE, "[PBAP_ADP] set folder size, %d")
    TRC_MSG(BT_ADP_PBAP_GET_FOLDER_SIZE, "[PBAP_ADP] get folder size, %d")
    TRC_MSG(BT_ADP_PBAP_GET_FOLDER_OBJECT_LENGTH, "[PBAP_ADP] get folder object length : %d")
    TRC_MSG(BT_ADP_PBAP_GET_LIST_OBJECT_LENGTH, "[PBAP_ADP] get list object length : %d")
    TRC_MSG(BT_ADP_PBAP_GET_ENTRY_OBJECT_LENGTH, "[PBAP_ADP] get entry object length : %d")
    TRC_MSG(BT_ADP_PBAP_READ_ENTRY_IND, "[PBAP_ADP] read entry ind ,state = %d")
    TRC_MSG(BT_ADP_PBAP_READ_FOLDER_IND, "[PBAP_ADP] read folder ind, state = %d")
    TRC_MSG(BT_ADP_PBAP_READ_LIST_IND, "[PBAP_ADP] read list ind , state = %d")
    TRC_MSG(BT_ADP_PBAP_SET_PATH_IND, "[PBAP_ADP] set path ind, state = %d")
    TRC_MSG(BT_ADP_PBAP_CALL_BACK, "[PBAP_ADP] PbaServerCallback : event = %d, oper = %d, state = %d")
    TRC_MSG(BT_PBAP_INIT_FAILED, "[PBAP] Object Store Initialization Failed!")
    TRC_MSG(BT_PBAP_REGISTERED, "[PBAP] Server Registered")
    TRC_MSG(BT_PBAP_DEREGISTERED, "[PBAP] Server De-registered")
    TRC_MSG(BT_PBAP_SERVER_ABORT, "[PBAP] PBAP_ServerAbort with error code %x ")
    TRC_MSG(BT_PBAP_SERVER_GOEP_CALLBACK, "[PBAP] PbapGoepServerCallback GOEP EVENT ID = %d, OPER ID = %d")
    TRC_MSG(BT_PBAP_SERVER_NOT_FOUND, "[PBAP] Server not found.")
    TRC_MSG(BT_PBAP_SERVER_HEADLEN_ZERO, "[PBAP] obex header len == 0")
    TRC_MSG(BT_PBAP_SERVER_OPER_COMPLETE, "[PBAP] Server: %d operation complete.")
    TRC_MSG(BT_PBAP_OBS_NEW_FAIL, "[PBAP]PBAPOBS_New: Out of entries")
    TRC_MSG(BT_PBAP_OBS_READ_ERROR, "[PBAP]Error reading object, req.len=%d,len=%d")
    TRC_MSG(BT_PBAP_ADP_AUTHORIZE_ERROR_STATE,"[PBAP ADP]authorize response in NOT-AUTHORIZING state.")
/* PBAP TRACE END */

/* BIP TRACE START */
    TRC_MSG(BT_BIP_PRINT_I_STATE, "[BIP_ADP] adp state error: iState(%d)")
    TRC_MSG(BT_BIP_PRINT_I_STATE_TRANS, "[BIP_ADP] adp iState transition: (%d) --> (%d)")
    TRC_MSG(BT_BIP_PRINT_R_STATE, "[BIP_ADP] adp state error: rState(%d)")
    TRC_MSG(BT_BIP_PRINT_R_STATE_TRANS, "[BIP_ADP] adp rState transition: (%d) --> (%d)")
    TRC_MSG(BT_BIP_FUNC_INIT, "[BIP_ADP] init func")
    TRC_MSG(BT_BIP_FUNC_DEINIT, "[BIP_ADP] deinit func")
    TRC_MSG(BT_BIP_FUNC_CNTX_DEINIT_FS_CLOSE_FAILED, "[BIP_ADP] cntx_deinit == FS_Close failed:(%d)")   
    TRC_MSG(BT_BIP_FUNC_CNTX_DEINIT_FS_DELETE_FAILED, "[BIP_ADP]cntx_deinit == FS_Delete failed:(%d)")   
    TRC_MSG(BT_BIP_FUNC_CNTX_INIT, "[BIP_ADP] cntx_init func")
    TRC_MSG(BT_BIP_FUNC_WORK_FOLDER_INIT, "[BIP_ADP] work_folder_init func")
    TRC_MSG(BT_BIP_FUNC_WORK_FOLDER_INIT_USB_MS, "[BIP_ADP] work_folder_init == USB MS Mode")
    TRC_MSG(BT_BIP_FUNC_WORK_FOLDER_INIT_OPEN_NO_ERROR, "[BIP_ADP] work_folder_init == open workder folder success")
    TRC_MSG(BT_BIP_FUNC_WORK_FOLDER_INIT_OPEN_ERROR, "[BIP_ADP] work_folder_init == open workder folder failed")   
    TRC_MSG(BT_BIP_FUNC_MSG_HDLR, "[BIP_ADP] msg_hdlr (msg_id:%d)")
    TRC_MSG(BT_BIP_FUNC_CONN_REQ_HDLR_CONN_FAILED, "[BIP_ADP] connect_req_hdlr == failed status:(%d)")
    TRC_MSG(BT_BIP_FUNC_DISCONNECT_REQ_HDLR, "[BIP_ADP] disconnect_req_hdlr func, state:(%d)")
    TRC_MSG(BT_BIP_FUNC_COMMAND_REQ_HDLR, "[BIP_ADP] command_req_hdlr func, iState=(%d)")
    TRC_MSG(BT_BIP_FUNC_ABORT_REQ_HDLR, "[BIP_ADP] abort_req_hdlr func, iState=(%d)")
    TRC_MSG(BT_BIP_FUNC_ACTIVATE_REQ_HDLR, "[BIP_ADP] activate_req_hdlr func, rState=(%d)")
    TRC_MSG(BT_BIP_FUNC_DEACTIVATE_REQ_HDLR, "[BIP_ADP] deactivate_req_hdlr func, rState=(%d)")
    TRC_MSG(BT_BIP_FUNC_COMMAND_RSP_HDLR, "[BIP_ADP] command_rsp_hdlr func, rState=(%d)")
    TRC_MSG(BT_BIP_FUNC_CONTINUE_RSP_HDLR, "[BIP_ADP] continue_rsp_hdlr func")
    TRC_MSG(BT_BIP_FUNC_CONNECT_RSP_HDLR, "[BIP_ADP] connect_rsp_hdlr func, rState=(%d)")
    TRC_MSG(BT_BIP_FUNC_GENERATE_XML_CAPABILITIES, "[BIP_ADP] generate_xml_capabilities func")
    TRC_MSG(BT_BIP_FUNC_GENERATE_XML_IMG_LIST, "[BIP_ADP] generate_xml_img_list func")
    TRC_MSG(BT_BIP_FUNC_GENERATE_XML_IMG_PROP, "[BIP_ADP] generate_xml_img_prop func")
    TRC_MSG(BT_BIP_FUNC_PARSE_XML_IMG_LIST_START_FAIL, "[BIP_ADP] bt_bip_parse_img_list_startElement failed")
    TRC_MSG(BT_BIP_FUNC_PARSE_XML_IMG_LIST_END_FAIL, "[BIP_ADP] bt_bip_parse_img_list_endElement failed")
    TRC_MSG(BT_BIP_FUNC_PARSE_XML_IMG_LIST_DATA_FAIL, "[BIP_ADP] bt_bip_parse_img_list_dataElement failed")
    TRC_MSG(BT_BIP_FUNC_PARSE_XML_IMG_CAP_START_FAIL, "[BIP_ADP] bt_bip_parse_img_list_startElement failed")
    TRC_MSG(BT_BIP_FUNC_PARSE_XML_IMG_CAP_END_FAIL, "[BIP_ADP] bt_bip_parse_img_list_endElement failed")
    TRC_MSG(BT_BIP_FUNC_PARSE_XML_IMG_CAP_DATA_FAIL, "[BIP_ADP] bt_bip_parse_img_list_dataElement failed")
    TRC_MSG(BT_BIP_FUNC_PARSE_XML_IMG_PROP_START_FAIL, "[BIP_ADP] bt_bip_parse_img_list_startElement failed")
    TRC_MSG(BT_BIP_FUNC_PARSE_XML_IMG_PROP_END_FAIL, "[BIP_ADP] bt_bip_parse_img_list_endElement failed")
    TRC_MSG(BT_BIP_FUNC_PARSE_XML_IMG_PROP_DATA_FAIL, "[BIP_ADP] bt_bip_parse_img_list_dataElement failed")
    TRC_MSG(BT_BIP_FUNC_CLOSE_FILE_CONTINUALLY, "[BIP_ADP] bip_adp_close_file_continually, fs handle=0x%x")
    TRC_MSG(BT_BIP_FUNC_START_CLOSE_FILE_CONTINUALLY, "[BIP_ADP] bip_adp_start_close_file_continually, fs handle=0x%x")
    TRC_MSG(BT_BIP_FUNC_CHECK_FS_ERROR, "[BIP ADP]bip_adp_check_fs_error_code: fs_error=0x%x, fs_oper=%d")
    TRC_MSG(BT_BIP_FUNC_CONNECT_REQ_HDLR, "[BIP ADP]bip_adp_connect_req_hdlr, iState=%d, bip_service=%d")
    TRC_MSG(BT_BIP_FS_OPEN_FAILED, "[BIP ADP]FS_Open failed, err_code=0x%x")
    TRC_MSG(BT_BIP_GEN_XML_FS_OPEN_FAILED, "[BIP ADP]generate_xml_file FS_Open BIP_ADP_SND_FILE Failed!ret=0x%x")
    TRC_MSG(BT_BIP_REGINITIATOR_FAILED, "[BIP ADP]Initiator Error: Could not initiaze Initiator. status = %d")
    TRC_MSG(BT_BIP_FS_OPEN_SNDFILE_FAILED,"[BIP ADP]PUT_IMG_REQ: FS_Open BIP_ADP_SND_FILE Failed! ret=0x%x")
    TRC_MSG(BT_BIP_FS_READ_SNDFILE_FAILED,"[BIP ADP]PUT_IMG_REQ: FS_Read BIP_ADP_SND_FILE Failed! ret=0x%x")
    TRC_MSG(BT_BIP_FS_OPEN_PUTIMG_FAILED,"[BIP ADP]PUT_IMG_REQ: FS_Open msg_p->img_path Failed!ret=0x%x")
    TRC_MSG(BT_BIP_FS_OPEN_PUTTHM_FAILED,"[BIP ADP]PUT_THM_REQ: FS_Open msg_p->img_path Failed!ocx=0x%x")
    TRC_MSG(BT_BIP_GETIMGREQ_FS_OPEN_FAILED,"[BIP ADP]GET_IMG_REQ: FS_Open BIP_ADP_SND_FILE Failed!ret=0x%x")
    TRC_MSG(BT_BIP_GETIMGREQ_FS_READ_FAILED,"[BIP ADP]GET_IMG_REQ: FS_Read BIP_ADP_SND_FILE Failed!ret=0x%x")
    TRC_MSG(BT_BIP_SENDBIPREQ_FAILD, "[BIP ADP]SendBIPRequest status = %d")
    TRC_MSG(BT_BIP_MMI_CONNECT_RSP_FAILED,"[BIP ADP]==== connect_rsp_hdlr: mmi cnf_code is CNF_FAILED! rsp_code=0x%x")
    TRC_MSG(BT_BIP_GEN_XML_FS_WRITE_FALED,"[BIP ADP]generate_xml_file FS_Write Failed! ret=0x%x")
    TRC_MSG(BT_BIP_XMLPARSE_IMGLIST_FS_OPEN_FAILED,"[BIP ADP] FS_Open BIP_ADP_IMG_LIST_FILE FAILED!!! ret=0x%x")
    TRC_MSG(BT_BIP_PARSE_XML_IMGLIST_FS_WRITE_FAILED,"[BIP ADP]bt_bip_parse_img_list_endElement: FS_Write failed,return 0x%x")
    TRC_MSG(BT_BIP_ADP_CREATE_DIR_RET, "[BIP ADP]FS_CreateDir return: (0x%x)")
    TRC_MSG(BT_BIP_ADP_DRM_OPEN_RET, "[BIP ADP]DRM_open_file return: (%d)")
    TRC_MSG(BT_BIP_ADP_DRM_GET_OBJ_METHOD_RET, "[BIP ADP]DRM_get_object_method return: (%d)")
    TRC_MSG(BT_BIP_ADP_DRM_GET_RIGHTS_ISSUER_RET, "[BIP ADP]DRM_get_rights_issuer return: (%d), size=%d")
    TRC_MSG(BT_BIP_ADP_CHECK_DRM_RET, "[BIP ADP]bt_bip_adp_check_DRM_rights return: (%d)")
    TRC_MSG(BT_BIP_ADP_FS_DELETE_RET, "[BIP ADP]FS_Delete return: (%d)")
    TRC_MSG(BT_BIP_ADP_FS_WRITE_RET, "[BIP ADP]FS_Write return: (%d), idx=%d")
    TRC_MSG(BT_BIP_ADP_GEN_XML_FAILED,"[BIP ADP]bip_adp_generate_xml_file Failed!ret=0x%x")
    TRC_MSG(BT_BIP_ADP_I_DISCONNECT_REQ_IN_WRONG_STATE,"[BIP ADP]Initiator Error: Initiator recv disconnect req in wrong state(%d).")
    TRC_MSG(BT_BIP_ADP_R_DISCONNECT_REQ_IN_WRONG_STATE,"[BIP ADP]Responder Error: Responder recv disconnect req in wrong state(%d).")
    TRC_MSG(BT_BIP_ADP_ERROR_SESSION_ROLE, "[BIP ADP] Error session role!")
    TRC_MSG(BT_BIP_ADP_I_INVALID_CONTINUE_RSP,"[BIP ADP]Initiator Error: continue response in NOT-INITIATOR_REQUESTING state(%d)")
    TRC_MSG(BT_BIP_ADP_R_INVALID_CONTINUE_RSP,"[BIP ADP]Responder Error: continue response in NOT-INDICATING state(%d)")
    TRC_MSG(BT_BIP_FUNC_I_CNTX_DEINIT, "[BIP ADP]bip_adp_initiator_cntx_deinit...")	
    TRC_MSG(BT_BIP_FUNC_CNTX_DEINIT, "[BIP ADP]bip_adp_cntx_deinit...")
    TRC_MSG(BT_BIP_ADP_ABORT_REASON,"[BIP ADP] --- Abort reason = (0x%x) ---")
    TRC_MSG(BT_BIP_ADP_RESUME_PARSE_NULL,"[BIP ADP] bip_adp_resume_xml_parse: parser=NULL,iState=%d")
    TRC_MSG(BT_BIP_ADP_PARSE_PAUSED,"[BIP ADP] bip_adp_resume_xml_parse: paused. To continue")
    TRC_MSG(BT_BIP_ADP_PARSE_IMGLIST_END,"[BIP ADP]bip_adp_parse_imagelist_xml_file_end...iState=%d, result=%d")
    TRC_MSG(BT_BIP_ADP_XMLPARSE_RETURN,"[BIP ADP] ---- xml_parse return (%d)")		
    TRC_MSG(BT_BIP_ADP_PARSE_END_FSCLOSED_FAILED,"[BIP ADP]--ERROR-- bt_adp_parsing_imglist_end FS_Close return (%d)")
    TRC_MSG(BT_BIP_OBS_READ_ERROR,"[BIP OBS]Error reading image, dataLen=%d, len=%d")
    TRC_MSG(BT_BIP_OBS_WRITE_ERROR,"[BIP OBS]Error writing image, dataLen=%d, len=%d")
    TRC_MSG(BT_BIP_DEINIT_CLIENT_FAILED,"[BIP]Client: Deinit failed: status=%d")
    TRC_MSG(BT_BIP_DEINIT_SERVER_FAILED,"[BIP]Server: Deinit failed: status=%d")
    TRC_MSG(BT_BIP_ABORT,"[BIP]BIP_Abort: Abort requested,reason=%d.")
    TRC_MSG(BT_BIP_REGISTERCLIENT_FAILED,"[BIP] Client GOEP_RegisterClient failed! status=%d")
    TRC_MSG(BT_BIP_REGISTERSERVER_FAILED,"[BIP] Server GOEP_RegisterServer failed! status=%d")
    TRC_MSG(BT_BIP_RESPONDER_NOT_FOUND,"[BIP] Responder not found.")
    TRC_MSG(BT_BIP_SERVER_OPER_ABORTED,"[BIP] Server: %d operation aborted.")
    TRC_MSG(BT_BIP_SERVER_PARTIAL_CONTENT_PUTIMG,"[BIP ADP] Server: OBRC_PARTIAL_CONTENT for PutImage")	
    TRC_MSG(BT_BIP_SERVER_PARTIAL_CONTENT_GETIMGLIST,"[BIP ADP]=== Server: OBRC_PARTIAL_CONTENT for GetImageList")
    TRC_MSG(BT_BIP_INITIATOR_NOT_FOUND,"[BIP]: Initiator not found.")
    TRC_MSG(BT_BIP_I_PARTIALCONTENT_GETIMGLIST,"BIP: Client: OBRC_PARTIAL_CONTENT for GetImageList!")
    TRC_MSG(BT_BIP_I_PARTIALCONTENT_PUTIMG,"BIP: Client: OBRC_PARTIAL_CONTENT for PutImage!")

    /* external ADP start */
    TRC_MSG(BIPI_EXT_ADP_STATE_ERR,"BIP_I_EXT_ADP : statuts err, current status = %d, current opcode = %d")
    TRC_MSG(BIPR_EXT_ADP_STATE_ERR,"BIP_R_EXT_ADP : statuts err, current status = %d, current opcode = %d")
    TRC_MSG(BIPI_EXT_ADP_RECEIVE_MSG, "BIP_I_EXT_ADP : received msg = %d")
    TRC_MSG(BIPR_EXT_ADP_RECEIVE_MSG, "BIP_R_EXT_ADP : received msg = %d")
    TRC_MSG(BIPI_EXT_ADP_APP_CMD, "BIP_I_EXT_ADP: app invoke opcode = %d")
    TRC_MSG(BIPR_EXT_ADP_APP_CMD, "BIP_R_EXT_ADP: app invoke opcode = %d")
    TRC_MSG(BIPI_EXT_ADP_NOTIFY_APP, "BIP_I_EXT_ADP : notify app, opcode = %d, result = %d")
    TRC_MSG(BIPR_EXT_ADP_NOTIFY_APP, "BIP_R_EXT_ADP : notify app, opcode = %d, status = %d")
    TRC_MSG(BIPR_EXT_ADP_DO_NOT_FIND_HANDLE_BY_CN_ID, "BIP_R_EXT_ADP : do not find hanle by cn id = %d")
    TRC_MSG(BIPR_EXT_ADP_DO_NOT_FIND_HANDLE_BY_REQ_ID, "BIP_R_EXT_ADP : do not find hanle by req id = %d")
    TRC_MSG(BIPR_EXT_ADP_DO_NOT_FIND_HANDLE_BY_STATUS, "BIP_R_EXT_ADP : do not find hanle by status = %d")
    TRC_MSG(BIPI_EXT_ADP_DO_NOT_FIND_HANDLE_BY_CN_ID, "BIP_I_EXT_ADP : do not find handle by cn id = %d")
    TRC_MSG(BIPI_EXT_ADP_DO_NOT_FIND_HANDLE_BY_REQ_ID, "BIP_I_EXT_ADP : do not find handle by req id = %d")
    TRC_MSG(BIPI_EXT_ADP_DO_NOT_FIND_HANDLE_BY_STATUS, "BIP_I_EXT_ADP : do not find handle by status = %d")
    TRC_MSG(BIP_EXT_ADP_DO_NOT_SUPPORT_NOW,"BIP_EXT_ADP : do not support now line = %d")
    /* external ADP end */

/* BIP TRACE END */

/* PAN TRACE START */
    TRC_MSG(PAN_INITIALIZED, "[PAN] Initialized")
    TRC_MSG(PAN_REGISTER_BUSY, "[PAN] Registeration is busy")
    TRC_MSG(PAN_OPENCONNECTION, "[PAN] Open connection")
    TRC_MSG(PAN_CREATEDATALINK_STATUS, "[PAN] Open connection create data link status: %02x")
    TRC_MSG(PAN_OPENCONNECTION_STATUS, "[PAN] Open connection status: %02x")
    TRC_MSG(PAN_CMGRCALLBACK_EVENT_STATUS, "[PAN] CMGR callback event: %02x, status: %02x")
    TRC_MSG(PAN_NOT_FOR_THE_BD_ADDR, "[PAN] CMGR callback not for the bd_addr")
    TRC_MSG(PAN_CMGRCALLBACK_BDADDR0, "[PAN] CMGR callback bd_addr=0")
    TRC_MSG(PAN_BNEPCALLBACK, "[PAN] bnep callback pan: %02x, bneppanu: %02x")
    TRC_MSG(PAN_BNEPCALLBACK_EVENT, "[PAN] bnep callback event: %02x")
    TRC_MSG(PAN_HANDLEPACKETIND_GRATUITOUS_ARPREQUEST, "[PAN] bnep callback handle packet ind, ARP gratuitous request!")
    TRC_MSG(PAN_BNEPCONTROL_PKTTYPE, "[PAN] Received BNEP Control Packet type %02x")
    TRC_MSG(PAN_SENDPKT_BROADCAST, "[PAN] Send packet broadcasting packet")
    TRC_MSG(PAN_FORWARDPKT_NODST, "[PAN] Forward packet no local devices targeted!")
    TRC_MSG(PAN_FORWARDPKT_BROADCAST, "[PAN] Forward packet broadcasting packet")
    TRC_MSG(PAN_FORWARDPKT_TOPEER, "[PAN] Forward packet sending packet to peer device")
    TRC_MSG(PAN_SDP_QUERY_CALLBACK_RESULT, "[PAN] SDP query callback result: %02x")
    TRC_MSG(PAN_SDP_QUERY_CALLBACK_CONNECT_FAILED, "[PAN] SDP query callback, could not connect to control channel")
    TRC_MSG(PAN_SDP_QUERY_CALLBACK_DONE, "[PAN] SDP query callback complete, establish bnep connection")
    TRC_MSG(PAN_CLEAR_CONNECTION_STATUS, "[PAN] pan clear connection status: %02x")

    TRC_MSG(PAN_EXT_ADP_ACTIVATE_DONE, "[PAN EXT ADP] activate done")
    TRC_MSG(PAN_EXT_ADP_DEACTIVATE_DONE, "[PAN EXT ADP] deactivate done")
    TRC_MSG(PAN_EXT_ADP_HANDLE_CMD, "[PAN EXT ADP] handle command opcode: %02x")
    TRC_MSG(PAN_EXT_ADP_HANDLE_CONNECT_CMD, "[PAN EXT ADP] Connect req in error state: %02x")
    TRC_MSG(PAN_EXT_ADP_HANDLE_DISCONNECT_CMD, "[PAN EXT ADP] Disconnect req in error state: %02x")
    TRC_MSG(PAN_EXT_ADP_HANDLE_CONNECT_IND_INVALID_DEVICE, "[PAN EXT ADP] Connect ind with error address!")
    TRC_MSG(PAN_EXT_ADP_HANDLE_CONNECT_IND_PREV_STATE, "[PAN EXT ADP] handle connect ind  prevstate: %d")
    TRC_MSG(PAN_EXT_ADP_HANDLE_CONNECT_CNF_INVALID_DEVICE, "[PAN EXT ADP] Connect cnf with error address!")
    TRC_MSG(PAN_EXT_ADP_HANDLE_CONNECT_CNF_PREV_STATE, "[PAN EXT ADP] handle connect cnf  prevstate: %d")
    TRC_MSG(PAN_EXT_ADP_HANDLE_DISCONNECT_IND_PREV_STATE, "[PAN EXT ADP] handle disconnect ind  prevstate: %d")
    TRC_MSG(PAN_EXT_ADP_HANDLE_DISCONNECT_CNF_PREV_STATE, "[PAN EXT ADP] handle disconnect cnf  prevstate: %d")
/* PAN TRACE END */

/* MAP TRACE START */
    /* Internal ADP start */
    TRC_MSG(BTLOG_MAPS_ADP_MNS_CONNECT_DUPLICATE, "[MAPS] maps_adp_mns_connect: duplicate request (state=%d)")
    TRC_MSG(BTLOG_MAPS_ADP_ACTIVATE_NOT_INITIALIZED, "[MAPS] maps_adp_activate: failed due to not initialized")
    TRC_MSG(BTLOG_MAPS_ADP_DEACTIVATE_DISCONNECTING, "[MAPS] maps_adp_deactivate: disconnect 0x%x,0x%x,0x%x")
    TRC_MSG(BTLOG_MAPS_ADP_ADD_CONNECTION, "[MAPS] maps_adp_add_connection: instance=%d, conn=%d, addr=0x%x,0x%x,0x%x")
    TRC_MSG(BTLOG_MAPS_ADP_ADD_CONNECTION_DUPLICATE, "[MAPS] maps_adp_add_connection: connection existed")
    TRC_MSG(BTLOG_MAPS_ADP_APP_CALLBACK_DATA_REQ, "[MAPS] maps_app_callback: MAP_EVENT_DATA_REQ: read %d bytes")
    TRC_MSG(BTLOG_MAPS_ADP_APP_CALLBACK_DATA_REQ_DONE, "[MAPS] maps_app_callback: MAP_EVENT_DATA_REQ: read done")
    TRC_MSG(BTLOG_MAPS_ADP_APP_CALLBACK_DATA_REQ_FAIL, "[MAPS] maps_app_callback: MAP_EVENT_DATA_REQ failed")
    TRC_MSG(BTLOG_MAPS_ADP_APP_CALLBACK_DATA_IND, "[MAPS] maps_app_callback: MAP_EVENT_DATA_IND: write %d bytes")
    TRC_MSG(BTLOG_MAPS_ADP_APP_CALLBACK_DATA_IND_DONE, "[MAPS] maps_app_callback: MAP_EVENT_DATA_IND: write done")
    TRC_MSG(BTLOG_MAPS_ADP_APP_CALLBACK_DATA_IND_FAIL, "[MAPS] maps_app_callback: MAP_EVENT_DATA_IND failed")
    TRC_MSG(BTLOG_MAPS_ADP_APP_CALLBACK_TP_DISCONNECTED, "[MAPS] maps_app_callback: MAP_EVENT_TP_DISCONNECTED state=%d")
    TRC_MSG(BTLOG_MAPS_ADP_APP_CALLBACK_TP_DISCONNECTED_NO_CONN, "[MAPS] maps_app_callback: MAP_EVENT_TP_DISCONNECTED device authorizing")
    TRC_MSG(BTLOG_MAPS_ADP_APP_CALLBACK_MNS_CONNECTED, "[MAPS] maps_app_callback: MAP_EVENT_MNS_CONNECTED state=%d")
    TRC_MSG(BTLOG_MAPS_ADP_APP_CALLBACK_MNS_DISCONNECTED, "[MAPS] maps_app_callback: MAP_EVENT_MNS_DISCONNECTED state=%d")
    TRC_MSG(BTLOG_MAPS_ADP_DISCONNECT, "[MAPS] maps_adp_disconnect: status=%d")

    TRC_MSG(BTLOG_MAPS_DEREGISTER_SERVER_CHECK_FAILED, "[MAPS] maps_deregister_server: check failed initialized=%d")
    TRC_MSG(BTLOG_MAPS_DEREGISTER_SERVER, "[MAPS] maps_deregister_server: instance=%d")
    TRC_MSG(BTLOG_MAPS_GOEP_SERVER_CALLBACK, "[MAPS] MapGoepServerCallback(): event=%d, oper=%d, goep_conn_id=%d")
    TRC_MSG(BTLOG_MAPS_GOEP_SERVER_CALLBACK_HEADER_RX, "[MAPS] MapGoepServerCallback(): GOEP_EVENT_HEADER_RX 0x%x")
    TRC_MSG(BTLOG_MAPS_GOEP_MNS_CLIENT_CALLBACK, "[MAPS] MapMnsGoepClientCallback(): event=%d, oper=%d, goep_conn_id=%d (client: %d)")
    TRC_MSG(BTLOG_MAPS_OBS_NEW, "[MAPS] maps_obs_new(%d)")
    TRC_MSG(BTLOG_MAPS_OBS_CLOSE, "[MAPS] maps_obs_close(%d)")
    TRC_MSG(BTLOG_MAPS_OBS_READ, "[MAPS] maps_obs_read len=%d, offset=%d")
    TRC_MSG(BTLOG_MAPS_OBS_WRITE, "[MAPS] maps_obs_write len=%d, offset=%d")
    TRC_MSG(BTLOG_MAPS_OBS_GET_OBJECT_LEN, "[MAPS] maps_obs_get_object_len len=%d")
    TRC_MSG(BTLOG_MAPS_MNS_OBS_READ, "[MAPS] maps_mns_obs_read len=%d, offset=%d")

    TRC_MSG(BTLOG_MAPC_GOEP_CLINET_CALLBACK, "[MAPC] MapGoepClientCallback(): event=%d, oper=%d, goep_conn_id=%d( client=%d)")
    TRC_MSG(BTLOG_MAPC_GOEP_CLIENT_CALLBACK_HEADER_RX, "[MAPC] MapGoepClientCallback(): GOEP_EVENT_HEADER_RX 0x%x")
    TRC_MSG(BTLOG_MAPC_GOEP_MNS_SERVER_CALLBACK, "[MAPC] MapMnsGoepServerCallback(): event=%d, oper=%d, goep_conn_id=%d")
    TRC_MSG(BTLOG_MAPC_OBS_NEW, "[MAPC] mapc_obs_new(%d)")
    TRC_MSG(BTLOG_MAPC_OBS_CLOSE, "[MAPC] mapc_obs_close(%d)")
    TRC_MSG(BTLOG_MAPC_OBS_READ, "[MAPC] mapc_obs_read len=%d, offset=%d")
    TRC_MSG(BTLOG_MAPC_OBS_WRITE, "[MAPC] mapc_obs_write len=%d, offset=%d")
    TRC_MSG(BTLOG_MAPC_OBS_GET_OBJECT_LEN, "[MAPC] mapc_obs_get_object_len len=%d")
    TRC_MSG(BTLOG_MAPC_MNS_OBS_WRITE, "[MAPC] mapc_mns_obs_write len=%d, offset=%d")
/* MAP TRACE END */

/* MBT TRACE START */
TRC_MSG(BT_MBT_TRACE_START,"BT_MBT_TRACE_START")  /* MBT LOG FILTER. DO NOT MODIFY */
    
    /* MBT A2DP TRACE */
    TRC_MSG(BTLOG_MBT_A2DP_SOURCE_ENABLED, "[MBT] mbt_a2dp_source_enable")
    TRC_MSG(BTLOG_MBT_A2DP_SOURCE_DISABLED, "[MBT] mbt_a2dp_source_disable")
    TRC_MSG(BTLOG_MBT_A2DP_SOURCE_CONNECT, "[MBT] mbt_a2dp_source_connect: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x")
    TRC_MSG(BTLOG_MBT_A2DP_SOURCE_DISCONNECT, "[MBT] mbt_a2dp_source_disconnect: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x")
    TRC_MSG(BTLOG_MBT_A2DP_SOURCE_START, "[MBT] mbt_a2dp_source_start")
    TRC_MSG(BTLOG_MBT_A2DP_SOURCE_STOP, "[MBT] mbt_a2dp_source_stop")
    TRC_MSG(BTLOG_MBT_A2DP_SOURCE_PAUSE, "[MBT] mbt_a2dp_source_pause")
    TRC_MSG(BTLOG_MBT_A2DP_SOURCE_RESUME, "[MBT] mbt_a2dp_source_resume")
    /* MBT AVRCP TRACE */
    TRC_MSG(BTLOG_MBT_AVRCP_ENABLED, "[MBT] mbt_avrcp_enable")
    TRC_MSG(BTLOG_MBT_AVRCP_DISABLED, "[MBT] mbt_avrcp_disable")
    TRC_MSG(BTLOG_MBT_AVRCP_CONNECT, "[MBT] mbt_avrcp_connect: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x")
    TRC_MSG(BTLOG_MBT_AVRCP_DISCONNECT, "[MBT] mbt_avrcp_disconnect")
    TRC_MSG(BTLOG_MBT_WISE_CMD_REQ, "[MBT] btmtk_avrcp_wise_send_cmd_reqbdaddr=%02x:%02x:%02x:%02x:%02x:%02x, value:%02x")
    /* MBT DUN TRACE */
    TRC_MSG(BT_DUN_MBT_ENABLE,"[BT_DUN_MBT] btmtk_dun_mbt_enable()")    
    TRC_MSG(BT_DUN_MBT_DISABLE,"[BT_DUN_MBT] btmtk_dun_mbt_disable()")    
    TRC_MSG(BT_DUN_MBT_DISCONNECT,"[BT_DUN_MBT] btmtk_dun_mbt_disconnect()")    
    TRC_MSG(BT_DUN_MBT_LISTEN,"[BT_DUN_MBT] btmtk_dun_mbt_listen()")    
    TRC_MSG(BT_DUN_MBT_LISTENSTOP,"[BT_DUN_MBT] btmtk_dun_mbt_listenstop()")    
    TRC_MSG(BT_DUN_MBT_ISCONNECTED,"[BT_DUN_MBT] btmtk_dun_is_connected()")    
    TRC_MSG(BT_DUN_MBT_ISDEVCONNECTED,"[BT_DUN_MBT] btmtk_dun_is_dev_connected()")        
    TRC_MSG(BT_DUN_MBT_AUTHORIZE_RES,"[BT_DUN_MBT] btmtk_dun_authorize_res(), result=%d")    
    TRC_MSG(BT_DUN_MBT_CB_ENABLE_CNF,"[BT_DUN_MBT] btmtk_dun_mbt_cb_enable_cnf()")
    TRC_MSG(BT_DUN_MBT_CB_DISABLE_CNF,"[BT_DUN_MBT] btmtk_dun_mbt_cb_disable_cnf()")
    TRC_MSG(BT_DUN_MBT_CB_LISTEN_CNF,"[BT_DUN_MBT] btmtk_dun_mbt_cb_listen_cnf()")
    TRC_MSG(BT_DUN_MBT_CB_LISTEN_STOP_CNF,"[BT_DUN_MBT] btmtk_dun_mbt_cb_listen_stop_cnf()")
    TRC_MSG(BT_DUN_MBT_CB_CONNECT_IND_REQ,"[BT_DUN_MBT] btmtk_dun_mbt_cb_connect_ind_req()")
    TRC_MSG(BT_DUN_MBT_CB_CONNECT_IND,"[BT_DUN_MBT] btmtk_dun_mbt_cb_connect_ind()")
    TRC_MSG(BT_DUN_MBT_CB_DISCONNECT_IND,"[BT_DUN_MBT] btmtk_dun_mbt_cb_disconnect_ind()")
    TRC_MSG(BT_DUN_MBT_CB_DISCONNECT_CNF,"[BT_DUN_MBT] btmtk_dun_mbt_cb_disconnect_cnf()")
    /* MBT FTP TRACE */
    TRC_MSG(BT_FTP_WISE_API_POST_EVENT, "[MBT][CB] post event:(%d) idx:(%d) oper:(%d)")
    TRC_MSG(BT_FTP_WISE_API_SDC_STATUS, "[MBT][CB] sdcFtpStatus oper:%d stat:%d reason:%d")
    TRC_MSG(BT_FTP_WISE_API_SERVER_ENABLE, "[MBT][API] btmtk_ftp_server_enable")
    TRC_MSG(BT_FTP_WISE_API_SERVER_DISABLE, "[MBT][API] btmtk_ftp_server_disable")
    TRC_MSG(BT_FTP_WISE_API_SERVER_ACCESS_RESPONSE, "[MBT][API] btmtk_ftp_server_access_response reply:%d oper:%d rspcode:%d")
    TRC_MSG(BT_FTP_WISE_API_SERVER_ACCESS_RESPONSE_FOLDER, "[MBT] folder:(%s) obj:(%s)")
    TRC_MSG(BT_FTP_WISE_API_SERVER_AUTH_RESPONSE, "[MBT][API] btmtk_ftp_authorize_res %d")
    TRC_MSG(BT_FTP_WISE_API_SERVER_SETROOTFOLDER, "[MBT][API] btmtk_ftp_server_setrootfolder path:(%s)")
    TRC_MSG(BT_FTP_WISE_API_SERVER_DISCONNECT, "[MBT][API] btmtk_ftp_server_disconnect")
    TRC_MSG(BT_FTP_WISE_API_SERVER_AUTHORIZE_RES, "[MBT] btmtk_ftp_authorize_res authMode:(%d)")
    TRC_MSG(BT_FTP_WISE_API_SERVER_EXTOBJECT, "[MBT] ExtObject isAdd:%d isFolder:%d Name:'%s' ")
    TRC_MSG(BT_FTP_WISE_API_IS_CONNECTED, "[MBT] btmkt_ftp_is_connected l_ret:(%d) state:(%d)")
    TRC_MSG(BT_FTP_WISE_API_IS_DEV_CONNECTED, "[MBT] btmkt_ftp_is_dev_connected l_ret:(%d) state:(%d)")
    TRC_MSG(BT_FTP_WISE_API_SERVER_CB, "[MBT][CB] bt_ftps_ui_cb UI Event:%d   data=%d")
    TRC_MSG(BT_FTP_WISE_API_SERVER_CB_FOLDER, "[MBT][CB] folder:(%s)  obj_name:(%s)")
    TRC_MSG(BT_FTP_WISE_API_CLIENT_ENABLE, "[MBT][API] btmtk_ftp_client_enable")
    TRC_MSG(BT_FTP_WISE_API_CLIENT_DISABLE, "[MBT][API] btmtk_ftp_client_disable")
    TRC_MSG(BT_FTP_WISE_API_CLIENT_OPEN, "[MBT][API] btmtk_ftp_client_open addr:%x:%x:%x:%x:%x:%x c.state:%d")
    TRC_MSG(BT_FTP_WISE_API_CLIENT_CLOSE, "[MBT][API] btmtk_ftp_client_close")
    TRC_MSG(BT_FTP_WISE_API_CLIENT_AUTH_RESPONSE, "[MBT][API] btmtk_ftp_client_auth_response %d")
    TRC_MSG(BT_FTP_WISE_API_CLIENT_PUTFILE, "[MBT][API] btmtk_ftp_client_putfile dir:(%s) file:(%s)")
    TRC_MSG(BT_FTP_WISE_API_CLIENT_GETFILE, "[MBT][API] btmtk_ftp_client_getfile dir:(%s) file:(%s)")
    TRC_MSG(BT_FTP_WISE_API_CLIENT_CHDIR, "[MBT][API] btmtk_ftp_client_chdir dir:(%s)")
    TRC_MSG(BT_FTP_WISE_API_CLIENT_MKDIR, "[MBT][API] btmtk_ftp_client_mkdir dir:(%s)")
    TRC_MSG(BT_FTP_WISE_API_CLIENT_LISTDIR, "[MBT][API] btmtk_ftp_client_listdir dir:(%s) file:(%s)")
    TRC_MSG(BT_FTP_WISE_API_CLIENT_DELDIR, "[MBT][API] btmtk_ftp_client_deldir dir:(%s)")
    TRC_MSG(BT_FTP_WISE_API_CLIENT_DELFILE, "[MBT][API] btmtk_ftp_client_delfile file:(%s)")
    TRC_MSG(BT_FTP_WISE_API_CLIENT_ABORT, "[MBT][API] btmtk_ftp_client_abort")
    TRC_MSG(BT_FTP_WISE_API_CLIENT_CB, "[MBT][CB] bt_ftpc_ui_cb UI Event:%d   data=%d")
    TRC_MSG(BT_FTP_WISE_API_CLIENT_CB_NOHANDLE, "[MBT][CB] Error no handle !")
    TRC_MSG(BT_FTP_WISE_ERR_CLIENT_OPEN, "[MBT][WRN] btmtk_ftp_client_open fail!" )
    TRC_MSG(BT_FTP_WISE_ERR_CLIENT_CLOSE, "[MBT][WRN] btmtk_ftp_client_close fail!" )
    TRC_MSG(BT_FTP_WISE_ERR_CLIENT_MKDIR, "[MBT][WRN] btmtk_ftp_client_mkdir fail!" )
    TRC_MSG(BT_FTP_WISE_ERR_CLIENT_PUT_FILE, "[MBT][WRN] btmtk_ftp_client_putfile fail!" )
    TRC_MSG(BT_FTP_WISE_ERR_CLIENT_GET_FILE, "[MBT][WRN] btmtk_ftp_client_getfile fail!" )
    TRC_MSG(BT_FTP_WISE_ERR_CLIENT_ABORT,"[MBT][WRN] btmtk_ftp_client_abort fail!" )
    TRC_MSG(BT_FTP_WISE_ERR_CLIENT_DELDIR, "[MBT][WRN] btmtk_ftp_client_deldir fail!" )
    TRC_MSG(BT_FTP_WISE_ERR_CLIENT_DELFILE, "[MBT][WRN] btmtk_ftp_client_delfile fail!" )
    TRC_MSG(BT_FTP_WISE_ERR_CLIENT_LISTDIR,"[MBT][WRN] btmtk_ftp_client_listdir fail!")
    TRC_MSG(BT_FTP_WISE_ERR_CLIENT_CHDIR, "[MBT][WRN] btmtk_ftp_client_chdir fail! isroot:(%d)")
    /* MBT GAP TRACE */
    TRC_MSG(BTLOG_MBT_GAP_POWER_ON_REQ, "[MBT][GAP] btmtk_gap_power_on_req")
    TRC_MSG(BTLOG_MBT_GAP_STATE_OFF, "[MBT][GAP]BT off. Operation failed")
    TRC_MSG(BTLOG_MBT_GAP_POWER_OFF_REQ, "[MBT][GAP] btmtk_gap_power_off_req")
    TRC_MSG(BTLOG_MBT_GAP_DISCOVERY_REQ, "[MBT][GAP] btmtk_gap_discovery_request: MBTSvcID=0x%x, nMaxCount=%d")
    TRC_MSG(BTLOG_MBT_GAP_DISCOVERY_FILTER_REQ, "[MBT][GAP] btmtk_gap_discovery_filter_request: nMaxCount=%d, bdaddr=%02x:%02x:%02x:%02x:%02x:%02x")
    TRC_MSG(BTLOG_MBT_GAP_DISCOVERY_FILTER_REQ_PARAM, "[MBT][GAP] MBTSvc=0x%x, CoD (0x%x, 0x%x, 0x%x), Range=%d, with name=%d,  duration=%d")
    TRC_MSG(BTLOG_MBT_GAP_IS_CONNECTED, "[MBT][GAP] btmtk_gap_is_connected")
    TRC_MSG(BTLOG_MBT_GAP_IS_PROFILE_CONNECTED, "[MBT][GAP] btmtk_gap_is_profile_connected: 0x%x")
    TRC_MSG(BTLOG_MBT_GAP_GET_LINK_STATE_REQ, "[MBT][GAP] btmtk_gap_get_link_state_request: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x")
    TRC_MSG(BTLOG_MBT_GAP_DISCOVERY_CANCEL_REQ, "[MBT][GAP] btmtk_gap_discovery_cancel_request")
    TRC_MSG(BTLOG_MBT_GAP_WRITE_LOCAL_NAME_REQ, "[MBT][GAP] btmtk_gap_write_local_name_request: name=%s")
    TRC_MSG(BTLOG_MBT_GAP_WRITE_REMOTE_NAME_REQ, "[MBT][GAP] btmtk_gap_write_remote_name_request: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x, nickname=%s")
    TRC_MSG(BTLOG_MBT_GAP_IS_AUTHORIZED, "[MBT][GAP] btmtk_gap_is_authorized: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x")
    TRC_MSG(BTLOG_MBT_GAP_SET_AUTHORIZED, "[MBT][GAP] btmtk_gap_set_authorize: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x, bAuthorize=%d")
    TRC_MSG(BTLOG_MBT_GAP_AUTHORIZE_RESPONSE, "[MBT][GAP] btmtk_gap_authorize_response: AuthMode=%d, AuthSvc=0x%x")
    TRC_MSG(BTLOG_MBT_GAP_READ_REMOTE_NAME_REQ, "[MBT][GAP] btmtk_gap_read_remote_name_request: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x")
    TRC_MSG(BTLOG_MBT_GAP_READ_REMOTE_NAME_CANCEL_REQ, "[MBT][GAP] btmtk_gap_read_remote_name_cancel_request")
    TRC_MSG(BTLOG_MBT_GAP_SET_VISIBLE_REQ, "[MBT][GAP] btmtk_gap_set_visible_request: bVisible=%d")
    TRC_MSG(BTLOG_MBT_GAP_SET_CONNECTABLE_REQ, "[MBT][GAP] btmtk_gap_set_connectable_request: bConnectable=%d")
    TRC_MSG(BTLOG_MBT_GAP_BONDING_REQ, "[MBT][GAP] btmtk_gap_bonding_request: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x, len=%d, pin=%x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x")
    TRC_MSG(BTLOG_MBT_GAP_BONDING_CANCEL_REQ, "[MBT][GAP] btmtk_gap_bonding_cancel_request")
    TRC_MSG(BTLOG_MBT_GAP_PAIRING_REQ, "[MBT][GAP] btmtk_gap_pairing_request: bAccept=%d, len=%d, pin=%x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x")
    TRC_MSG(BTLOG_MBT_GAP_SERVICE_SEARCH_REQ, "[MBT][GAP] btmtk_gap_service_search_request: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x")
    TRC_MSG(BTLOG_MBT_GAP_SERVICE_SEARCH_FILTER_REQ, "[MBT][GAP] btmtk_gap_service_search_filter_request=%02x:%02x:%02x:%02x:%02x:%02x")
    TRC_MSG(BTLOG_MBT_GAP_SERVICE_SEARCH_FILTER_REQ_PARAM, "[MBT][GAP] btmtk_gap_service_search_filter_request=0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x")
    TRC_MSG(BTLOG_MBT_GAP_SERVICE_SEARCH_CANCEL_REQ, "[MBT][GAP] btmtk_gap_service_search_cancel_request")
    TRC_MSG(BTLOG_MBT_GAP_DELETE_TRUST_REQ, "[MBT][GAP] btmtk_gap_delete_trust_request: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x")
    TRC_MSG(BTLOG_MBT_GAP_DELETE_TRUST_ALL_REQ, "[MBT][GAP] btmtk_gap_delete_trust_all_request")
    TRC_MSG(BTLOG_MBT_GAP_SECURITY_USER_CONFIRM_RES, "[MBT][GAP] btmtk_gap_security_user_confirm_response: bAccept=%d")
    TRC_MSG(BTLOG_MBT_GAP_BLOCK_LIST_ADD_REQ, "[MBT][GAP] btmtk_gap_block_list_add_request: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x")
    TRC_MSG(BTLOG_MBT_GAP_BLOCK_LIST_REMOVE_REQ, "[MBT][GAP] btmtk_gap_block_list_remove_request: bdaddr=%02x:%02x:%02x:%02x:%02x:%02x")
    TRC_MSG(BTLOG_MBT_GAP_SET_INIT, "[MBT][GAP] btmtk_gap_set_init: 0x%x")
    TRC_MSG(BTLOG_MBT_GAP_HANDLE_POWER_ON_CNF, "[MBT][GAP] btmtk_gap_handle_power_on_cnf: result=%d")
    TRC_MSG(BTLOG_MBT_GAP_HANDLE_POWER_OFF_CNF, "[MBT][GAP] btmtk_gap_handle_power_off_cnf: result=%d")
    TRC_MSG(BTLOG_MBT_GAP_ERR_MAX_REACHED, "[MBT][GAP] err: Maximum number reached")
    TRC_MSG(BTLOG_MBT_GAP_HANDLE_DISCOVERY_RESULT_IND_ERR_BLOCKED, "[MBT][GAP] err: address has been blocked")
    TRC_MSG(BTLOG_MBT_GAP_HANDLE_DISCOVERY_RESULT_IND_ERR_SEARCHED, "[MBT][GAP] err: address has been searched")
    TRC_MSG(BTLOG_MBT_GAP_ERR_ADDR_MISMATCHED, "[MBT][GAP] err: address mismatched")
    TRC_MSG(BTLOG_MBT_GAP_HANDLE_DISCOVERY_RESULT_IND_ERR_COD_MISMATCHED, "[MBT][GAP] err: CoD mismatched")
    TRC_MSG(BTLOG_MBT_GAP_HANDLE_DISCOVERY_RESULT_IND_SVC, "[MBT][GAP] EIR services: 0x%x, 0x%x, 0x%x, 0x%x, 0x%x")
    TRC_MSG(BTLOG_MBT_GAP_HANDLE_DISCOVERY_RESULT_IND_ERR_SVC_MISMATCHED, "[MBT][GAP] err: service not found")
    TRC_MSG(BTLOG_MBT_GAP_HANDLE_DISCOVERY_RESULT_IND_ERR_RSSI_MISMATCHED, "[MBT][GAP] err: RSSI mismatched")
    TRC_MSG(BTLOG_MBT_GAP_HANDLE_DISCOVERY_RESULT_IND_POST_EVENT, "[MBT][GAP] %d entries in searched list")
    TRC_MSG(BTLOG_MBT_GAP_HANDLE_DISCOVERY_CNF, "[MBT][GAP] btmtk_gap_handle_discovery_cnf: result=%d, found=%d")
    TRC_MSG(BTLOG_MBT_GAP_HANDLE_GET_SCATTERNET_STATE_CNF, "[MBT][GAP] btmtk_gap_handle_get_scatternet_state_cnf: return %d")
    TRC_MSG(BTLOG_MBT_GAP_HANDLE_GET_LINK_STATE_CNF, "[MBT][GAP] btmtk_gap_handle_get_link_state_cnf: profile 0x%x return %d")
    TRC_MSG(BTLOG_MBT_GAP_HANDLE_WRITE_LOCAL_NAME_CNF, "[MBT][GAP] btmtk_gap_handle_write_local_name_cnf: return %d")
    TRC_MSG(BTLOG_MBT_GAP_ERR_CANCELED, "[MBT][GAP] err: operation already cancelled")
    TRC_MSG(BTLOG_MBT_GAP_HANDLE_WRITE_SCANENABLE_CNF, "[MBT][GAP] btmtk_gap_handle_write_scanenable_mode_cnf: return %d")
    TRC_MSG(BTLOG_MBT_GAP_HANDLE_PIN_CODE_IND_IS_BOND, "[MBT][GAP] during bonding=%d")
    TRC_MSG(BTLOG_MBT_GAP_HANDLE_PIN_CODE_IND_ERR_NOT_21, "[MBT][GAP] err: peer do not support v2.1, try v2.0 bonding")
    TRC_MSG(BTLOG_MBT_GAP_HANDLE_BONDING_CNF_ERR_STATE_MISMATCHED, "[MBT][GAP] err: not bonding state")
    TRC_MSG(BTLOG_MBT_GAP_HANDLE_BONDING_CNF_ERR_ADDR_MISMATCHED, "[MBT][GAP] err: not bonding addr=%02x:%02x:%02x:%02x:%02x:%02x")
    TRC_MSG(BTLOG_MBT_GAP_HANDLE_BONDING_CNF_ERR_RECEIVED, "[MBT][GAP] err: error bonding response received")
    TRC_MSG(BTLOG_MBT_GAP_HANDLE_DELETE_TRUST_CNF_UPDATE_BLIST, "[MBT][GAP] btmtk_gap_handle_delete_trust_cnf: update block list")
    TRC_MSG(BTLOG_MBT_GAP_HANDLE_DELETE_TRUST_CNF, "[MBT][GAP] btmtk_gap_handle_delete_trust_cnf: return %d")
    TRC_MSG(BTLOG_MBT_GAP_HANDLE_DELETE_TRUST_ALL_CNF, "[MBT][GAP] btmtk_gap_handle_delete_trust_all_cnf: return %d")
    TRC_MSG(BTLOG_MBT_GAP_HANDLE_LINK_STATE_IND, "[MBT][GAP] btmtk_gap_handle_link_state_ind: link no=%d->%d, addr=0x%x:0x%x:0x%x")
    TRC_MSG(BTLOG_MBT_GAP_HANDLE_BLOCK_LIST_UPDATE_CNF, "[MBT][GAP] btmtk_gap_handle_block_list_update_cnf: add=%d, rem=%d")
    TRC_MSG(BTLOG_MBT_GAP_HANDLE_AUTHORIZE_REQ, "[MBT][GAP] btmtk_gap_handle_authorize_req: MBTSvcID=0x%x, addr=%02x:%02x:%02x:%02x:%02x:%02x")
    TRC_MSG(BTLOG_MBT_GAP_HANDLE_INT_MESSAGE, "[MBT][GAP] btmtk_gap_handle_int_message: op=%d")
    TRC_MSG(BTLOG_MBT_GAP_INT_DUMP_CNTX, "[MBT][GAP] btmtk_gap_int_dump_cntx(): op[%d] = %d")
    TRC_MSG(BTLOG_MBT_GAP_INT_SET_CNTX, "[MBT][GAP] btmtk_gap_int_set_cntx(%d)")
    TRC_MSG(BTLOG_MBT_GAP_INT_RESET_CNTX, "[MBT][GAP] btmtk_gap_int_reset_cntx(%d)")
    TRC_MSG(BTLOG_MBT_GAP_POST_EVENT, "[MBT][GAP] post event %d")
    TRC_MSG(BTLOG_MBT_GAP_LOG_STRING, "[MBT][GAP] str[10] = %c%c%c%c%c%c%c%c%c%c")
    TRC_MSG(BTLOG_MBT_GAP_BUSY, "[MBT][GAP] GAP busy, unable to start request %d")
    /* MBT AG TRACE */
    TRC_MSG(BT_HFG_WISE_API_ENABLE, "[AG][API] btmtk_ag_enable")
    TRC_MSG(BT_HFG_WISE_API_DISABLE, "[AG][API] btmtk_ag_disable")
    TRC_MSG(BT_HFG_WISE_API_CONNECT, "[AG][API] btmtk_ag_connect(addr=0x%02X%02X%02X%02X%02X%02X, svc=0x%04X)")
    TRC_MSG(BT_HFG_WISE_API_DISCONNECT, "[AG][API] btmtk_ag_disconnect(addr=0x%02X%02X%02X%02X%02X%02X, svc=0x%04X)")
    TRC_MSG(BT_HFG_WISE_API_AUDIO_CONNECT, "[AG][API] btmtk_ag_audioconnect")
    TRC_MSG(BT_HFG_WISE_API_AUDIO_DISCONNECT, "[AG][API] btmtk_ag_audiodisconnect")
    TRC_MSG(BT_HFG_WISE_API_GET_CON_STATUS, "[AG][API] btmtk_ag_getconstatus ret=%d")
    TRC_MSG(BT_HFG_WISE_API_GET_AUDIO_CON_STATUS, "[AG][API] btmtk_ag_getaudiostatus ret=%d")
    TRC_MSG(BT_HFG_WISE_API_SET_CONNECTABLE, "[AG][API] btmtk_ag_setconnectable(%d)")
    TRC_MSG(BT_HFG_WISE_API_SET_AUDIO_PATH, "[AG][API] btmtk_ag_setaudiopath(%d)")
    TRC_MSG(BT_HFG_WISE_API_SET_SPK_VOLUME, "[AG][API] btmtk_ag_setspkvolume(%d)")
    TRC_MSG(BT_HFG_WISE_API_CALL_STATE_CHANGE, "[AG][API] btmtk_ag_callstatechange(%d)")
    TRC_MSG(BT_HFG_WISE_API_SET_NETWORK_STATUS, "[AG][API] btmtk_ag_setnetworkstatus(%d)")
    TRC_MSG(BT_HFG_WISE_API_SET_CALLER_ID, "[AG][API] btmtk_ag_setcid(Len=%d)")
    TRC_MSG(BT_HFG_WISE_API_SET_SIGNAL_STRENGTH, "[AG][API] btmtk_ag_setsignalstrength(%d)")
    TRC_MSG(BT_HFG_WISE_API_SET_ROAMING_STATUS, "[AG][API] btmtk_ag_setroamingstatus(%d)")
    TRC_MSG(BT_HFG_WISE_API_SET_BATTERY_LEVEL, "[AG][API] btmtk_ag_setbatterylevel(%d)")
    TRC_MSG(BT_HFG_WISE_API_SET_CALLHELD_STATUS, "[AG][API] btmtk_ag_setcallheldstatus(%d)")
    TRC_MSG(BT_HFG_WISE_API_SET_OPERATOR_SELECTION, "[AG][API] btmtk_ag_setoperatorselection(mode=%d)")
    TRC_MSG(BT_HFG_WISE_API_SET_EXTENDED_ERROR, "[AG][API] btmtk_ag_setextendederror(%d)")
    TRC_MSG(BT_HFG_WISE_API_SET_SUBSCRIBER_NUMBER, "[AG][API] btmtk_ag_setsubscribernumber(Len=%d, type=%d, svc=%d, final=%d)")
    TRC_MSG(BT_HFG_WISE_API_SET_CALL_WAITING, "[AG][API] btmtk_ag_setcallwaiting(Len=%d)")
    TRC_MSG(BT_HFG_WISE_API_SEND_RESPONSE, "[AG][API] btmtk_ag_sendresponse(%d)")
    TRC_MSG(BT_HFG_WISE_API_SET_CIND, "[AG][API] btmtk_ag_setcind(net=%d, call=%d, callsetup=%d, signal=%d, roam=%d, batt=%d, callheld=%d)")
    TRC_MSG(BT_HFG_WISE_API_SET_CURRENT_CALL_LIST, "[AG][API] btmtk_ag_setcurrentcalllist(index=%d, dir=%d, status=%d, mode=%d, mpty=%d, type=%d, Len=%d, final=%d)")
    TRC_MSG(BT_HFG_WISE_API_START_VR, "[AG][API] btmtk_ag_startvr")
    TRC_MSG(BT_HFG_WISE_API_STOP_VR, "[AG][API] btmtk_ag_stopvr")
    TRC_MSG(BT_HFG_WISE_API_RING_START, "[AG][API] btmtk_ag_ringstart")
    TRC_MSG(BT_HFG_WISE_API_RING_STOP, "[AG][API] btmtk_ag_ringstop")
    TRC_MSG(BT_HFG_WISE_API_SEND_SUPPORTED_PB_LIST, "[AG][API] btmtk_ag_sendsupportedpblist(num=%d)")
    TRC_MSG(BT_HFG_WISE_API_SEND_SELECTED_PB_INFO, "[AG][API] btmtk_ag_sendselectedpbinfo(result=%d, used=%d, total=%d)")
    TRC_MSG(BT_HFG_WISE_API_SEND_PB_SELECT_RESULT, "[AG][API] btmtk_ag_sendpbselectresult(result=%d, err=%d)")
    TRC_MSG(BT_HFG_WISE_API_SEND_PB_ENTRIES_INFO, "[AG][API] btmtk_ag_sendpbentriesinfo(result=%d, start=%d, end=%d, maxLenNum=%d, maxLenText=%d)")
    TRC_MSG(BT_HFG_WISE_API_SEND_PB_READ_RESULT, "[AG][API] btmtk_ag_sendpbreadresult(result=%d, index=%d, number=%s, type=%d, text=%s, final=%d)")
    TRC_MSG(BT_HFG_WISE_API_SEND_PB_FIND_ENTRIES_INFO, "[AG][API] btmtk_ag_sendpbfindentriesinfo(result=%d, maxLenNum=%d, maxLenText=%d)")
    TRC_MSG(BT_HFG_WISE_API_SEND_PB_FIND_RESULT, "[AG][API] btmtk_ag_sendpbfindresult(result=%d, index=%d, number=%s, type=%d, text=%s, final=%d)")
    TRC_MSG(BT_HFG_WISE_API_SEND_PB_WRITE_INFO, "[AG][API] btmtk_ag_sendpbwriteinfo(result=%d, indStart=%d, indEnd=%d, maxLenNum=%d, typeStart=%d, typeEnd=%d, maxLenText=%d)")
    TRC_MSG(BT_HFG_WISE_API_SEND_PB_WRITE_RESULT, "[AG][API] btmtk_ag_sendpbwriteresult(result=%d)")
    TRC_MSG(BT_HFG_WISE_API_SET_CGM, "[AG][API] btmtk_ag_setcgm(manufacture=%s, model=%s)")
    TRC_MSG(BT_HFG_WISE_API_SET_CSCS, "[AG][API] btmtk_ag_setcscs")
    TRC_MSG(BT_HFG_WISE_API_SET_MULTI_FUNCTION_KEY, "[AG][API] btmtk_ag_setmultifunckey(%d)")
    TRC_MSG(BT_HFG_WISE_API_SET_CALL_STATUS, "[AG][API] btmtk_ag_setcallstatus(%d)")
    TRC_MSG(BT_HFG_WISE_API_SET_CALLSETUP, "[AG][API] btmtk_ag_setcallsetup(%d)")
    TRC_MSG(BT_HFG_WISE_API_SEND_BTRH, "[AG][API] btmtk_ag_sendbtrh(%d)")
    TRC_MSG(BT_HFG_WISE_API_SEND_CMS_ERR, "[AG][API] btmtk_ag_sendcmserr(%d)")
    TRC_MSG(BT_HFG_WISE_API_SET_MSG_SVC_LIST, "[AG][API] btmtk_ag_setmsgsvclist(svc=%d, currentFlag=%d, currSvc=%d)")
    TRC_MSG(BT_HFG_WISE_API_SET_MSG_STO_LIST, "[AG][API] btmtk_ag_setmsgstoragelist")   
    TRC_MSG(BT_HFG_WISE_API_SEND_MSG_STO_SELECT_RESULT, "[AG][API] btmtk_ag_sendmsgstorageselectresult(num=%d)")
    TRC_MSG(BT_HFG_WISE_API_SEND_MSG_STO_INFO, "[AG][API] btmtk_ag_sendmsgstorageinfo(num=%d)")
    TRC_MSG(BT_HFG_WISE_API_SET_CMGF, "[AG][API] btmtk_ag_setcmgf(currMode=%d)")
    TRC_MSG(BT_HFG_WISE_API_SEND_SCA, "[AG][API] btmtk_ag_sendsca(opt=0x%X, sca=%s, type=%d)")
    TRC_MSG(BT_HFG_WISE_API_SEND_TEXT_MODE_PARAM, "[AG][API] btmtk_ag_sendtextmodeparam(opt=0x%X, fo=%d, pid=%d, dcs=%d, intVP=%d, tsVP=%s)")
    TRC_MSG(BT_HFG_WISE_API_SET_CSDH, "[AG][API] btmtk_ag_setcsdh(currShow=%d)")
    TRC_MSG(BT_HFG_WISE_API_SET_MSG_SETTING_LIST, "[AG][API] btmtk_ag_setmsgsettinglist(Setting=%s, currFlag=%d, mode=%d, mt=%d, bm=%d, ds=%d, bfr=%d)")
    TRC_MSG(BT_HFG_WISE_API_SEND_MSG_INDICATION, "[AG][API] btmtk_ag_sendmsgindication(mem=%d, index=%d)")
    TRC_MSG(BT_HFG_WISE_API_SEND_MSG_STATUS_LIST, "[AG][API] btmtk_ag_sendmsgstatuslist(num=%d)")
    TRC_MSG(BT_HFG_WISE_API_SEND_MSG_LIST, "[AG][API] btmtk_ag_sendmsglist(NoMsgFlag=%d, SMType=%d, index=%d, status=%d, final=%d)")
    TRC_MSG(BT_HFG_WISE_API_SEND_MSG, "[AG][API] btmtk_ag_sendmsg(SMType=%d, status=%d)")
    TRC_MSG(BT_HFG_WISE_API_SEND_MSG_RESULT, "[AG][API] btmtk_ag_sendmsgresult(MsRef=%d)")
    TRC_MSG(BT_HFG_WISE_API_IS_HSAG_CONNECTED, "[AG][API] btmtk_hsag_is_connected ret=%d")
    TRC_MSG(BT_HFG_WISE_API_IS_HFAG_CONNECTED, "[AG][API] btmtk_hfag_is_connected ret=%d")
    TRC_MSG(BT_HFG_WISE_API_HSAG_AUTHORIZE_RES, "[AG][API] btmtk_hsag_authorize_res(mode=%d)")
    TRC_MSG(BT_HFG_WISE_API_HFAG_AUTHORIZE_RES, "[AG][API] btmtk_hfag_authorize_res(mode=%d)")
    TRC_MSG(BT_HFG_WISE_CBK, "[AG][CBK] handle=0x%X, evt=0x%X")
    TRC_MSG(BT_HFG_WISE_EVT, "[AG][EVT] evt=%d, conn_idx=%d")
    TRC_MSG(BT_HFG_WISE_INFO_HDL_ACTIVATE_CNF, "[AG][HDL] Profile %d activate cnf : status=%d")
    TRC_MSG(BT_HFG_WISE_INFO_HDL_DEACTIVATE_CNF, "[AG][HDL] Profile %d deactivate cnf")
    TRC_MSG(BT_HFG_WISE_INFO_HDL_CONNECT_CNF, "[AG][HDL] Profile %d connect cnf : status=%d")
    TRC_MSG(BT_HFG_WISE_INFO_HDL_DISCONNECT_CNF, "[AG][HDL] Profile %d disconnect cnf")
    TRC_MSG(BT_HFG_WISE_INFO_HDL_ACCEPT_CNF, "[AG][HDL] Profile %d accept cnf : status=%d")
    TRC_MSG(BT_HFG_WISE_INFO_HDL_REJECT_CNF, "[AG][HDL] Profile %d reject cnf")
    TRC_MSG(BT_HFG_WISE_INFO_HDL_SCO_CONNECT_CNF, "[AG][HDL] Profile %d sco connect cnf : status=%d")
    TRC_MSG(BT_HFG_WISE_INFO_HDL_SCO_DISCONNECT_CNF, "[AG][HDL] Profile %d sco disconnect cnf")
    TRC_MSG(BT_HFG_WISE_INFO_HDL_CONNECTED_IND, "[AG][HDL] Profile %d connected ind")
    TRC_MSG(BT_HFG_WISE_INFO_HDL_DISCONNECTED_IND, "[AG][HDL] Profile %d disconnected ind")
    TRC_MSG(BT_HFG_WISE_INFO_HDL_AUDIO_CONNECTED_IND, "[AG][HDL] Profile %d audio connected ind : status=%d")
    TRC_MSG(BT_HFG_WISE_INFO_HDL_AUDIO_DISCONNECTED_IND, "[AG][HDL] Profile %d audio disconnected ind")
    TRC_MSG(BT_HFG_WISE_INFO_HDL_AUTH_IND, "[AG][HDL] Profile %d auth ind : addr=0x%02X%02X%02X%02X%02X%02X")
    TRC_MSG(BT_HFG_WISE_INFO_HDL_READ_INDICATOR_IND, "[AG][HDL] read indicator ind : svc=%d, call=%d, callsetup=%d, callheld=%d, batt=%d, signal=%d, roaming=%d")
    TRC_MSG(BT_HFG_WISE_INFO_HDL_HF_FEATURE_IND, "[AG][HDL] Remote featur=0x%X")
    TRC_MSG(BT_HFG_WISE_INFO_HDL_AUTO_REJECT, "[AG][HDL] Auto reject profile %d connection request")
    TRC_MSG(BT_HFG_WISE_INFO_SUPPORTED_PB_LIST, "[AG][INFO] Supported PB list=0x%X")
    TRC_MSG(BT_HFG_WISE_INFO_MSG_STO_SELECT_RESULT, "[AG][INFO] mem%d : used=%d, total=%d")
    TRC_MSG(BT_HFG_WISE_INFO_MSG_STO_INFO, "[AG][INFO] mem%d : used=%d, total=%d")
    TRC_MSG(BT_HFG_WISE_INFO_MSG_STATUS_LIST, "[AG][INFO] status list=%s")
    TRC_MSG(BT_HFG_WISE_INFO_PROFILE_STATE_CHANGE, "[AG][INFO] profile %d : old state=%d, new state=%d")
    TRC_MSG(BT_HFG_WISE_INFO_SET_ACTIVE_PROFILE, "[AG][INFO] active : profile=%d, context=0x%X")
    TRC_MSG(BT_HFG_WISE_INFO_RING_TIMER_START, "[AG][INFO] Ring timer started") 
    TRC_MSG(BT_HFG_WISE_INFO_RING_TIMER_STOP, "[AG][INFO] Ring timer stopped")
    TRC_MSG(BT_HFG_WISE_INFO_RING_TIMER_TRIGGERED, "[AG][INFO] Ring timer triggered")
    TRC_MSG(BT_HFG_WISE_INFO_INVALID_RING_TIMER, "[AG][INFO] Invalid ring timer")
    TRC_MSG(BT_HFG_WISE_INFO_RING_TIMER_INVALID_INDEX, "[AG][INFO] Ring timer indexc invalid : %d")
    TRC_MSG(BT_HFG_WISE_WARN_ALREADY_ENABLED, "[AG][WARN] AG is already enabled")
    TRC_MSG(BT_HFG_WISE_WARN_ALREADY_DISABLED, "[AG][WARN] AG is already disabled")
    TRC_MSG(BT_HFG_WISE_WARN_NOT_IN_ACTIVATED, "[AG][WARN] Profile %d is not in activated state : state=%d")
    TRC_MSG(BT_HFG_WISE_WARN_NOT_CONNECTED, "[AG][WARN] Profile %d is not connected : state=%d")
    TRC_MSG(BT_HFG_WISE_WARN_NO_AUDIO_CONNECTION, "[AG][WARN] Profile %d has no audio connection : state=%d")
    TRC_MSG(BT_HFG_WISE_ERR_ACTIVATE_FAIL, "[AG][ERR] profile=%d activate failed")
    TRC_MSG(BT_HFG_WISE_ERR_UNEXPECTED_STATE, "[AG][ERR] Unexpected state : profile=%d, state=%d")
    TRC_MSG(BT_HFG_WISE_ERR_UNEXPECTED_AG_STATE, "[AG][ERR] Unexpected AG state : state=%d, expected=%d")
    TRC_MSG(BT_HFG_WISE_ERR_CONFIRM_FAIL, "[AG][ERR] Confirm failed : evt=%d, status=%d")
    TRC_MSG(BT_HFG_WISE_ERR_NO_CONNECTION, "[AG][ERR] No connection")
    TRC_MSG(BT_HFG_WISE_ERR_ALLOC_MEM_FAIL, "[AG][ERR] Allocate memory failed")
    /* MBT OPP TRACE */
    TRC_MSG(BT_OPP_WISE_API_SERVER_ENABLE , "[MBT][API] btmtk_opp_server_enable ")
    TRC_MSG(BT_OPP_WISE_API_SERVER_DISABLE , "[MBT][API] btmtk_opp_server_disable ")
    TRC_MSG(BT_OPP_WISE_API_SERVER_DISCONNECT, "[MBT][API] btmtk_opp_server_disconnect ")
    TRC_MSG(BT_OPP_WISE_API_SERVER_ACCESS_RESPONSE, "[MBT][API] btmtk_opp_server_access_response rspcoe:(%d)")
    TRC_MSG(BT_OPP_WISE_API_SERVER_CB,"[MBT][CB] bt_opps_ui_cb u4OPPUIEvent:(%d) ucdata:(%d) mbterr:(%d)")
    TRC_MSG(BT_OPP_WISE_INFO_SERVER_ENABLE, "[MBT][CB] btmtk_opp_server_enable ok:(%d)")
    TRC_MSG(BT_OPP_WISE_INFO_SERVER_DISABLE, "[MBT][CB] btmtk_opp_server_disable ok:(%d)")
    TRC_MSG(BT_OPP_WISE_INFO_SERVER_AUTHORIZE_REQ, "[MBT][API] btmtk_opp_server_authorize_request")
    TRC_MSG(BT_OPP_WISE_INFO_SERVER_PUSH_ACCESS, "[MBT][API] btmtk_opp_server_push_access_request format:(%d)")
    TRC_MSG(BT_OPP_WISE_INFO_SERVER_PULL_ACCESS, "[MBT][API] btmtk_opp_server_pull_access_request format:(%d)")
    TRC_MSG(BT_OPP_WISE_INFO_SERVER_PUSH_FINISH, "[MBT][CB] btmtk_opp_server_push_finish() ok:(%d) reason:(%d)")
    TRC_MSG(BT_OPP_WISE_INFO_SERVER_PUSH_START, "[MBT][CB] btmtk_opp_server_push_start() ok:(%d) reason:(%d)")
    TRC_MSG(BT_OPP_WISE_CHK_SERVER_STATE, "[MBT] check opp server state:(%d)" )
    TRC_MSG(BT_OPP_WISE_CHK_CLIENT_STATE, "[MBT] check opp server state:(%d)")
    TRC_MSG(BT_OPP_WISE_API_OPP_IS_CONNECTED, "[MBT][API] btmtk_opp_is_connected l_ret:%d")
    TRC_MSG(BT_OPP_WISE_API_OPP_IS_DEV_CONNECTED, "[MBT][API] btmtk_opp_is_dev_connected l_ret:%d")
    TRC_MSG(BT_OPP_WISE_API_CLIENT_ENABLE, "[MBT][API] btmtk_opp_client_enable")
    TRC_MSG(BT_OPP_WISE_API_CLIENT_DISABLE, "[MBT][API] btmtk_opp_client_disable")
    TRC_MSG(BT_OPP_WISE_API_CLIENT_PUSHOBJECT , "[MBT][API] btmtk_opp_client_pushobject type:(%d)")
    TRC_MSG(BT_OPP_WISE_API_CLIENT_PULLOBJECT , "[MBT][API] btmtk_opp_client_pullobject type:(%d)")
    TRC_MSG(BT_OPP_WISE_API_CLIENT_EXCHOBJECT , "[MBT][API] btmtk_opp_client_exchobject pushtype:(%d) pulltype:(%d)")
    TRC_MSG(BT_OPP_WISE_API_CLIENT_DISCONNECT, "[MBT][API] btmtk_opp_client_disconnect")
    TRC_MSG(BT_OPP_WISE_API_POST_EVENT, "[MBT][CB] post event:(%d) idx:(%d)")
    TRC_MSG(BT_OPP_WISE_API_SDC_STATUS, "[MBT][CB] sdcOppStatus oper:%d state:%d reason:%d ")
    TRC_MSG(BT_OPP_WISE_API_CLIENT_CB, "[MBT][CB] bt_oppc_ui_cb u4OPPUIEvent:(%d) ucdata:(%d) mbterr:(%d)")
    TRC_MSG(BT_OPP_WISE_API_SERVER_AUTHORIZE_RES, "[MBT][API] btmtk_opp_authorize_res authMode:(%d)")
    TRC_MSG(BT_OPP_WISE_ERR_CLIENT_DISCONNECT, "[MBT][WRN] btmtk_opp_disconnect fail!")
    TRC_MSG(BT_OPP_WISE_ERR_CLIENT_EXCHOBJECT, "[MBT][WRN] btmtk_opp_client_exchobject fail!")
    TRC_MSG(BT_OPP_WISE_ERR_CLIENT_PULLOBJECT, "[MBT][WRN] btmtk_opp_client_pullobject fail!")
    TRC_MSG(BT_OPP_WISE_ERR_CLIENT_PUSHOBJECT, "[MBT][WRN] btmtk_opp_client_pushobject fail!")
    TRC_MSG(BT_OPP_WISE_INFO_CLIENT_PUSH_START, "[MBT][CB] btmtk_opp_client_push_start ok:(%d) reason:(%d) total:(%d)")
    TRC_MSG(BT_OPP_WISE_INFO_CLIENT_PUSH_CONTINUE, "[MBT][CB] btmtk_opp_client_push_conti ok:(%d) reason:(%d) total:(%d)")
    TRC_MSG(BT_OPP_WISE_INFO_CLIENT_PUSH_FINISH,"[MBT][CB] btmtk_opp_client_push_finish ok:(%d)")
    TRC_MSG(BT_OPP_WISE_INFO_CLIENT_PULL_START, "[MBT][CB] btmtk_opp_client_pull_start ok:(%d) ")
    TRC_MSG(BT_OPP_WISE_INFO_CLIENT_PULL_CONTINUE, "[MBT][CB] btmtk_opp_client_pull_continue ok:(%d) size:(%d) total:(%d)")
    TRC_MSG(BT_OPP_WISE_INFO_CLIENT_PULL_FINISH,"[MBT][CB] btmtk_opp_client_pull_finish ok:(%d) reason:(%d)")
    TRC_MSG(BT_OPP_WISE_INFO_CLIENT_EXCH_PUSH_CONTINUE, "[MBT][CB] btmtk_opp_client_exchange_push_continue ok:(%d) size:(%d)")
    TRC_MSG(BT_OPP_WISE_INFO_CLIENT_EXCH_PUSH_FINISH, "[MBT][CB] ok:(%d) size:(%d) reason:(%d)")
    TRC_MSG(BT_OPP_WISE_INFO_CLIENT_EXCH_PULL_CONTINUE,"[MBT][CB] btmtk_opp_client_exchange_pull_continue ok:(%d) size:(%d) reason:(%d)")
    TRC_MSG(BT_OPP_WISE_INFO_CLIENT_EXCH_PULL_FINISH, "[MBT][CB] btmtk_opp_client_exchange_pull_finish ok:(%d) reason:(%d)")
    TRC_MSG(BT_OPP_WISE_INFO_CLIENT_EXCH_START, "[MBT][CB] btmtk_opp_client_exchange_start ok:(%d)")
    TRC_MSG(BT_OPP_WISE_INFO_CLIENT_EXCH_FINISH,"[MBT][CB] btmtk_opp_client_exchange_finish")
    TRC_MSG(BT_OPP_WISE_INFO_CLIENT_ENABLE,"[MBT][CB] btmtk_opp_client_enable_result ok:(%d)")
    TRC_MSG(BT_OPP_WISE_INFO_CLIENT_DISABLE, "[MBT][CB] btmtk_opp_client_enable_result ok:(%d)")
    TRC_MSG(BT_OPP_WISE_INFO_CLIENT_ABORT_RESULT, "[MBT][CB] btmtk_opp_client_abort_result")
    TRC_MSG(BT_OPP_WISE_INFO_CLIENT_DISCONNECT_RESULT, "[MBT][CB] cbtmtk_opp_lient_disconnect_result")
    /* MBT SPP TRACE */
    TRC_MSG(BT_SPP_MBT_ENABLE,"[BT_SPP_MBT] btmtk_spp_mbt_enable()")    
    TRC_MSG(BT_SPP_MBT_DISABLE,"[BT_SPP_MBT] btmtk_spp_mbt_disable()")    
    TRC_MSG(BT_SPP_MBT_CONNECT,"[BT_SPP_MBT] btmtk_spp_mbt_connect()")    
    TRC_MSG(BT_SPP_MBT_DISCONNECT,"[BT_SPP_MBT] btmtk_spp_mbt_disconnect(), port=%d")    
    TRC_MSG(BT_SPP_MBT_LISTEN,"[BT_SPP_MBT] btmtk_spp_mbt_listen(), UUID=%x")    
    TRC_MSG(BT_SPP_MBT_LISTENSTOP,"[BT_SPP_MBT] btmtk_spp_mbt_listenstop(), port=%d")    
    TRC_MSG(BT_SPP_MBT_SENDDATA,"[BT_SPP_MBT] btmtk_spp_mbt_senddata(), port=%d, length=%d")    
    TRC_MSG(BT_SPP_MBT_ISCONNECTED,"[BT_SPP_MBT] btmtk_spp_is_connected()")    
    TRC_MSG(BT_SPP_MBT_ISDEVCONNECTED,"[BT_SPP_MBT] btmtk_spp_is_dev_connected()")    
    TRC_MSG(BT_SPP_MBT_AUTHORIZE_RES,"[BT_SPP_MBT] btmtk_spp_authorize_res(), result=%d")
    TRC_MSG(BT_SPP_MBT_CB_ENABLE_CNF,"[BT_SPP_MBT] btmtk_spp_mbt_cb_enable_cnf()")
    TRC_MSG(BT_SPP_MBT_CB_DISABLE_CNF,"[BT_SPP_MBT] btmtk_spp_mbt_cb_disable_cnf()")
    TRC_MSG(BT_SPP_MBT_CB_LISTEN_CNF,"[BT_SPP_MBT] btmtk_spp_mbt_cb_listen_cnf()")
    TRC_MSG(BT_SPP_MBT_CB_LISTEN_STOP_CNF,"[BT_SPP_MBT] btmtk_spp_mbt_cb_listen_stop_cnf()")
    TRC_MSG(BT_SPP_MBT_CB_CONNECT_CNF,"[BT_SPP_MBT] btmtk_spp_mbt_cb_connect_cnf()")
    TRC_MSG(BT_SPP_MBT_CB_DISCONNECT_CNF,"[BT_SPP_MBT] btmtk_spp_mbt_cb_disconnect_cnf()")
    TRC_MSG(BT_SPP_MBT_CB_SEND_DATA_CNF,"[BT_SPP_MBT] btmtk_spp_mbt_cb_send_data_cnf()")
    TRC_MSG(BT_SPP_MBT_CB_RECEIVE_DATA_IND,"[BT_SPP_MBT] btmtk_spp_mbt_cb_receive_data_ind()")
    TRC_MSG(BT_SPP_MBT_CB_CONNECT_IND_REQ,"[BT_SPP_MBT] btmtk_spp_mbt_cb_connect_ind_req()")
    TRC_MSG(BT_SPP_MBT_CB_CONNECT_IND,"[BT_SPP_MBT] btmtk_spp_mbt_cb_connect_ind()")
    TRC_MSG(BT_SPP_MBT_CB_DISCONNECT_IND,"[BT_SPP_MBT] btmtk_spp_mbt_cb_disconnect_ind()")
    /* MBT SIMAP TRACE */
    TRC_MSG(BT_SIMAP_MBT_ENABLE,"[BT_SIMAP_MBT] btmtk_simap_mbt_enable()")
    TRC_MSG(BT_SIMAP_MBT_DISABLE,"[BT_SIMAP_MBT] btmtk_simap_mbt_disable()")
    TRC_MSG(BT_SIMAP_MBT_SERVER_CONNECT_RESPONSE,"[BT_SIMAP_MBT] btmtk_simap_server_connect_response(), result=%d")
    TRC_MSG(BT_SIMAP_MBT_DISCONNECT,"[BT_SIMAP_MBT] btmtk_simap_mbt_disconnet(), disconnect type=%d")
    TRC_MSG(BT_SIMAP_MBT_IS_CONNECTED,"[BT_SIMAP_MBT] btmtk_simap_is_connected()")
    TRC_MSG(BT_SIMAP_MBT_ISDEV_CONNECTED,"[BT_SIMAP_MBT] btmtk_simap_is_dev_connected()")
    TRC_MSG(BT_SIMAP_MBT_AUTHORIZE_RES,"[BT_SIMAP_MBT] btmtk_simap_authorize_res(), result=%d")
    TRC_MSG(BT_SIMAP_MBT_DEINIT,"[BT_SIMAP_MBT] btmtk_simap_deinit()")
    TRC_MSG(BT_SIMAP_MBT_CB_ENABLE_CNF,"[BT_SIMAP_MBT] btmtk_simap_mbt_cb_enable_cnf()")
    TRC_MSG(BT_SIMAP_MBT_CB_DISABLE_CNF,"[BT_SIMAP_MBT] btmtk_simap_mbt_cb_disable_cnf()")
    TRC_MSG(BT_SIMAP_MBT_CB_AUTH_REQ,"[BT_SIMAP_MBT] btmtk_simap_mbt_cb_auth_req()")
    TRC_MSG(BT_SIMAP_MBT_CB_CONNECT_IND,"[BT_SIMAP_MBT] btmtk_simap_mbt_cb_connect_ind()")
    TRC_MSG(BT_SIMAP_MBT_CB_DISCONNECT_IND,"[BT_SIMAP_MBT] btmtk_simap_mbt_cb_disconnect_ind()")
    TRC_MSG(BT_SIMAP_MBT_CB_DISCONNECT_CNF,"[BT_SIMAP_MBT] btmtk_simap_mbt_cb_disconnect_cnf()")
    TRC_MSG(BT_SIMAP_MBT_CB_ATR_RSP_SENT_IND,"[BT_SIMAP_MBT] btmtk_simap_mbt_cb_atr_rsp_sent_ind()")
    TRC_MSG(BT_SIMAP_MBT_CB_APDU_RSP_SENT_IND,"[BT_SIMAP_MBT] btmtk_simap_mbt_cb_apdu_rsp_sent_ind()")
    TRC_MSG(BT_SIMAP_MBT_CB_SIM_ON_RSP_SENT_IND,"[BT_SIMAP_MBT] btmtk_simap_mbt_cb_sim_on_rsp_sent_ind()")
    TRC_MSG(BT_SIMAP_MBT_CB_SIM_OFF_RSP_SENT_IND,"[BT_SIMAP_MBT] btmtk_simap_mbt_cb_sim_off_rsp_sent_ind()")
    TRC_MSG(BT_SIMAP_MBT_CB_SIM_RESET_RSP_SENT_IND,"[BT_SIMAP_MBT] btmtk_simap_mbt_cb_sim_reset_rsp_sent_ind()")
    TRC_MSG(BT_SIMAP_MBT_CB_CARD_STATUS_IND_SENT_IND,"[BT_SIMAP_MBT] btmtk_simap_mbt_cb_card_status_ind_sent_ind()")
    TRC_MSG(BT_SIMAP_MBT_CB_CARD_READER_STATUS_RSP_SENT_IND,"[BT_SIMAP_MBT] btmtk_simap_mbt_cb_card_reader_status_rsp_sent_ind()")
    TRC_MSG(BT_SIMAP_MBT_CB_SET_TRANSPORT_PROTOCOL_RSP_SENT_IND,"[BT_SIMAP_MBT] btmtk_simap_mbt_cb_set_transport_protocol_rsp_sent_ind()")
    TRC_MSG(BT_SIMAP_MBT_CB_AUTH_REQ_TIMEOUT_RFCLOSE_IND,"[BT_SIMAP_MBT] btmtk_simap_mbt_cb_auth_req_timeout_rfclose_ind()")
    TRC_MSG(BT_SIMAP_MBT_CB_SIM_CONNECT_FAILED_IND,"[BT_SIMAP_MBT] btmtk_simap_mbt_cb_sim_connect_failed_ind()")
    

    TRC_MSG(BT_PBAP_MBT_REGISTER_REQ,"[BT_PBAP_MBT] btmtk_pbap_send_active_req()")
    TRC_MSG(BT_PBAP_MBT_DEREGISTER_REQ,"[BT_PBAP_MBT] btmtk_pbap_send_deactive_req()")
    TRC_MSG(BT_PBAP_MBT_DISCONNECT_REQ,"[BT_PBAP_MBT] btmtk_pbap_send_disconnect_req()")
    TRC_MSG(BT_PBAP_MBT_AUTHORIZE_RSP,"[BT_PBAP_MBT] btmtk_pbap_send_authorize_rsp()")
    TRC_MSG(BT_PBAP_MBT_CLIENT_CONNECT_RSP,"[BT_PBAP_MBT] btmtk_pbap_send_connect_rsp()")
    TRC_MSG(BT_PBAP_MBT_CLIENT_AUTH_CHALLENGE_RSP,"[BT_PBAP_MBT] btmtk_pbap_send_obex_auth_challege_rsp()")
    TRC_MSG(BT_PBAP_MBT_SET_PATH_RSP,"[BT_PBAP_MBT] btmtk_pbap_send_set_path_rsp()")
    TRC_MSG(BT_PBAP_MBT_READ_ENTRY_RSP,"[BT_PBAP_MBT] btmtk_pbap_send_read_entry_rsp()")
    TRC_MSG(BT_PBAP_MBT_READ_FOLDER_RSP,"[BT_PBAP_MBT] btmtk_pbap_send_read_folder_rsp()")
    TRC_MSG(BT_PBAP_MBT_READ_LIST_RSP,"[BT_PBAP_MBT] btmtk_pbap_send_read_list_rsp()")
    TRC_MSG(BT_PBAP_MBT_EXT_HANDLE_MESSAGE,"[BT_PBAP_MBT] pbap_external_adp_handle_message: message id = (%d)")
    TRC_MSG(BT_PBAP_MBT_INT_HANDLE_MESSAGE,"[BT_PBAP_MBT] pbap_internal_adp_handle_message: message id = (%d)")
    TRC_MSG(BT_PBAP_MBT_POST_EVENT,"[BT_PBAP_MBT]pbap_post_event: event id = (%d)")
    TRC_MSG(BT_PBAP_MBT_STATA_ERR,"[BT_PBAP_MBT]pbap external adp recieve message at a error state")
    TRC_MSG(BT_PBAP_MBT_SET_STATE,"[BT_PBAP_MBT]set state to (%d)")
    TRC_MSG(BT_PBAP_MBT_RSP_WITH_FAIL,"[BT_PBAP_MBT]Sent Response to internal ADP wit h fail result")
    TRC_MSG(BT_PBAP_MBT_WISE_ENABLE,"[BT_PBAP_MBT]btmtk_pbap_wise_server_enable")
    TRC_MSG(BT_PBAP_MBT_WISE_DISABLE,"[BT_PBAP_MBT]btmtk_pbap_wise_server_disable")
    TRC_MSG(BT_PBAP_MBT_WISE_AUTHENTICATE,"[BT_PBAP_MBT]btmtk_pbap_wise_server_authenticate")
    TRC_MSG(BT_PBAP_MBT_WISE_CLOSE,"[BT_PBAP_MBT]btmtk_pbap_wise_server_close")
    TRC_MSG(BT_PBAP_MBT_WISE_WRITEDATA,"[BT_PBAP_MBT]btmtk_pbap_wise_server_writedata")
    TRC_MSG(BT_PBAP_MBT_GAP_AUTH_RES,"[BT_PBAP_MBT]btmtk_pbap_authorize_res")
    TRC_MSG(BT_PBAP_MBT_FILE_PATH,"[BT_PBAP_MBT]SDC vcardout filepath:(%s)")
    TRC_MSG(BT_PBAP_MBT_FILE_PATH_LEN, "[BT_PBAP_MBT]SDC vcardout filepath len:(%d)")

    /* MBT MAP TRACE */
    TRC_MSG(BTLOG_MBT_MAP_LOG_STRING, "[MBT][MAP] string log =%c%c%c%c%c%c%c%c%c%c")
    TRC_MSG(BTLOG_MBT_MAP_SERVER_ENABLE, "[MBT][MAP] btmtk_map_server_enable")
    TRC_MSG(BTLOG_MBT_MAP_SERVER_DISABLE, "[MBT][MAP] btmtk_map_server_disable")
    TRC_MSG(BTLOG_MBT_MAP_SERVER_REGISTER, "[MBT][MAP] btmtk_map_server_register(instId=%d, msgType=%d)")
    TRC_MSG(BTLOG_MBT_MAP_SERVER_DEREGISTER, "[MBT][MAP] btmtk_map_server_deregister(instId=%d)")
    TRC_MSG(BTLOG_MBT_MAPS_AUTHORIZE_RES, "[MBT][MAP] btmtk_maps_authorize_res(%d)")
    TRC_MSG(BTLOG_MBT_MAPS_ACCESS_RESPONSE, "[MBT][MAP] btmtk_map_server_access_response(addr=%02X:%02X:%02X:%02X:%02X:%02X, inst=%d, oper=%d, reply=%d)")
    TRC_MSG(BTLOG_MBT_MAP_SERVER_SEND_EVENT, "[MBT][MAP] btmtk_map_server_send_event(inst=%d, notif=%d, handle=0x%x, msgType=0x%x)")
    TRC_MSG(BTLOG_MBT_MAP_SERVER_MNS_DISCONNECT, "[MBT][MAP] btmtk_map_server_mns_disconnect(addr=%02X:%02X:%02X:%02X:%02X:%02X)")
    TRC_MSG(BTLOG_MBT_MAP_SERVER_MAS_DISCONNECT, "[MBT][MAP] btmtk_map_server_mas_disconnect(addr=%02X:%02X:%02X:%02X:%02X:%02X, inst=%d)")
    TRC_MSG(BTLOG_MBT_MAP_SERVER_DISCONNECT, "[MBT][MAP] btmtk_map_server_disconnect(inst=%d)")
    TRC_MSG(BTLOG_MBT_MAP_INT_DUMP_CNTX, "[MBT][MAP] btmtk_map_int_dump_cntx(): op[%d] = %d")
    TRC_MSG(BTLOG_MBT_MAP_INT_SET_CNTX, "[MBT][MAP] btmtk_map_int_set_cntx(%d)")
    TRC_MSG(BTLOG_MBT_MAP_INT_RESET_CNTX, "[MBT][MAP] btmtk_map_int_reset_cntx(%d)")
    TRC_MSG(BTLOG_MBT_MAP_INT_RESET_CLIENT_CNTX, "[MBT][MAP] btmtk_map_int_reset_client_cntx(%d)")
    TRC_MSG(BTLOG_MBT_MAP_HANDLE_INT_MESSAGE, "[MBT][MAP] btmtk_map_handle_int_message: op=%d")
    TRC_MSG(BTLOG_MBT_MAP_POST_EVENT, "[MBT][MAP] post event %d (index=%d)")
    TRC_MSG(BTLOG_MBT_MAP_INT_SERVER_DISABLE, "[MBT][MAP] btmtk_map_int_server_disable: state=%d")
    TRC_MSG(BTLOG_MBT_MAP_INT_SERVER_REGISTER_DUPLICATE, "[MBT][MAP] btmtk_map_int_server_register: Already registered")
    TRC_MSG(BTLOG_MBT_MAP_INT_SERVER_REGISTER_CONFLICT, "[MBT][MAP] btmtk_map_int_server_register: Conlict with registered server")
    TRC_MSG(BTLOG_MBT_MAP_INT_SERVER_DEREGISTER_DUPLICATE, "[MBT][MAP] btmtk_map_int_server_deregister: Same request already in progressing")
    TRC_MSG(BTLOG_MBT_MAP_INT_DISCONNECT_IN_PROGRESS, "[MBT][MAP] btmtk_maps_int_disconnect: already in progress")
    TRC_MSG(BTLOG_MBT_MAP_WRITE_XML_ERROR, "[MBT][MAP] Create XML failed (storageType=%d)")
    TRC_MSG(BTLOG_MBT_MAP_WRITE_FILE_ERROR, "[MBT][MAP] Buffer to file failed (storageType=%d)")
    TRC_MSG(BTLOG_MBT_MAP_WRITE_VCARD_ERROR, "[MBT][MAP] Create vCard failed (storageType=%d)")
    TRC_MSG(BTLOG_MBT_MAP_PARSE_VCARD_ERROR, "[MBT][MAP] Parse vCard failed (storageType=%d)")
    TRC_MSG(BTLOG_MBT_MAP_PARSE_VCARD_WRONG_STORAGE, "[MBT][MAP] Parse vCard wrong storageType=%d")
    TRC_MSG(BTLOG_MBT_MAP_HANDLE_ACTIVATE_CNF, "[MBT][MAP] btmtk_maps_handle_activate_cnf: result=%d")
    TRC_MSG(BTLOG_MBT_MAP_HANDLE_DEACTIVATE_CNF, "[MBT][MAP] btmtk_maps_handle_deactivate_cnf: result=%d")
    TRC_MSG(BTLOG_MBT_MAP_HANDLE_REGISTER_CNF, "[MBT][MAP] btmtk_maps_handle_register_cnf: result=%d, MAS instance=%d")
    TRC_MSG(BTLOG_MBT_MAP_HANDLE_DEREGISTER_CNF, "[MBT][MAP] btmtk_maps_handle_deregister_cnf: result=%d, MAS instance=%d")
    TRC_MSG(BTLOG_MBT_MAP_HANDLE_AUTHORIZE_IND, "[MBT][MAP] btmtk_maps_handle_authorize_ind: %02X:%02X:%02X:%02X:%02X:%02X")
    TRC_MSG(BTLOG_MBT_MAP_HANDLE_CONNECT_IND, "[MBT][MAP] btmtk_maps_handle_connect_ind: conn=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X, MAS instance=%d")
    TRC_MSG(BTLOG_MBT_MAP_HANDLE_SET_FOLDER_IND, "[MBT][MAP] btmtk_maps_handle_set_folder_ind: conn=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X, flag=%d")
    TRC_MSG(BTLOG_MBT_MAP_CONNECTION_NOT_FOUND, "[MBT][MAP] SDC entry not found")
    TRC_MSG(BTLOG_MBT_MAP_FOLDER_NOT_FOUND, "[MBT][MAP] Folder not found")
    TRC_MSG(BTLOG_MBT_MAP_HANDLE_GET_FOLDER_LIST_IND, "[MBT][MAP] btmtk_maps_handle_get_folder_listing_ind: MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X, offset=%d, size=%d")
    TRC_MSG(BTLOG_MBT_MAP_HANDLE_GET_MSG_LIST_IND, "[MBT][MAP] btmtk_maps_handle_get_message_listing_ind: MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X, offset=%d, size=%d")
    TRC_MSG(BTLOG_MBT_MAP_HANDLE_GET_MSG_IND, "[MBT][MAP] btmtk_maps_handle_get_message_ind: MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X, fraction=%d")
    TRC_MSG(BTLOG_MBT_MAP_HANDLE_PUSH_MSG_IND, "[MBT][MAP] btmtk_maps_handle_push_message_ind: MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X")
    TRC_MSG(BTLOG_MBT_MAP_HANDLE_SET_NOTIF_IND, "[MBT][MAP] btmtk_maps_handle_set_notif_registration_ind: MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X, enable=%d")
    TRC_MSG(BTLOG_MBT_MAP_HANDLE_SET_MSG_STATUS_IND, "[MBT][MAP] btmtk_maps_handle_set_message_status_ind: MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X, status=%d")
    TRC_MSG(BTLOG_MBT_MAP_HANDLE_UPDATE_INBOX_IND, "[MBT][MAP] btmtk_maps_handle_update_inbox_ind: MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X")
    TRC_MSG(BTLOG_MBT_MAP_HANDLE_MNS_CONNECT_CNF, "[MBT][MAP] btmtk_maps_handle_mns_connect_cnf: result=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X")
    TRC_MSG(BTLOG_MBT_MAP_HANDLE_MNS_SEND_EVENT_CNF, "[MBT][MAP] btmtk_maps_handle_mns_send_event_cnf: result=%d, MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X")
    TRC_MSG(BTLOG_MBT_MAP_HANDLE_MNS_DISCONNECT_IND, "[MBT][MAP] btmtk_maps_handle_mns_disconnect_ind: addr=%02X:%02X:%02X:%02X:%02X:%02X")
    TRC_MSG(BTLOG_MBT_MAP_HANDLE_MNS_DISCONNECT_CNF, "[MBT][MAP] btmtk_maps_handle_mns_disconnect_cnf: result=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X")
    TRC_MSG(BTLOG_MBT_MAP_HANDLE_ABORT_CNF, "[MBT][MAP] btmtk_maps_handle_abort_cnf: result=%d, MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X")
    TRC_MSG(BTLOG_MBT_MAP_HANDLE_DISCONNECT_CNF, "[MBT][MAP] btmtk_maps_handle_disconnect_cnf: result=%d, MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X")
    TRC_MSG(BTLOG_MBT_MAP_HANDLE_DISCONNECT_IND, "[MBT][MAP] btmtk_maps_handle_disconnect_cnf: MAS instance=%d, addr=%02X:%02X:%02X:%02X:%02X:%02X")
    TRC_MSG(BTLOG_MBT_MAP_WRITE_LIST, "[MBT][MAP] Write folder/message list: start entry=%d, writing num=%d")

TRC_MSG(BT_MBT_TRACE_END,"BT_MBT_TRACE_END")  /* MBT LOG FILTER. DO NOT MODIFY */
/* MBT TRACE END */

/* BLE TRACE START */
TRC_MSG(BT_BLE_TRACE_START,"BT_BLE_TRACE_START")  /* LOG FILTER. DO NOT MODIFY */
    TRC_MSG(BT_LE_ADFLAG, "bdc->adFlag=0x%x, bdc->devType=%d")
    TRC_MSG(BT_LE_CURRENT_INQUIRY_TYPE, "current inquiry type=0x%x")

    TRC_MSG(BT_MEIF_ME_LE_INQUIRY, "ME_LE_Inquiry(): stackState=%d")
    TRC_MSG(BT_MEIF_ME_LE_CANCELINQUIRY, "ME_LE_CancelInquiry(): stackState=%d")
    TRC_MSG(BT_MEIF_ME_LE_GETREMOTEDEVICENAME, "ME_LE_GetRemoteDeviceName(): stackState=%d, tokenID=%d")
    TRC_MSG(BT_MEIF_ME_LE_GETREMOTEDEVICENAME1, "cb=0x%x, isOnOpList=%d, isOnCmdList=%d")
    TRC_MSG(BT_MEIF_ME_LE_CREATELINK, "ME_LE_CreateLink(): stackState=%d, privacy=%d")
    TRC_MSG(BT_MEIF_ME_LE_CREATELINK1, "ME_LE_CreateLink(): remDev->state=0x%x")
    TRC_MSG(BT_DEVICE_NOT_FOUND, "device not found, %d")
    TRC_MSG(BT_MEIF_ME_LE_DISCLINK, "ME_LE_DiscLink(): stackState=%d, reason=0x%x")
    TRC_MSG(BT_MEIF_ME_LE_ENCRYPTLINK, "ME_LE_EncryptLink(): stackState=%d, state=0x%x, authState=0x%x, encryptState=0x%x")
    TRC_MSG(BT_MEIF_ME_LE_ENCRYPTLINK_RESTART, "ME_LE_EncryptLink(): restart")
    TRC_MSG(BT_MEIF_ME_LE_SIGNDATA, "ME_LE_SignData(): stackState=%d")
    TRC_MSG(BT_MEIF_ME_LE_SIGNDATA1, "signCounter=%d")
    TRC_MSG(BT_MEIF_ME_LE_VERIFYSIGNDATA, "ME_LE_VerifySignedData(): stackState=%d")

    TRC_MSG(BT_MELE_LEALLOCHCITOKEN, "LeAllocHciToken(): cmd=0x%x")
    TRC_MSG(BT_MELE_LEUTILCOMPOSEADVERTISEDATA, "leUtilComposeAdvertiseData(): EirFlag=0x%x, nameLen=%d")
    TRC_MSG(BT_MELE_LEHCISETEVENTMASK, "LeHciSetEventMask(): 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x")
    TRC_MSG(BT_MELE_LEHCIREADBUFFERSIZE, "LeHciReadBufferSize()")
    TRC_MSG(BT_MELE_LEHCIREADLOCALFEATURES, "LeHciReadLocalFeatures()")
    TRC_MSG(BT_MELE_LEHCISETRANDOMADDRESS, "LeHciSetRandomAddress(): addr=0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x")
    TRC_MSG(BT_MELE_LEHCISETADVERTISEPARM, "LeHciSetAdvertiseParm(): INTmin=0x%x, INTmax=0x%x, adv==0x%x, OaddrType=%d, DaddrType=%d, map=0x%x, filter=0x%x")
    TRC_MSG(BT_MELE_LEHCIREADADVERTISETXPOWER, "LeHciReadAdvertiseTxPower()")
    TRC_MSG(BT_MELE_LEHCISETADVERTISEDATA, "LeHciSetAdvertiseData(): dataLen=%d")
    TRC_MSG(BT_MELE_LEHCISETSCANRSPDATA, "LeHciSetScanRspData(): dataLen=%d")
    TRC_MSG(BT_MELE_LEHCISETADVERTISEENABLE, "LeHciSetAdvertiseEnable(): enable=%d")
    TRC_MSG(BT_MELE_LEHCISETSCANPARM, "LeHciSetScanParm(): type=0x%x, interval=0x%x, window=0x%x, OaddrType=0x%x, filter=0x%x")
    TRC_MSG(BT_MELE_LEHCISETSCANENABLE, "LeHciSetScanEnable(): enable=%d, filterDup=%d")
    TRC_MSG(BT_MELE_LEHCICREATECONNECTION, "LeHciCreateConnection(): INT=0x%x, WIN=0x%x, filter=0x%x, PaddrType=0x%x, OaddrType=0x%x")
    TRC_MSG(BT_MELE_LEHCICREATECONNECTION2, "INTmin=0x%x, INTmax=0x%x, latency=0x%x, SupTO=0x%x, CEMin=0x%x, CEMax=0x%x")
    TRC_MSG(BT_MELE_LEHCICREATECONNECTIONCANCEL, "LeHciCreateConnectionCancel()")
    TRC_MSG(BT_MELE_LEHCIREADWHITELISTSIZE, "LeHciReadWhiteListSize()")
    TRC_MSG(BT_MELE_LEHCICLEARWHITELIST, "LeHciClearWhiteList()")
    TRC_MSG(BT_MELE_LEHCIADDTOWHITELIST, "LeHciAddToWhiteList(): addrType=0x%x, addr=0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x")
    TRC_MSG(BT_MELE_LEHCIREMOVEFROMWHITELIST, "LeHciRemoveFromWhiteList(): addrType=0x%x, addr=0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x")
    TRC_MSG(BT_MELE_LEHCIUPDATECONNECTION, "LeHciUpdateConnection(): handle=0x%x, INTmin=0x%x, INTmax=0x%x, latency=0x%x, sTimeout=0x%x, ceMin=0x%x, ceMax=0x%x")
    TRC_MSG(BT_MELE_LEHCISETCHANNELMAP, "LeHciSetChannelMap(): map=0x%x, 0x%x, 0x%x, 0x%x, 0x%x")
    TRC_MSG(BT_MELE_LEHCIREADCHANNELMAP, "LeHciReadChannelMap(): handle=0x%x")
    TRC_MSG(BT_MELE_LEHCIREADREMOTEFEATURES, "LeHciReadRemoteFeatures(): handle=0x%x")
    TRC_MSG(BT_MELE_LEHCIAES128ENCRYPT, "LeHciAES128Encrypt(): cb=0x%x")
    TRC_MSG(BT_MELE_LEHCIRAND, "LeHciRand(): cb=0x%x")
    TRC_MSG(BT_MELE_LEHCISTARTENCRYPTION, "LeHciStartEncryption(): handle=0x%x, random=0x%x, ediv=0x%x")
    TRC_MSG(BT_MELE_LEHCILTKREQUESTREPLY, "LeHciLTKRequestReply(): handle=0x%x")
    TRC_MSG(BT_MELE_LEHCILTKREQUESTNEGREPLY, "LeHciLTKRequestNegReply(): handle=0x%x")
    TRC_MSG(BT_MELE_LEHCIREADSUPPORTEDSTATES, "LeHciReadSupportedStates()")
    TRC_MSG(BT_MELE_LEHANDLEOP, "LeHandleOp(): event=0x%x, cmd=0x%x, parmLen=%d")
    TRC_MSG(BT_MELE_LEHANDLEOP2, "errCode=0x%x")
    TRC_MSG(BT_MELE_HANDLELEADVERTISEREPORT, "HandleLeAdvertiseReport(): len=%d, reportNo=%d")
    TRC_MSG(BT_MELE_HANDLELEADVERTISEREPORT1, "advType=0x%x, size=%d")
    TRC_MSG(BT_MELE_HANDLELEADVERTISEREPORT2, "addrType=0x%x, rssi=%d")
    TRC_MSG(BT_MELE_HANDLELECONNECTCOMPLETE, "HandleLeConnectComplete(): status=0x%x, handle=0x%x 0x%x, role=%d, pAddrType=%d")
    TRC_MSG(BT_MELE_HANDLELECONNECTCOMPLETE2, "handle=0x%x, role(m0s1)=%d, superTO=0x%x")
    TRC_MSG(BT_MELE_HANDLELEREADREMOTEFEATURE, "HandleLeReadRemoteFeature(): status=0x%x, handle=0x%x")
    TRC_MSG(BT_MELE_HANDLELELTKREQUEST, "HandleLeLTKRequest(): handle=0x%x")
    TRC_MSG(BT_MELE_HANDLELELTKREQUEST1, "authState=0x%x")
    TRC_MSG(BT_MELE_LEHANDLEEVENTS, "LeHandleEvents(): subevent=0x%x")
    TRC_MSG(BT_MELE_LEHANDLECONNECTTIMEOUT, "LeHandleConnectTimeout()")
    TRC_MSG(BT_MELE_LEHCIRECEIVERTEST, "LeHciReceiverTest(): rxFreq=0x%x")
    TRC_MSG(BT_MELE_LEHCITRANSMITTERTEST, "LeHciTransmitterTest(): txFreq=0x%x, len=0x%x, payload=0x%x")
    TRC_MSG(BT_MELE_LEHCITESTEND, "LeHciTestEnd()")

    TRC_MSG(BT_SM_SM_INIT, "SM_Init()")
    TRC_MSG(BT_SM_SM_HANDLEREQTIMEOUT, "SM_HandleReqTimeout()")
    TRC_MSG(BT_SM_SM_GENLTK, "SM_GenLTK(): keySize=%d")
    TRC_MSG(BT_SM_SM_GENEDIV, "SM_GenEDIV(): ediv=0x%x")
    TRC_MSG(BT_SM_SM_GENCSRK, "SM_GenCSRK()")
    TRC_MSG(BT_SM_SM_GENIRK, "SM_GenIRK()")
    TRC_MSG(BT_SM_SM_GETSESSION_NOT_FOUND, "SM_GetSession(): not found")
    TRC_MSG(BT_SM_SM_STARTSESSION, "SM_StartSession(): type(b0p1)=%d, addr=0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x")
    TRC_MSG(BT_SM_SM_UPDATESESSION, "SM_UpdateSession()")
    TRC_MSG(BT_SM_SM_UPDATESESSIONFSM, "SM_UpdateSessionFSM(): GCstate=%d")
    TRC_MSG(BT_SM_SM_ENDSESSION, "SM_EndSession(): status=0x%x, smState=%d")
    TRC_MSG(BT_SM_SM_SETPAIRINFO, "SM_SetPairInfo(): type(b0p1)=%d, ioCap=%d, oob=%d, auth=0x%x, keySize=%d, initKey=0x%x, respKey=0x%x")
    TRC_MSG(BT_SM_SM_BOND, "SM_Bond(): bdc->under_used=0x%x, addr=0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x")
    TRC_MSG(BT_SM_SM_PASSKEYENTRY, "SM_PasskeyEntry(): addr=0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, accept=%d, passkey=%d")
    TRC_MSG(BT_SM_SM_SETOOBDATA, "SM_SetOobData(): addr=0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, accept=%d")
    TRC_MSG(BT_SM_SM_PASSKEYENTRY1, "type(b0p1)=%d, smState=%d")
    TRC_MSG(BT_SM_SM_HANDLEEVENT, "SM_HandleEvent(): event=%d, errCode=0x%x")
    TRC_MSG(BT_SM_SM_PHASEFSM_SESSION_NOT_FOUND, "SM_Phase%dFSM(): session not found")
    TRC_MSG(BT_SM_SM_PHASEFSM, "SM_PhaseFSM(): type(b0p1)=%d, smState=%d")
    TRC_MSG(BT_SM_SM_PHASE3KEYRECEIVE, "SM_Phase3_KeyReceive(): event=%d, allKeys=0x%x")
    TRC_MSG(BT_SM_SM_PHASE3KEYSEND, "SM_Phase3_KeySend(): sent=0x%x, allKeys=0x%x")
    TRC_MSG(BT_SM_SM_CMACFSM, "SM_CMAC_FSM(): cmac state=%d")
    TRC_MSG(BT_SM_SM_CMAC, "SM_CMAC(): mLen=%d, tLen=%d")
    TRC_MSG(BT_SM_SM_CMACVERIFYCB, "SM_CMAC_VerifyCB(): errCode=0x%x")
    TRC_MSG(BT_SM_SM_CMACVERIFY, "SM_CMAC_Verify()")
    TRC_MSG(BT_SM_SM_RECVDATA, "SM_RecvData: PduType=0x%x, smState=%d, encryptState=0x%x")
    TRC_MSG(BT_SM_SM_L2CAPCALLBACK, "SM_L2capCallback: l2cap event=%d, smState=%d")
    TRC_MSG(BT_SM_SM_HANDLEDISCDELAYTIMEOUT, "SM_HandleDiscDelayTimeout(): to-be-sent=%d, delay=%d")

    TRC_MSG(BT_SMP_SMP_INIT, "SMP_Init()")
    TRC_MSG(BT_SMP_SM_GETPAIRMODELBYIO, "SM_GetPairModelByIo(): iIO=0x%x, rIO=0x%x")
    TRC_MSG(BT_SMP_SM_GETPASSKEYROLE, "SM_GetPasskeyRole(): type(b0p1)=%d, iIO=0x%x, rIO=0x%x")
    TRC_MSG(BT_SMP_SM_SENDPAIRREQ, "SM_SendPairReq(): io=0x%x, oob=%d, bond=%d, mitm=%d, keySize=%d, distKey=0x%x,  respKey=0x%x")
    TRC_MSG(BT_SMP_SM_SENDPAIRRSP, "SM_SendPairRsp(): io=0x%x, oob=%d, bond=%d, mitm=%d, keySize=%d, distKey=0x%x,  respKey=0x%x")
    TRC_MSG(BT_SMP_SM_SENDPAIRCONFIRM, "SM_SendPairConfirm()")
    TRC_MSG(BT_SMP_SM_SENDPAIRRANDOM, "SM_SendPairRandom()")
    TRC_MSG(BT_SMP_SM_SENDPAIRFAILED, "SM_SendPairFailed(): reason=0x%x")
    TRC_MSG(BT_SMP_SM_SENDENCRYPTINFO, "SM_SendEncryptInfo()")
    TRC_MSG(BT_SMP_SM_SENMASTERIDENTITY, "SM_SendMasterIdentity(): ediv=%d, rand=%ul")
    TRC_MSG(BT_SMP_SM_SENDIDENTITYINFO, "SM_SendIdentityInfo()")
    TRC_MSG(BT_SMP_SM_SENDIDENTITYADDRINFO, "SM_SendIdentityAddrInfo(): addrType=%d, addr=0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x")
    TRC_MSG(BT_SMP_SM_SENDSIGNINGINFO, "SM_SendSigningInfo()")
    TRC_MSG(BT_SMP_SM_SENDSECURITYREQ, "SM_SendSecurityReq(): bond=%d, mitm=%d")
    TRC_MSG(BT_SMP_SM_CALCPAIRCONFIRMFSM, "SM_CalcPairConfirm_FSM(): encryptCount=%d, errCode=0x%x")
    TRC_MSG(BT_SMP_SM_CALCPAIRCONFIRM, "SM_CalcPairConfirm(): iat=%d, rat=%d, tk, rand, preq, pres")
    TRC_MSG(BT_SMP_SM_CALCSTK, "SM_CalcSTK(): tk, srand, mrand")
    TRC_MSG(BT_SMP_SM_RANDFSM, "SM_Rand_FSM(): len=%d, count=%d")
    TRC_MSG(BT_SMP_SM_RAND, "SM_Rand(): len=%d")

TRC_MSG(BT_BLE_TRACE_END, "BT_BLE_TRACE_END")  /* LOG FILTER. DO NOT MODIFY */
/* BLE TRACE END */

    TRC_MSG(FTP_CLIENT_CREATE_BUFFER, "[GOEP] create Client:0x%x pl2capRawData:0x%x")
    TRC_MSG(FTP_CLIENT_GOEP_CALLBACK, "[FTP][UTIL][CHECK] check_progress curr:%d total:%d last:%d ")
    TRC_MSG(FTP_UTIL_READ_RESULT, "[FTP][M] Read - pre-read result:%d read:%d start:%d")
    TRC_MSG(FTP_UTIL_OBSREAD_PARAM, "[FTPCFLOW] FTPOBS_Read obsh:0x%x ocx:0x%x maxlen:%d")
    TRC_MSG(FTP_UTIL_OBSWRITE_PARAM, "[FTPCFLOW] FTPOBS_Write obsh:0x%x ocx:0x%x inputlen:%d")
    TRC_MSG(FTP_UTIL_CHECK_PROGRESS, "[FTP][UTIL][CHECK] check_progress curr:%d total:%d last:%d ")
    TRC_MSG(FTP_UTIL_GET_FILESIZE, "[FTP] btmtk_fs_get_filesize_ucs2 ret:%d size:%d")
    TRC_MSG(FTP_UTIL_FLUSH, "[FTPCFLOW] FTPOBS_Flush obsh:0x%x ocx:0x%x ")    
    TRC_MSG(FTP_START_ABORT_TIMER, "[FTP] start a abort timer to disconnect 0x%x")        
    TRC_MSG(FTP_STOP_ABORT_TIMER, "[FTP] stop abortTimer 0x%x ")
    TRC_MSG(FTP_ADP_CALLBACK, "[FTP] ftpsAdpCallback GOEP_Event:%d ")
    TRC_MSG(FTP_GOEP_SERVER_CALLBACK, "[FTP] FtpGoepServerCallback GOEP_EVENT=%d, GOEP_OPER=%d, goep_conn_id=%d")
    TRC_MSG(FTP_GOEP_CLIENT_CONTINUE_RESULT, "[SRM] GOEP_ClientContinue status:%d")
    TRC_MSG(FTP_UTIL_CHECK_PROGRESS_RET, "[FTP][UTIL] check_progress curr:%d total:%d last:%d ret:%d")
    TRC_MSG(FTP_RESERVED_15, "FTP_RESERVED_15")
    TRC_MSG(FTP_RESERVED_16, "FTP_RESERVED_16")
    TRC_MSG(FTP_RESERVED_17, "FTP_RESERVED_17")
    TRC_MSG(FTP_RESERVED_18, "FTP_RESERVED_18")
    TRC_MSG(FTP_RESERVED_19, "FTP_RESERVED_19")
    TRC_MSG(FTP_RESERVED_20, "FTP_RESERVED_20")
    TRC_MSG(GOEP_L2CAP_RAWDATA_BUFF, "[GOEP] RegisterClient pl2capRawDataAddr is 0x%x ")
    TRC_MSG(GOEP_CLIENT_SRM_FLAG, "[OBEX:] OCC(srm_client):0x%x")
    TRC_MSG(GOEP_L2CAP_CHANNEL_STATUS, "[GOEP] RegisterClient pl2capRawDataAddr is 0x%x ")
    TRC_MSG(GOEP_SERVER_L2CAP_RAWDATA_BUFF, "[GOEP][SERV] RegisterServer pl2capRawDataAddr is 0x%x")
    TRC_MSG(GOEP_CLIENT_SENDCOMMAND, "[OBEX][CLIENT] ClientSendCommand OCH(txLength)=%d OCC(txLength)=%d")    
    TRC_MSG(GOEP_SERVER_PROCESS_PUT_OPER, "GOEP_RESERVED_6")
    TRC_MSG(GOEP_RESERVED_7, "GOEP_RESERVED_7")
    TRC_MSG(GOEP_RESERVED_8, "GOEP_RESERVED_8")
    TRC_MSG(GOEP_RESERVED_9, "GOEP_RESERVED_9")
    TRC_MSG(GOEP_RESERVED_10, "GOEP_RESERVED_10")
    TRC_MSG(GOEP_RESERVED_11, "GOEP_RESERVED_11")
    TRC_MSG(GOEP_RESERVED_12, "GOEP_RESERVED_12")
    TRC_MSG(GOEP_RESERVED_13, "GOEP_RESERVED_13")
    TRC_MSG(GOEP_RESERVED_14, "GOEP_RESERVED_14")
    TRC_MSG(GOEP_RESERVED_15, "GOEP_RESERVED_15")
    TRC_MSG(GOEP_RESERVED_16, "GOEP_RESERVED_16")
    TRC_MSG(GOEP_RESERVED_17, "GOEP_RESERVED_17")
    TRC_MSG(GOEP_RESERVED_18, "GOEP_RESERVED_18")
    TRC_MSG(GOEP_RESERVED_19, "GOEP_RESERVED_19")
    TRC_MSG(GOEP_RESERVED_20, "GOEP_RESERVED_20")
    TRC_MSG(L2CAP_CHANNEL_DUMP_INFO, "%d: localCid:%02x, remoteCid:%02x, channel state:%02x")
    TRC_MSG(L2CAP_REGULAR_MOVE_AMP_PARAM, "a,b,c:%d,%d,%d,%d")
    TRC_MSG(L2CAP_REGULAR_MOVE_AMP_TIMER, "L2Cap_StartRegularMoveAMPChannelTimer")
    TRC_MSG(L2CAP_RESERVED_4, "L2CAP_RESERVED_4")
    TRC_MSG(L2CAP_RESERVED_5, "L2CAP_RESERVED_5")
    TRC_MSG(L2CAP_RESERVED_6, "L2CAP_RESERVED_6")
    TRC_MSG(L2CAP_RESERVED_7, "L2CAP_RESERVED_7")
    TRC_MSG(L2CAP_RESERVED_8, "L2CAP_RESERVED_8")
    TRC_MSG(L2CAP_RESERVED_9, "L2CAP_RESERVED_9")
    TRC_MSG(L2CAP_RESERVED_10, "L2CAP_RESERVED_10")
    TRC_MSG(L2CAP_RESERVED_11, "L2CAP_RESERVED_11")
    TRC_MSG(L2CAP_RESERVED_12, "L2CAP_RESERVED_12")
    TRC_MSG(L2CAP_RESERVED_13, "L2CAP_RESERVED_13")
    TRC_MSG(L2CAP_RESERVED_14, "L2CAP_RESERVED_14")
    TRC_MSG(L2CAP_RESERVED_15, "L2CAP_RESERVED_15")
    TRC_MSG(L2CAP_RESERVED_16, "L2CAP_RESERVED_16")
    TRC_MSG(L2CAP_RESERVED_17, "L2CAP_RESERVED_17")
    TRC_MSG(L2CAP_RESERVED_18, "L2CAP_RESERVED_18")
    TRC_MSG(L2CAP_RESERVED_19, "L2CAP_RESERVED_19")
    TRC_MSG(L2CAP_RESERVED_20, "L2CAP_RESERVED_20")
    TRC_MSG(DDB_LINKKEY_RECORD, "linkkey:[%02x%02x%02x%02x%02x%02x]%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x")
    
    

END_TRACE_MAP(MOD_BT)

#endif /* _BT_TRC_H */



