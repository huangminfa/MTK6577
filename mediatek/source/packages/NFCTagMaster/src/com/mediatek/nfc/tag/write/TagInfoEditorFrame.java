
package com.mediatek.nfc.tag.write;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.nfc.NdefMessage;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.LinearLayout;

import com.mediatek.nfc.tag.R;
import com.mediatek.nfc.tag.record.ParsedNdefRecord;
import com.mediatek.nfc.tag.utils.Utils;

/**
 * A frame class which will be used by each tag type edit operation This frame
 * include a commit button, and the type-special view will be generated by each
 * tag own.
 */
public class TagInfoEditorFrame extends Activity {
    private static final String TAG = "NfcTag/TagInfoEditorFrame";

    private LinearLayout mSubContentView = null;

    private int mTagType;

    private ParsedNdefRecord mRecord;

    private CheckBox mLockTagCheckBox = null;

    private SharedPreferences mSharedPreferences = null;

    private static final int DLG_ALERT_LOCK = 1;

    LinearLayout mWriteBtnLayout;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        Utils.logv(TAG, "-->onCreate()");
        super.onCreate(savedInstanceState);
        setContentView(R.layout.tag_editor_frame);

        mSubContentView = (LinearLayout) findViewById(R.id.sub_content);
        mWriteBtnLayout = (LinearLayout) findViewById(R.id.write_btn_view);
        mWriteBtnLayout.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                beginToWrite();
            }
        });
        mLockTagCheckBox = (CheckBox) findViewById(R.id.lock_tag);
        mLockTagCheckBox.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                if (v instanceof CheckBox) {
                    CheckBox cb = (CheckBox) v;
                    boolean isChecked = cb.isChecked();
                    if (isChecked) {
                        showDialog(DLG_ALERT_LOCK);
                    } else {
                        mSharedPreferences.edit().putBoolean(Utils.KEY_LOCK_TAG, false).commit();
                    }
                }
            }
        });
        mSharedPreferences = getSharedPreferences(Utils.CONFIG_FILE_NAME, Context.MODE_PRIVATE);
        mSharedPreferences.edit().putBoolean(Utils.KEY_LOCK_TAG, false).commit();

        mTagType = getIntent().getIntExtra("type", Utils.TAG_TYPE_UNKNOWN);
        log("Tag type = " + mTagType);

        mRecord = ParsedNdefRecord.getRecordInstance(this, mTagType);
        View editView = mRecord.getEditView();
        editView.setBackgroundResource(R.drawable.bg_info);

        mSubContentView.removeAllViews();
        if (editView != null) {
            log("Add sub view edit info area");
            mSubContentView.addView(editView, new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.FILL_PARENT, ViewGroup.LayoutParams.FILL_PARENT));
        }

        // TODO temp solution to set activity title
        setTitle(mRecord.getTagTypePreference().getTitle());
    }

    @Override
    protected void onResume() {
        Utils.logv(TAG, "-->onResume()");
        //Since tag read page and tag write page may use the same tag record instance,
        //when this page come back, update the context object in tag record
        mRecord = ParsedNdefRecord.getRecordInstance(this, mTagType);
        mLockTagCheckBox.setChecked(mSharedPreferences.getBoolean(Utils.KEY_LOCK_TAG, false));
        super.onResume();
    }

    @Override
    protected void onDestroy() {
        Utils.logv(TAG, "-->onDestroy()");
        super.onDestroy();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        mRecord.onCreateOptionsMenu(menu);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        mRecord.onOptionsItemSelected(item);
        return super.onOptionsItemSelected(item);
    }

    @Override
    protected Dialog onCreateDialog(int id) {
        if (id == DLG_ALERT_LOCK) {
            AlertDialog.Builder builder = new AlertDialog.Builder(this).setIcon(
                    android.R.drawable.ic_dialog_alert).setTitle(
                    android.R.string.dialog_alert_title).setMessage(R.string.msg_lock_tag_warning)
                    .setPositiveButton(android.R.string.yes, new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            mLockTagCheckBox.setChecked(true);
                            mSharedPreferences.edit().putBoolean(Utils.KEY_LOCK_TAG, true).commit();
                        }
                    }).setNegativeButton(android.R.string.no,
                            new DialogInterface.OnClickListener() {
                                public void onClick(DialogInterface dialog, int which) {
                                    mLockTagCheckBox.setChecked(false);
                                }
                            });
            return builder.create();
        }
        return null;
    }

    @Override
    protected void onNewIntent(Intent intent) {
        Utils.logv(TAG, "-->onNewIntent()");
        super.onNewIntent(intent);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        mRecord.onActivityResultCallback(requestCode, resultCode, data);
    }

    private void beginToWrite() {
        log("-->beginToWrite(), tagType = " + mTagType);
        NdefMessage ndefMessage = mRecord.getNewNdefMessage();
        if (ndefMessage != null) {
            Intent intent = new Intent(this, WriteTagActivity.class);
            intent.putExtra("ndef_message", ndefMessage);
            startActivity(intent);
        } else {
            loge("Fail to get ndef message");
        }
        log("<--beginToWrite()");
    }

    public void log(String msg) {
        Utils.logd(TAG, msg);
    }

    public void loge(String msg) {
        Utils.loge(TAG, msg);
    }
}
