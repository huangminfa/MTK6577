#!/bin/sh

LANG=C

if [ "$1" == "-h" ]
then
    cat <<- EOH
		    Usage: $0 [-p] [folder]
		      -p option prints out unused resources, otherwise a total count is printed
		      folder option causes only that app folder to be scanned.
		EOH
    exit
fi

showall=no
if [ "$1" == "-p" ]
then
    showall=yes
    shift
fi

echo -e '[Check Res][Unused Res] ' "PackageName\t" 'FileName'
apps=$1
if [ "$apps" == "" ]
then
    cat <<- EOH
		    Usage: $0 [-p] [folder]
		      -p option prints out unused resources, otherwise a total count is printed
		      folder option causes only that app folder to be scanned.
		EOH
    exit
fi

#if [ "$apps" == "" ]
#then
    #apps=$ANDROID_BUILD_TOP/packages/apps/*
#    apps=packages/apps/*
#fi

for resfolder in $(echo $(find $apps -type d -name res))
do
	dirnameres=$(dirname $resfolder)
#done

#for app in $apps
for app in $dirnameres
do
	#echo $app
#    echo '-----------------------------------------------------------'
    if [ "$app" == "." ]
    then
        app=$(pwd)
		#app=`pwd`
    fi
    if [ -d $app/res ]
    then
		appname=$(basename $app)
#		echo $appname
        resources=
        #for res in $(echo $app/res/* $(find $ANDROID_BUILD_TOP/vendor -type d -wholename $ANDROID_BUILD_TOP/vendor/*/$appname/res | grep overlay))
		for res in $(echo $app/res/* $(find vendor -type d -wholename vendor/*/$appname/res | grep overlay))
        do
            resources="$resources $(echo $res | grep -v '\-mcc\|[a-z]*-[a-z][a-z]$\|[a-z]*-[a-z][a-z]-.*')"
		done
        sources=$app/src
        if [ -d $app/tests ]
        then
            sources="$sources $app/tests"
        fi
        if [ -d $app/samples ]
        then
            sources="$sources $app/samples"
        fi

        # find the R.java file that contains all the generated resource identifiers
        #rDotJava=$(find $ANDROID_BUILD_TOP/out/target/common/obj/APPS/${appname}_intermediates/ -name R.java)
        if [ -d out/target/common/obj/APPS/${appname}_intermediates/ ]
		then
		    rDotJava=$(find out/target/common/obj/APPS/${appname}_intermediates/ -name R.java)
		else
#			echo -e '[Check Res][Unused Res] ' $appname '  ' "Could not find out/target/common/obj/APPS/${appname}_intermediates/. No such file or directoty. "
			continue
		fi

        # Simplistically process the content of the file to get the names of all the constants,
        # and try to find a reference to each constant.

        # First take all the input files and concatenate them, removing newlines. This allows us to
        # find expressions that are broken up over multiple lines, i.e. R.drawable.\nsomeconstant
        find $resources $sources $app/AndroidManifest.xml -type f -print |xargs cat | tr -d '\n ' > /tmp/everything$$

		# Now look for each of the constants in the contatenated file.
        for i in $(cat $rDotJava | grep "\w*=0x\d*" | sed 's/ *public static final int //' | sed 's/=0x.*//')
        do
            # Since periods in the names get translated to underscores in R.java, and you can actually
            # refer to such constants from java by using an underscore instead of a period, we also
            # replace all underscores with a pattern that will match periods and underscores.
            p=$(echo $i | sed 's/_/[\\._]/g')
            echo $i $(grep -cw R\\..*\\.$i\\\|@style/$p\\\|@drawable/$p\\\|@anim/$p\\\|@color/$p\\\|@xml/$p\\\|@layout/$p\\\|@menu/$p\\\|@+id/$p\\\|@array/$p\\\|@string/$p\\\|@mipmap/$p\\\|@integer/$p\\\|@dimen/$p\\\|\[a-z\]\*:$p\\\|enumname=\"$p\\\|\<item\>$p\< < /tmp/everything$$)
        done | grep " 0$" | {
            # this block gets as its input a list of constants for which no references were found, one per line
            if [ "$showall" == "yes" ]
            then
				packagename=$(basename $app)
				resourcenamelist=$(cat | awk '{print $1}')
#				echo -e '[Check Res][Unused Res] ' "PackageName\t" 'FileName'
				for j in $resourcenamelist
				do
					grepresourcepathbystring=$(grep -rlw "$j" $resources)
					if [ "$grepresourcepathbystring" != "" ]
					then
						a=$(grep -l "name=\"$j\"" $grepresourcepathbystring)
						if [ "$a" != "" ]
						then
							for b in $a
							do
							    echo -e '[Check Res][Unused Res] ' $packagename '  ' $b  ':' $j
							done
						else
							for c in $(find $resources -name $j.*)
							do
							    echo -e '[Check Res][Unused Res] ' $packagename '  ' $c ':' $j
							done
						fi
				    else
						findresourcepathbyname=$(find $resources -name $j.*)
					    if [ "$findresourcepathbyname" != ""  ]
						then
							for singleresources in $findresourcepathbyname
							do
						        echo -e '[Check Res][Unused Res] ' $packagename '  ' $singleresources ':' $j
						    done
						    #echo -e '[Check Res][Unused Res] ' $packagename '  ' $findresourcepathbyname
						else
							echo -e '[Check Res][Unused Res] ' $packagename '  ' '!Warning:Failure to find the path. Please find it by the other method. ResourceName : ' $j
						fi
					fi
				done
            else
				echo '-------------------------------------------------------'
				echo $appname
				echo '[Index]' '[ResName]' '[UsedTimes]'
				awk '{ print  NR,$0 }'
				#cat >  /tmp/filter$$
				#count=$(cat /tmp/filter$$ | wc -l)
                #if [ "$count" != "0" ]
                #then
				#	cat /tmp/filter$$
                #    echo $app: $count unused resources
                #fi
            fi
        }
		#rm /tmp/filter$$
        rm /tmp/everything$$
	else
		echo -e 'Could not find resource folder in '$app
    fi
done

done
