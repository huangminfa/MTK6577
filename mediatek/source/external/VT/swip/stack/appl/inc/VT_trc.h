/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein is
 * confidential and proprietary to MediaTek Inc. and/or its licensors. Without
 * the prior written permission of MediaTek inc. and/or its licensors, any
 * reproduction, modification, use or disclosure of MediaTek Software, and
 * information contained herein, in whole or in part, shall be strictly
 * prohibited.
 * 
 * MediaTek Inc. (C) 2010. All rights reserved.
 * 
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER
 * ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
 * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR
 * NONINFRINGEMENT. NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH
 * RESPECT TO THE SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY,
 * INCORPORATED IN, OR SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES
 * TO LOOK ONLY TO SUCH THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO.
 * RECEIVER EXPRESSLY ACKNOWLEDGES THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO
 * OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES CONTAINED IN MEDIATEK
 * SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE
 * RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S
 * ENTIRE AND CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE
 * RELEASED HEREUNDER WILL BE, AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE
 * MEDIATEK SOFTWARE AT ISSUE, OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE
 * CHARGE PAID BY RECEIVER TO MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek
 * Software") have been modified by MediaTek Inc. All revisions are subject to
 * any receiver's applicable license agreements with MediaTek Inc.
 */

#ifndef _VT_TRC_H
#define _VT_TRC_H

#ifndef __VT_SWIP__
#ifndef GEN_FOR_PC
    #ifndef _STACK_CONFIG_H
    #error "stack_config.h should be included before nvram_trc.h"
    #endif
#else
    #include "kal_trace.h"
#endif /* ~GEN_FOR_PC */

#ifndef _KAL_TRACE_H
    #error "kal_trace.h should be included before nvram_trc.h"
#endif /* ~_KAL_TRACE_H */


#else

#define _MOD_NAME(M) _##M
#define BEGIN_TRACE_MAP(MOD) typedef enum{

//#define END_TRACE_MAP(MOD) }_MOD_NAME(MOD)_trace_enum;
//heshun, because gcc compiler error
#define END_TRACE_MAP(MOD) }_##MOD##_trace_enum;
#define TRC_MSG(TRC_IDX,TRACE) TRC_IDX,

#endif
/*
    TRACE_FUNC
    TRACE_STATE     Call State
    TRACE_INFO      Memory Related Info
    TRACE_WARNING
    TRACE_ERROR
    TRACE_GROUP_1   DL 223 Raw
    TRACE_GROUP_2
    TRACE_GROUP_3
    TRACE_GROUP_4
    TRACE_GROUP_5   ASN Encoding
    TRACE_GROUP_6   DL Video/Audio
    TRACE_GROUP_7   UL Video/Audio, Loopback DL Video
    TRACE_GROUP_8
    TRACE_GROUP_9   UL 223 Raw
    TRACE_GROUP_10  RV Interal (common)
    TRACE_PEER
*/

BEGIN_TRACE_MAP(MOD_VT)

TRC_MSG(TRC_WriteMuxSdu_Suffix, "###In suffix area, WriteMuxSdu, rvh223muxer, and used_suffix_size=[%d], psuffix=[%d], remainingSize=[%d]")

TRC_MSG(VT_TRC_H263_Only_Civirtfile, "###Entering VT_TRC_H263_Only_Civirtfile in civirtfile, bH263_only_stack=[%d]")

TRC_MSG(VT_TRC__PARSE_MEMCPY, "###in ParseDataMuxLevel2(), pdesc->bytesRed=[%d], pdesc->maxSize=[%d], sizeToWrite=[%d]")

TRC_MSG(TRC_RVH223CONTROLSENDDATA_SEND_WNSRP_WITHOUT_NSRP, "[xSRP] Send WNSRP without NSRP")
TRC_MSG(TRC_RVH223CONTROLSENDDATA_SEND_WNSRP_WITH_NSRP, "[xSRP] Send WNSRP and NSRP")
TRC_MSG(TRC_RVH223CONTROLSEND_DATA_CLEAN_ACCESS_MARK, "RvH223ControlSendData: Clean Access Mark, %d [Ln:%d]")
TRC_MSG(VT_CHANGE_MPEG4_SESSION_HEADER_CFG_TREE_ACESS_ERROR, "[VT] Configuration Tree Access Error [LN:%d]")
TRC_MSG(VT_CHANGE_MPEG4_SESSION_HEADER_STATUS, "[VT] Change Mpeg4 Session header status: %d")
TRC_MSG(VT_FLUSHALLSTOREDNSRP_FREE_RPOOL, "flushAllStoredNSRP: free idx=%hu, firstRxIdx=%hu, lastRxIdx=%hu, RxSize=%hu")
TRC_MSG(VT_MEMORY_FILENAME, "[rvmem] FILENAME:")
TRC_MSG(VT_MEMORY_STATISTIC, "[rvmem] MAX: %d")
TRC_MSG(VT_MEMORY_STATISTIC1, "[rvmem] MAX: %d line: %d")
TRC_MSG(VT_SETDECPARSECODEC_H263, "VideoCall_SetDecParseCodec VIDEO_CALL_CODEC_H263 LINE:%d")
TRC_MSG(VT_SETDECPARSECODEC_MPEG4, "VideoCall_SetDecParseCodec VIDEO_CALL_CODEC_MPEG4 LINE:%d")
TRC_MSG(VT_SET_EVT_TRC, "VT Set Event: %d, %d")
TRC_MSG(VT_TERMH245AUTOCAPSCHANNELOPEN_FAIL_WITH_ERROR_UNKNOWN, "termH245AutoCapsChannelOpen: Fail with unknown error [Ln:%d]")
TRC_MSG(VT_TMP_TRC_MUX_ENTRY_INFO, "[MUX] Entry:%d")
TRC_MSG(VT_TMP_TRC_SYNC_INFO, "sync %d")
TRC_MSG(VT_TRC, " >> [%u] (%u:%u) => %u. \t \t number")
TRC_MSG(VT_TRC_1, "")
TRC_MSG(VT_TRC_3G324M_VERSION, "3G324m: Version ")
TRC_MSG(VT_TRC_ADDH263VCUSTOMFRAMMAPING, "addH263VCustomFramMaping=%d")
TRC_MSG(VT_TRC_ADDH263VCUSTOMFRAMMAPING_HAPP, "addH263VCustomFramMaping: hApp=%08X")
TRC_MSG(VT_TRC_ADDING_SELECT_ENGINE_TO_TLS_FAILED, "Adding select engine to TLS failed")
TRC_MSG(VT_TRC_ADDMEDIACHANNELCAP, "addMediaChannelCap=%d")
TRC_MSG(VT_TRC_ADDMEDIACHANNELCAP_HAPP, "addMediaChannelCap: hApp=%08X")
TRC_MSG(VT_TRC_ADDQOSCAPABILITY, "addQosCapability=%d")
TRC_MSG(VT_TRC_ADDQOSCAPABILITY_HAPP, "addQosCapability: hApp=%08X")
TRC_MSG(VT_TRC_ALLOCATEMPCTERMCHANNELS_FAIL, "allocateMPCTermChannels: Fail to allocate, type = %d")
TRC_MSG(VT_TRC_ARES_CALLING_INTERNAL_CB, "ARES: calling internal CB (engine=%08X,context=%d,queryId=%d,status=%d)")
TRC_MSG(VT_TRC_ARES_CONFIGURE_CONFIGURATION_FAILED, "ares_configure: Configuration failed")
TRC_MSG(VT_TRC_ARES_INTERNAL_CB_RETURNED, "ARES: internal CB returned (engine=%08X,context=%d,queryId=%d)")
TRC_MSG(VT_TRC_ARES_SET_OPTIONS_INIT_SERVER_FAILED, "ares_set_options: init_server failed (status=%d)")
TRC_MSG(VT_TRC_ARES_SET_OPTIONS_SET_SEARCH_FAILED, "ares_set_options: set_search failed (status=%d)")
TRC_MSG(VT_TRC_ASSEMBLECCSRLSEG_FREE_PAYLOAD, "[xSRP][Assemble CCSRL] Free xSRP %x [Ln:%d]")
TRC_MSG(VT_TRC_AUDIO_CALLBACK_IND_HDLR, "vt_audio_callback_ind_hdlr: event = %d")
TRC_MSG(VT_TRC_AUDIO_CODEC_UNSUPPORT, "Audio codec unsupport")
TRC_MSG(VT_TRC_AUDIO_INCOMING_CONNECTED, "INCOMING Audio LC is connected")
TRC_MSG(VT_TRC_AUDIO_OUTGOING_CONNECTED, "Outgoing Audio LC is connected")
TRC_MSG(VT_TRC_AUDIO_OUTGOING_INCOMING_CONNECTED, "Outgoing/Incoming Audio LC is connected")
TRC_MSG(VT_TRC_AUTOCAPSCHANNELMASTERSLAVECONFLICTEV_VIDEO_INFO, "RvH245AutoCapsChannelMasterSlaveConflictEv: Duplex? %hu, terminalStatus %d, conflict type %hu")
TRC_MSG(VT_TRC_AUTOCAPSGETPARAM_BOPENREVERSEDATA_INFO, "openReverseData: Auto NullData=%hu, video?=%hu, mimic=%hu, autoCap=%hu, mimicR=%hu")
TRC_MSG(VT_TRC_AUTOCAPS_BEFORE_HANDLE, "Before Enter Handle In: AF = %d, VF = %d, status = %d")
TRC_MSG(VT_TRC_AUTOCAPS_BEFORE_HANDLE_IN_VIDEO, "before handle incoming, video = %d")
TRC_MSG(VT_TRC_AUTOCAPS_MISSING_CAP, "@ Missing Cap = %d")
TRC_MSG(VT_TRC_AUTOCAPS_VALIDATE_DESC, "ValidateDesc: rV = %d rA = %d, lV = %d, lA = %d")
TRC_MSG(VT_TRC_BUILDMATCHINGTABLE_MATCHCAPS, "BuildMatchingTable: table idx = %u, local capId = %d, remote capId = %d")
TRC_MSG(VT_TRC_CALLCREATE_UNABLE_TO_SET_MONA_OR_ACP, "termCallCreate: Unable to set Mona or ACP Capability! Status=%d")
TRC_MSG(VT_TRC_CALLMESSAGESENDINGFAILUREEV, "callMessageSendingFailureEv: Drop Channel")
TRC_MSG(VT_TRC_CALLMONAPREFERENCEMSGRCVEV_ENTER, "[MONA]CallMonaPreferenceMsgRcvEv: [Enter][Params: mpcRx = %hu, mpcTx = %hu; Local MPC MediaT: Rx = %hu, Tx = %hu; UseMona = %hu, UseACP = %hu]")
TRC_MSG(VT_TRC_CALLMONAPREFERENCEMSGRCVEV_MSG1, "[MONA]PM Received - payloadLen %d, remoteMPC-RX 0x%hx, remoteMPC-TX 0x%hx, Matching MPC-RX 0x%hx, Matching MPC-TX 0x%hx")
TRC_MSG(VT_TRC_CALLMONAPREFERENCEMSGRCVEV_MSG2, "[MONA]Ignoring MONA preference message received with CRC errors")
TRC_MSG(VT_TRC_CALLMONAPREFERENCEMSGRCVEV_MSG3, "[MONA]MPC: channels match not found - MPC Channels Not established")
TRC_MSG(VT_TRC_CALLMONAPREFERENCEMSGRCVEV_MSG5, "[MONA]Supported Media Types - Audio Rx: %hu, Tx: %hu; Video Rx: %hu, Tx: %hu")
TRC_MSG(VT_TRC_CALLMONAPREFERENCEMSGRCVEV_MSG6, "[MONA]Rv3G324mCallMONASetMPCChannels Failed - status = %d")
TRC_MSG(VT_TRC_CALLMONAPREFERENCEMSGSENDEV_MSG1, "[MONA]CallMonaPreferenceMsgSendEv: Early-Sending MPC establish fail, status = %d")
TRC_MSG(VT_TRC_CALLREMOVEMONAMPCCHANNELEV_INFO1, "CallRemoveMonaMPCChannelEv: mpcType = %d, bIsOutgoing = %d")
TRC_MSG(VT_TRC_CALLSENDMESSAGEEV, "callSendMessageEv: MsgId = %d")
TRC_MSG(VT_TRC_CALLSENDMSG_NEW_MSG_SENT, "Rv3G324mCallSendMessage: New msg sent --> fieldId = %d")
TRC_MSG(VT_TRC_CALLSETMONAMPCCHANNELEV_ENTER,"[MONA]CallSetMonaMPCChannelEv: Enter [Params: supportedRxMPC = %d, TxMPC = %d]")
TRC_MSG(VT_TRC_CALLSTATECHANGEEV_STATE_IDLE_CALLMSGSTATE, "CallStateIdle: callMsgState = %d")
TRC_MSG(VT_TRC_CALLSTATECHANGEEV_STATE_IDLE_REMOTE_INFO_1, "CallStateIdle: remoteCall=%x")
TRC_MSG(VT_TRC_CALLSTATECHANGEEV_STATE_IDLE_REMOTE_INFO_2, "CallStateIdle: remoteCall State=%d, end?%d")
TRC_MSG(VT_TRC_CALLSTATECHANGEEV_STATE_IDLE_STATISTIC, "[Statistic] Missing Packets: Audio %u, Video %u, Loss Frames %u")
TRC_MSG(VT_TRC_CALL_KEEPER_TIMEOUT_HDLR, "Call keeper timer timeout: isActive=%d,call=(%08X)")
TRC_MSG(VT_TRC_CANNOT_START_A_TIMER, "Cannot start a timer (timer=%08X, result=%d)")
TRC_MSG(VT_TRC_CAPDESCBUILD_CAPDESC_ARRAY_OVERFLOW, "capDescBuild: capDesc array overflow [numOfEntries = %d]")
TRC_MSG(VT_TRC_CHANGE_MPEG4_SESSION_HEADER, "[VT]Change MPEG4 Session Header")
TRC_MSG(VT_TRC_CHANGE_MUX_LEVEL_TO_ZERO, "[H223] Change mux level to zero, fsi = %hu, lsi = %hu [Ln:%d]")
TRC_MSG(VT_TRC_CHANNELSTATECHANGED_DISCONNECTED, "cmEvChannelStateChanged: State = Disconnect, isOutgoing?%hu, BiDir?%hu, ReverseNull? %hu")
TRC_MSG(VT_TRC_CHANNELTIMEOUTEVENTSHANDLER_ENTER, "channelTimeoutEventsHandler: lcn = %d, status = %d")
TRC_MSG(VT_TRC_CHANNELTIMEOUTEVENTSHANDLER_RETRY_OPEN_CHANNEL, "channelTimeoutEventsHandler: re-try to open channel")
TRC_MSG(VT_TRC_CHECKBUFFERSHARING_CTRL_INFO, "[xSRP][checkBufferSharing]Enter: AM = %hu, isNSRP = %hu, IDX = %hu")
TRC_MSG(VT_TRC_CHECKBUFFERSHARING_EXT_CTRL_INFO, "[xSRP][checkBufferSharing]Exit: AM = %d, PT = %d")
TRC_MSG(VT_TRC_CHECKBUFFERSHARING_SET_N_PT_DONE, "[xSRP][checkBufferSharing]Set NSRP %d PT = DONE")
TRC_MSG(VT_TRC_CHECKBUFFERSHARING_SET_W_PT_DONE, "[xSRP][checkBufferSharing]Set WNSRP %d PT = DONE")
TRC_MSG(VT_TRC_CHECKMUXFORRME_GET_MUX_ENTRY_FAIL, "CheckMUXForRME: RvH223MuxerGetMuxtableEntry return fail!")
TRC_MSG(VT_TRC_CHECKMUXFORRME_UNABLE_TO_SET_MUX_TAB, "CheckMUXForRME: unable to set mux table for call %08X")
TRC_MSG(VT_TRC_CHECKMUXFORRME_VALID_ENTRIES, "CheckMUXForRME: entry %d is valid!")
TRC_MSG(VT_TRC_CICONSTRUCTEX_ALLOC_RPOOL_SIZE, "[rvmem][ci] %d, line : %d")
TRC_MSG(VT_TRC_CLOSELCBUFFER_ILLEGAL_MUX_TABLE_ENTRY, "CloseLcBuffer: illegal mux table entry (level=0,patom=NULL)")
TRC_MSG(VT_TRC_CLOSELCBUFFER_ILLEGAL_MUX_TABLE_ENTRY_1, "CloseLcBuffer: illegal mux table entry (level=0,pdesc=NULL)")
TRC_MSG(VT_TRC_CMADDH263VCUSTOMFRAMEMAPPING, "cmAddH263VCustomFrameMapping=%d")
TRC_MSG(VT_TRC_CMADDH263VCUSTOMFRAMEMAPPING_HAPP, "cmAddH263VCustomFrameMapping: hApp=%08X")
TRC_MSG(VT_TRC_CMADDMEDIACHANNELCAP, "cmAddMediaChannelCap=%d")
TRC_MSG(VT_TRC_CMADDMEDIACHANNELCAP_HAPP_TRANSPORTCAPABILITYID, "cmAddMediaChannelCap: hApp=%08X,TransportCapabilityId=%d")
TRC_MSG(VT_TRC_CMADDQOSCAPABILITY, "cmAddQosCapability=%d")
TRC_MSG(VT_TRC_CMADDQOSCAPABILITY_HAPP_TRANSPORTCAPABILITYID, "cmAddQosCapability: hApp=%08X,TransportCapabilityId=%d")
TRC_MSG(VT_TRC_CMBUILDH245DATATYPENODE, "cmBuildH245DataTypeNode=%d")
TRC_MSG(VT_TRC_CMBUILDH245DATATYPENODE_HAPP, "cmBuildH245DataTypeNode: hApp=%08X")
TRC_MSG(VT_TRC_CMCALLADDEXTFASTCONNECTAPPROVAL_1, "cmCallAddExtFastConnectApproval=1")
TRC_MSG(VT_TRC_CMCALLADDEXTFASTCONNECTAPPROVAL_NO_MORE_ROOM, "cmCallAddExtFastConnectApproval: no more room [-1]")
TRC_MSG(VT_TRC_CMCALLADDFASTSTARTMESSAGE, "cmCallAddFastStartMessage=%d")
TRC_MSG(VT_TRC_CMCALLADDFASTSTARTMESSAGE_HSCALL, "cmCallAddFastStartMessage: hsCall=%08X")
TRC_MSG(VT_TRC_CMCALLADDFASTSTARTMESSAGE_HSCALL_FASTSTARTSTATE, "cmCallAddFastStartMessage: hsCall=%08X, fastStartState=%d")
TRC_MSG(VT_TRC_CMCALLADDFASTSTARTMESSAGE_NO_MORE_ROOM, "cmCallAddFastStartMessage: no more room [-5]")
TRC_MSG(VT_TRC_CMCALLADDFASTSTARTMESSAGE_SESSION_ID_ALREADY, "cmCallAddFastStartMessage: session ID %d already exists (%08X) [-10]")
TRC_MSG(VT_TRC_CMCALLCANCELCONFERENCE, "cmCallCancelConference: [-1]. (Wrong state)")
TRC_MSG(VT_TRC_CMCALLCANCELCONFERENCE_1, "cmCallCancelConference=%d")
TRC_MSG(VT_TRC_CMCALLCANCELCONFERENCE_HSCALL, "cmCallCancelConference: hsCall=%08X")
TRC_MSG(VT_TRC_CMCALLCAPABILITIESACK, "cmCallCapabilitiesAck(hsCall=%08X)")
TRC_MSG(VT_TRC_CMCALLCAPABILITIESACK_1, "cmCallCapabilitiesAck=%d")
TRC_MSG(VT_TRC_CMCALLCAPABILITIESBUILD, "cmCallCapabilitiesBuild: [%d].")
TRC_MSG(VT_TRC_CMCALLCAPABILITIESBUILD_HSCALL_CAPSET_CAPDESC, "cmCallCapabilitiesBuild: hsCall=%08X, capSet=%08X, capDesc=%08X.")
TRC_MSG(VT_TRC_CMCALLCAPABILITIESREJECT, "cmCallCapabilitiesReject(hsCall=%08X)")
TRC_MSG(VT_TRC_CMCALLCAPABILITIESREJECT_1, "cmCallCapabilitiesReject=%d")
TRC_MSG(VT_TRC_CMCALLCAPABILITIESSEND, "cmCallCapabilitiesSend=%d")
TRC_MSG(VT_TRC_CMCALLCAPABILITIESSEND_HSCALL_CAPSET_CAPDESC, "cmCallCapabilitiesSend: hsCall=%08X, capSet=%08X, capDesc=%08X.")
TRC_MSG(VT_TRC_CMCALLDECLAREMC, "cmCallDeclareMC=%d")
TRC_MSG(VT_TRC_CMCALLDECLAREMC_HSCALL, "cmCallDeclareMC: hsCall=%08X")
TRC_MSG(VT_TRC_CMCALLFASTSTARTOPENCHANNELS, "cmCallFastStartOpenChannels(hsCall=%08X)")
TRC_MSG(VT_TRC_CMCALLFASTSTARTOPENCHANNELS_1, "cmCallFastStartOpenChannels=%d")
TRC_MSG(VT_TRC_CMCALLGETCHANNELBYSESSIONID, "cmCallGetChannelBySessionId(hsCall=%08X, sessionId=%d, origin=%d)")
TRC_MSG(VT_TRC_CMCALLGETCHANNELBYSESSIONID_1, "cmCallGetChannelBySessionId(hsChan=%08X)=%d")
TRC_MSG(VT_TRC_CMCALLGETLOCALCAPABILITIES, "cmCallGetLocalCapabilities: [%d].")
TRC_MSG(VT_TRC_CMCALLGETLOCALCAPABILITIES_HSCALL_CAPSETA_CAPSETASIZE, "cmCallGetLocalCapabilities: hsCall=%08X, capSetA=%08X, capSetASize=%d, capDescA=%08X, capDescASize=%d, capSet=%08X, capDesc=%08X.")
TRC_MSG(VT_TRC_CMCALLGETMCADDRESS_HSCALL_IP_PORT, "cmCallGetMCAddress: hsCall=%08X, &ip=%08X, &port=%08X")
TRC_MSG(VT_TRC_CMCALLGETMCADDRESS_IP_0X_PORT, "cmCallGetMCAddress: ip=0x%x, port=%d [%d].")
TRC_MSG(VT_TRC_CMCALLGETMCTRANSPORTADDRESS_HSCALL, "cmCallGetMcTransportAddress: hsCall=%08X")
TRC_MSG(VT_TRC_CMCALLGETREMOTECAPABILITIES, "cmCallGetRemoteCapabilities: [%d].")
TRC_MSG(VT_TRC_CMCALLGETREMOTECAPABILITIESEX, "cmCallGetRemoteCapabilitiesEx: [%d].")
TRC_MSG(VT_TRC_CMCALLGETREMOTECAPABILITIESEX_CAPDESCBUILD, "cmCallGetRemoteCapabilitiesEx:capDescBuild failed.")
TRC_MSG(VT_TRC_CMCALLGETREMOTECAPABILITIESEX_HSCALL_CAPSETA_CAPSETASIZE, "cmCallGetRemoteCapabilitiesEx: hsCall=%08X, capSetA=%08X, capSetASize=%d, capDescA=%08X, capDescASize=%d, capSet=%08X, capDesc=%08X.")
TRC_MSG(VT_TRC_CMCALLGETREMOTECAPABILITIESEX_NO_TCS_MESSAGE, "cmCallGetRemoteCapabilitiesEx: no TCS message has been received yet.")
TRC_MSG(VT_TRC_CMCALLGETREMOTECAPABILITIES_HSCALL, "cmCallGetRemoteCapabilities: hsCall=%08X.")
TRC_MSG(VT_TRC_CMCALLMASTERSLAVEEXPECTEDSTATUS_HSCALL, "cmCallMasterSlaveExpectedStatus: hsCall=%08X.")
TRC_MSG(VT_TRC_CMCALLMASTERSLAVESTATUS_HSCALL, "cmCallMasterSlaveStatus: hsCall=%08X.")
TRC_MSG(VT_TRC_CMCALLMEDIALOOPOFF, "cmCallMediaLoopOff=%d")
TRC_MSG(VT_TRC_CMCALLMEDIALOOPOFF_HSCALL, "cmCallMediaLoopOff: hsCall=%08X.")
TRC_MSG(VT_TRC_CMCALLMULTIPLEXENTRYSEND, "cmCallMultiplexEntrySend=%d")
TRC_MSG(VT_TRC_CMCALLMULTIPLEXENTRYSENDRESPONSE, "cmCallMultiplexEntrySendResponse=%d")
TRC_MSG(VT_TRC_CMCALLMULTIPLEXENTRYSENDRESPONSE_HSCALL_ISOK, "cmCallMultiplexEntrySendResponse: hsCall=%08X, isOk=%d, message=%d.")
TRC_MSG(VT_TRC_CMCALLMULTIPLEXENTRYSEND_HSCALL_MESSAGE, "cmCallMultiplexEntrySend: hsCall=%08X, message=%d.")
TRC_MSG(VT_TRC_CMCALLMULTIPOINTCOMMAND, "cmCallMultipointCommand=%d")
TRC_MSG(VT_TRC_CMCALLMULTIPOINTSTATUS_HSCALL_ISMODEON, "cmCallMultipointStatus: hsCall=%08X, &isModeOn=%08X")
TRC_MSG(VT_TRC_CMCALLREQUESTMODE, "cmCallRequestMode=%d")
TRC_MSG(VT_TRC_CMCALLREQUESTMODEACK, "cmCallRequestModeAck=%d")
TRC_MSG(VT_TRC_CMCALLREQUESTMODEREJECT, "cmCallRequestModeReject=%d")
TRC_MSG(VT_TRC_CMCALLREQUESTMODE_HSCALL_ID, "cmCallRequestMode: hsCall=%08X, id=%d.")
TRC_MSG(VT_TRC_CMCALLREQUESTMULTIPLEXENTRY, "cmCallRequestMultiplexEntry=%d")
TRC_MSG(VT_TRC_CMCALLREQUESTMULTIPLEXENTRY_HSCALL, "cmCallRequestMultiplexEntry: hsCall=%08X")
TRC_MSG(VT_TRC_CMCALLROUNDTRIPDELAY, "cmCallRoundTripDelay=%d")
TRC_MSG(VT_TRC_CMCALLROUNDTRIPDELAY_HSCALL_DELAY, "cmCallRoundTripDelay: hsCall=%08X, delay=%d")
TRC_MSG(VT_TRC_CMCALLSENDCAPABILITY, "cmCallSendCapability(hsCall=%08X, capSet=%d)")
TRC_MSG(VT_TRC_CMCALLSENDCAPABILITY_1, "cmCallSendCapability=%d")
TRC_MSG(VT_TRC_CMCALLSENDUSERINPUT, "cmCallSendUserInput=%d")
TRC_MSG(VT_TRC_CMCALLSENDUSERINPUT_HSCALL_ID, "cmCallSendUserInput: hsCall=%08X, id=%d")
TRC_MSG(VT_TRC_CMCALLSETCHANNELS, "cmCallSetChannels=%d")
TRC_MSG(VT_TRC_CMCALLSETCHANNELSEXT, "cmCallSetChannelsExt=%d")
TRC_MSG(VT_TRC_CMCALLSETCHANNELSEXT_1, "cmCallSetChannelsExt: [-1]. (Wrong state)")
TRC_MSG(VT_TRC_CMCALLSETCHANNELSEXT_HSCALL_CHANNELSETSIZE, "cmCallSetChannelsExt: hsCall=%08X channelSetSize=%d")
TRC_MSG(VT_TRC_CMCALLSETCHANNELS_HSCALL_CHANNELSETSIZE, "cmCallSetChannels: hsCall=%08X channelSetSize=%d")
TRC_MSG(VT_TRC_CMCALLSETCHANNELS_HSCALL_SETSIZE_SET, "cmCallSetChannels: hsCall=%08X, setSize=%d, &set=%08X")
TRC_MSG(VT_TRC_CMCALLSETCHANNELS_NO_DATA_TYPE_AVAILABLE, "cmCallSetChannels: No data type available")
TRC_MSG(VT_TRC_CMCALLSETTERMINALLABEL, "cmCallSetTerminalLabel=%d")
TRC_MSG(VT_TRC_CMCALLSETTERMINALLABEL_HSCALL_LABEL, "cmCallSetTerminalLabel: hsCall=%08X label=(%d, %d)")
TRC_MSG(VT_TRC_CMCALLSETTERMINALLABEL_HSCALL_LABEL_1, "cmCallSetTerminalLabel: hsCall=%08X &label=%08X")
TRC_MSG(VT_TRC_CMCALLSETTERMINALLABEL_LABEL, "cmCallSetTerminalLabel: label=(%d, %d) [%d].")
TRC_MSG(VT_TRC_CMCALLSTARTCONFERENCE, "cmCallStartConference=%d")
TRC_MSG(VT_TRC_CMCALLSTARTCONFERENCE_HSCALL, "cmCallStartConference: hsCall=%08X")
TRC_MSG(VT_TRC_CMCCALLCHANNELPARAMETERSCALLBACK_ERROR_IN_CONFGETDATATYPENAME, "cmcCallChannelParametersCallback: error in confGetDataTypeName(), dataType=%d")
TRC_MSG(VT_TRC_CMCGETLOCALCAPS_CAPDESCBUILD_FAILED, "cmcGetLocalCaps:capDescBuild failed.")
TRC_MSG(VT_TRC_CMCHANNELANSWER, "cmChannelAnswer=%d")
TRC_MSG(VT_TRC_CMCHANNELANSWER_HSCHAN, "cmChannelAnswer: hsChan=%08X.")
TRC_MSG(VT_TRC_CMCHANNELCLOSE_1, "cmChannelClose=1")
TRC_MSG(VT_TRC_CMCHANNELCLOSE_HSCHAN, "cmChannelClose: hsChan=%08X.")
TRC_MSG(VT_TRC_CMCHANNELDROPREASON, "cmChannelDropReason(hsChan=%08X, reason=%d)")
TRC_MSG(VT_TRC_CMCHANNELDROPREASON_1, "cmChannelDropReason=1")
TRC_MSG(VT_TRC_CMCHANNELDROPREASON_1_CLC_ALREADY_SENT, "cmChannelDropReason=1; CLC already sent.")
TRC_MSG(VT_TRC_CMCHANNELDROPREASON_2, "cmChannelDropReason=%d")
TRC_MSG(VT_TRC_CMCHANNELDROPREASON_CONTROL_IS_NOT, "cmChannelDropReason: Control is not initialized (probably in faststart mode)")
TRC_MSG(VT_TRC_CMCHANNELDROP_1, "cmChannelDrop=1")
TRC_MSG(VT_TRC_CMCHANNELDUPLEX_1, "cmChannelDuplex=1")
TRC_MSG(VT_TRC_CMCHANNELDUPLEX_HSCHAN, "cmChannelDuplex: hsChan=%08X.")
TRC_MSG(VT_TRC_CMCHANNELFLOWCONTROL, "cmChannelFlowControl: [Invalid circumstances].")
TRC_MSG(VT_TRC_CMCHANNELFLOWCONTROL_1, "cmChannelFlowControl=%d")
TRC_MSG(VT_TRC_CMCHANNELFLOWCONTROL_HSCHAN_RATE, "cmChannelFlowControl: hsChan=%08X, rate=%d.")
TRC_MSG(VT_TRC_CMCHANNELGETCALLHANDLES_HSCALL, "cmChannelGetCallHandles:hsCall =%08X")
TRC_MSG(VT_TRC_CMCHANNELGETCALLHANDLES_HSCHAN, "cmChannelGetCallHandles:hsChan=%08X")
TRC_MSG(VT_TRC_CMCHANNELGETDEPENDENCY_CHANNEL_DOES_NOT_EXIST, "cmChannelGetDependency: channel does not exist")
TRC_MSG(VT_TRC_CMCHANNELGETDEPENDENCY_CHANNEL_IS_INDEPENDENT, "cmChannelGetDependency: channel is independent")
TRC_MSG(VT_TRC_CMCHANNELGETDEPENDENCY_HA_HS, "cmChannelGetDependency: ha=%08X hs=%08X [%d].")
TRC_MSG(VT_TRC_CMCHANNELGETDEPENDENCY_HSCHAN_HABASECHANNEL, "cmChannelGetDependency: hsChan=%08X, haBaseChannel=%08X, hsBaseChannel=%08X.")
TRC_MSG(VT_TRC_CMCHANNELGETDESTINATION_HSCHAN, "cmChannelGetDestination: hsChan=%08X ")
TRC_MSG(VT_TRC_CMCHANNELGETDESTINATION_MCUNUMBER_TERMINALNUMBER, "cmChannelGetDestination: mcuNumber [%d] terminalNumber [%d]")
TRC_MSG(VT_TRC_CMCHANNELGETDUPLEXADDRESS_ERROR_NO_SEPARATE_STACK, "cmChannelGetDuplexAddress: Error: No separate stack id")
TRC_MSG(VT_TRC_CMCHANNELGETDUPLEXADDRESS_HSCHAN_ADDRESS_EXT, "cmChannelGetDuplexAddress: hsChan=%08X, address=%08X, ext=%d:%08X, isAssociated=%08X")
TRC_MSG(VT_TRC_CMCHANNELGETHANDLE_1, "cmChannelGetHandle: 1 (haChan=%08X)")
TRC_MSG(VT_TRC_CMCHANNELGETHANDLE_HSCHAN, "cmChannelGetHandle: hsChan=%08X")
TRC_MSG(VT_TRC_CMCHANNELGETNUMBER, "cmChannelGetNumber=%d")
TRC_MSG(VT_TRC_CMCHANNELGETNUMBER_HSCHAN, "cmChannelGetNumber: hsChan=%08X.")
TRC_MSG(VT_TRC_CMCHANNELGETORIGIN_HSCHAN_ORIGIN, "cmChannelGetOrigin: hsChan=%08X, origin=%08X.")
TRC_MSG(VT_TRC_CMCHANNELGETORIGIN_ORIGIN, "cmChannelGetOrigin: origin=%d. [1]")
TRC_MSG(VT_TRC_CMCHANNELGETPARAM, "cmChannelGetParam(hsChan=%08X,eParam=%d)")
TRC_MSG(VT_TRC_CMCHANNELGETPARAM_1, "cmChannelGetParam=%d")
TRC_MSG(VT_TRC_CMCHANNELGETREDUNDANCYENCODING_HSCHAN, "cmChannelGetRedundancyEncoding: hsChan=%08X ")
TRC_MSG(VT_TRC_CMCHANNELGETREDUNDANCYENCODING_REDENCID_REDENCMETHODID, "cmChannelGetRedundancyEncoding: redEncId [%d] redEncMethodId [%d] secondaryEncId [%d]")
TRC_MSG(VT_TRC_CMCHANNELGETREQUESTCLOSEPARAM_1, "cmChannelGetRequestCloseParam=1")
TRC_MSG(VT_TRC_CMCHANNELGETREQUESTCLOSEPARAM_HSCHAN_HACHAN, "cmChannelGetRequestCloseParam: hsChan=%08X haChan=%08X")
TRC_MSG(VT_TRC_CMCHANNELGETSOURCE_HSCHAN, "cmChannelGetSource: hsChan=%08X ")
TRC_MSG(VT_TRC_CMCHANNELGETSOURCE_MCUNUMBER_TERMINALNUMBER, "cmChannelGetSource: mcuNumber [%d] terminalNumber [%d]")
TRC_MSG(VT_TRC_CMCHANNELGETT120SETUP, "cmChannelGetT120Setup=%d")
TRC_MSG(VT_TRC_CMCHANNELGETT120SETUP_HSCHAN, "cmChannelGetT120Setup: hsChan=%08X")
TRC_MSG(VT_TRC_CMCHANNELGETTRANSPORTCAPABILITYID, "cmChannelGetTransportCapabilityId=%d")
TRC_MSG(VT_TRC_CMCHANNELGETTRANSPORTCAPABILITYID_HSCHAN, "cmChannelGetTransportCapabilityId: hsChan=%08X ")
TRC_MSG(VT_TRC_CMCHANNELH223MAXSKEW, "cmChannelH223MaxSkew: [Invalid Circumstances].")
TRC_MSG(VT_TRC_CMCHANNELH223MAXSKEW_1, "cmChannelH223MaxSkew=%d")
TRC_MSG(VT_TRC_CMCHANNELH223MAXSKEW_HSCHAN1_HSCHAN2_SKEW, "cmChannelH223MaxSkew: hsChan1=%08X, hsChan2=%08X, skew=%d.")
TRC_MSG(VT_TRC_CMCHANNELISDUPLEX, "cmChannelIsDuplex=%d")
TRC_MSG(VT_TRC_CMCHANNELISDUPLEX_HSCHAN, "cmChannelIsDuplex: hsChan=%08X.")
TRC_MSG(VT_TRC_CMCHANNELMAXSKEW, "cmChannelMaxSkew: [Invalid Circumstances]")
TRC_MSG(VT_TRC_CMCHANNELMAXSKEW_1, "cmChannelMaxSkew=%d")
TRC_MSG(VT_TRC_CMCHANNELMAXSKEW_HSCHAN1_HSCHAN2_SKEW, "cmChannelMaxSkew: hsChan1=%08X, hsChan2=%08X, skew=%d.")
TRC_MSG(VT_TRC_CMCHANNELMEDIALOOPCONFIRM, "cmChannelMediaLoopConfirm=%d")
TRC_MSG(VT_TRC_CMCHANNELMEDIALOOPCONFIRM_HSCHAN, "cmChannelMediaLoopConfirm: hsChan=%08X.")
TRC_MSG(VT_TRC_CMCHANNELMEDIALOOPREJECT, "cmChannelMediaLoopReject=%d")
TRC_MSG(VT_TRC_CMCHANNELMEDIALOOPREJECT_HSCHAN, "cmChannelMediaLoopReject: hsChan=%08X.")
TRC_MSG(VT_TRC_CMCHANNELMEDIALOOPREQUEST, "cmChannelMediaLoopRequest: [%d].")
TRC_MSG(VT_TRC_CMCHANNELMEDIALOOPREQUEST_HSCHAN, "cmChannelMediaLoopRequest: hsChan=%08X.")
TRC_MSG(VT_TRC_CMCHANNELNEW, "cmChannelNew: [RESOURCE PROBLEM].")
TRC_MSG(VT_TRC_CMCHANNELNEW_HSCALL_HACHAN_LPHSCHAN, "cmChannelNew: hsCall=%08X, haChan=%08X, lphsChan=%08X.")
TRC_MSG(VT_TRC_CMCHANNELNEW_LPHSCHAN, "cmChannelNew: *lphsChan=%08X [OK].")
TRC_MSG(VT_TRC_CMCHANNELOFF, "cmChannelOff: [%d].")
TRC_MSG(VT_TRC_CMCHANNELOFF_HSCHAN, "cmChannelOff: hsChan=%08X.")
TRC_MSG(VT_TRC_CMCHANNELON, "cmChannelOn: [%d].")
TRC_MSG(VT_TRC_CMCHANNELON_HSCHAN, "cmChannelOn: hsChan=%08X.")
TRC_MSG(VT_TRC_CMCHANNELOPEN, "cmChannelOpen=%d")
TRC_MSG(VT_TRC_CMCHANNELOPENDYNAMIC_1, "cmChannelOpenDynamic=1")
TRC_MSG(VT_TRC_CMCHANNELOPENDYNAMIC_BASE_CHANNEL_RELEASED, "cmChannelOpenDynamic: Base channel released [Invalid Circumstances]")
TRC_MSG(VT_TRC_CMCHANNELOPENDYNAMIC_CONTROL_IS_NOT_IN_A_CONNECTED, "cmChannelOpenDynamic: Control is not in a connected state, state=%d")
TRC_MSG(VT_TRC_CMCHANNELOPENDYNAMIC_HSCHAN_DATATYPEHANDLE_HSCHANSAMESESSION, "cmChannelOpenDynamic: hsChan=%08X, dataTypeHandle=%d, hsChanSameSession=%08X, hsChanAssociated=%08X, isDynamicPayloadType=%d.")
TRC_MSG(VT_TRC_CMCHANNELOPENDYNAMIC_OUT_OF_SESSION_IDS, "cmChannelOpenDynamic: Out of session IDs [Resource Problem]")
TRC_MSG(VT_TRC_CMCHANNELOPENDYNAMIC_STARTESTABLISHMENT_FAILED, "cmChannelOpenDynamic: startEstablishment failed")
TRC_MSG(VT_TRC_CMCHANNELOPENDYNAMIC_WAITING_FOR_BASE_CHANNEL, "cmChannelOpenDynamic: Waiting for base channel [OK]")
TRC_MSG(VT_TRC_CMCHANNELOPEN_RETURN, "cmChannelOpen: return %d")
TRC_MSG(VT_TRC_CMCHANNELREJECT, "cmChannelReject: [ERROR: OUTGOING CHANNEL]")
TRC_MSG(VT_TRC_CMCHANNELREJECT_1, "cmChannelReject: [ERROR: WRONG STATE]")
TRC_MSG(VT_TRC_CMCHANNELREJECT_HSCHAN, "cmChannelReject: hsChan=%08X.")
TRC_MSG(VT_TRC_CMCHANNELREPLACE, "cmChannelReplace: ")
TRC_MSG(VT_TRC_CMCHANNELREPLACE_1, "cmChannelReplace=1")
TRC_MSG(VT_TRC_CMCHANNELREPLACE_CHANNEL_DOES_NOT_EXIST, "cmChannelReplace: channel does not exist")
TRC_MSG(VT_TRC_CMCHANNELREPLACE_HA_HS, "cmChannelReplace: ha=%08X hs=%08X [%d].")
TRC_MSG(VT_TRC_CMCHANNELREPLACE_HSCHAN_HAREPLACECHANNEL, "cmChannelReplace: hsChan=%08X, haReplaceChannel=%08X, hsReplaceChannel=%08X.")
TRC_MSG(VT_TRC_CMCHANNELREPLACE_HSCHAN_HSCHANREPLACE, "cmChannelReplace: hsChan=%08X, hsChanReplace=%08X")
TRC_MSG(VT_TRC_CMCHANNELREQUESTCLOSE, "cmChannelRequestClose=%d")
TRC_MSG(VT_TRC_CMCHANNELREQUESTCLOSEREJECT, "cmChannelRequestCloseReject=%d")
TRC_MSG(VT_TRC_CMCHANNELREQUESTCLOSEREJECT_HSCHAN, "cmChannelRequestCloseReject: hsChan=%08X.")
TRC_MSG(VT_TRC_CMCHANNELREQUESTCLOSE_CONTROL_IS_NOT, "cmChannelRequestClose: Control is not initialized (probably in faststart mode)")
TRC_MSG(VT_TRC_CMCHANNELREQUESTCLOSE_HSCHAN, "cmChannelRequestClose: hsChan=%08X.")
TRC_MSG(VT_TRC_CMCHANNELSAMESESSION_HA_HS, "cmChannelSameSession: ha=%08X hs=%08X [0].")
TRC_MSG(VT_TRC_CMCHANNELSAMESESSION_HSCHAN_HASAMESESSION, "cmChannelSameSession: hsChan=%08X, haSameSession=%08X, hsSameSession=%08X.")
TRC_MSG(VT_TRC_CMCHANNELSENDMISCCOMMAND, "cmChannelSendMiscCommand: [Invalid Parameter]")
TRC_MSG(VT_TRC_CMCHANNELSENDMISCCOMMAND_1, "cmChannelSendMiscCommand=%d")
TRC_MSG(VT_TRC_CMCHANNELSENDMISCCOMMAND_HSCHAN, "cmChannelSendMiscCommand: hsChan=%08X. command %d")
TRC_MSG(VT_TRC_CMCHANNELSENDTRANSPORTCAPIND, "cmChannelSendTransportCapInd=%d")
TRC_MSG(VT_TRC_CMCHANNELSENDTRANSPORTCAPIND_HSCHAN_CAPABILITY, "cmChannelSendTransportCapInd: hsChan=%08X Capability nodeId %d.")
TRC_MSG(VT_TRC_CMCHANNELSESSIONID, "cmChannelSessionId=%d")
TRC_MSG(VT_TRC_CMCHANNELSESSIONID_HSCHAN, "cmChannelSessionId: hsChan=%08X.")
TRC_MSG(VT_TRC_CMCHANNELSETATMVC_1, "cmChannelSetATMVC=1")
TRC_MSG(VT_TRC_CMCHANNELSETATMVC_HSCHAN_PORT, "cmChannelSetATMVC: hsChan=%08X, port=%d.")
TRC_MSG(VT_TRC_CMCHANNELSETDEPENDENCY_1, "cmChannelSetDependency=1")
TRC_MSG(VT_TRC_CMCHANNELSETDEPENDENCY_HSCHAN_HSCHANBASE, "cmChannelSetDependency: hsChan=%08X, hsChanBase=%08X")
TRC_MSG(VT_TRC_CMCHANNELSETDESTINATION_1, "cmChannelSetDestination=1")
TRC_MSG(VT_TRC_CMCHANNELSETDESTINATION_HSCHAN_MCUNUMBER, "cmChannelSetDestination: hsChan=%08X mcuNumber=[%d] terminalNumber = [%d]")
TRC_MSG(VT_TRC_CMCHANNELSETDUPLEXADDRESS_1, "cmChannelSetDuplexAddress=1")
TRC_MSG(VT_TRC_CMCHANNELSETDYNAMICRTPPAYLOADTYPE, "cmChannelSetDynamicRTPPayloadType: [Invalid Parameter]")
TRC_MSG(VT_TRC_CMCHANNELSETDYNAMICRTPPAYLOADTYPE_1, "cmChannelSetDynamicRTPPayloadType=1")
TRC_MSG(VT_TRC_CMCHANNELSETDYNAMICRTPPAYLOADTYPE_HSCHAN, "cmChannelSetDynamicRTPPayloadType: hsChan=%08X, dynamicPayloadType=%d.")
TRC_MSG(VT_TRC_CMCHANNELSETFLOWCONTROLTOZERO, "cmChannelSetFlowControlToZero: [1].")
TRC_MSG(VT_TRC_CMCHANNELSETFLOWCONTROLTOZERO_1, "cmChannelSetFlowControlToZero=1")
TRC_MSG(VT_TRC_CMCHANNELSETFLOWCONTROLTOZERO_HSCHAN, "cmChannelSetFlowControlToZero: hsChan=%08X, MultiplexReconfiguration=%d")
TRC_MSG(VT_TRC_CMCHANNELSETFLOWCONTROLTOZERO_HSCHAN_FLOWCONTROL, "cmChannelSetFlowControlToZero: hsChan=%08X, flowControl=%d")
TRC_MSG(VT_TRC_CMCHANNELSETH223MAXMUXPDUSIZE_0, "cmChannelSetH223MaxMuxPduSize=0")
TRC_MSG(VT_TRC_CMCHANNELSETH223MAXMUXPDUSIZE_HSCHAN, "cmChannelSetH223MaxMuxPduSize: hsChan=%08X, maxMuxPduSize=%d")
TRC_MSG(VT_TRC_CMCHANNELSETH223SKEWINDICATION_0, "cmChannelSetH223SkewIndication=0")
TRC_MSG(VT_TRC_CMCHANNELSETH223SKEWINDICATION_HSCHAN, "cmChannelSetH223SkewIndication: hsChan=%08X, skewIndication=%d")
TRC_MSG(VT_TRC_CMCHANNELSETHANDLE, "cmChannelSetHandle=%d")
TRC_MSG(VT_TRC_CMCHANNELSETHANDLE_HSCHAN_HACHAN, "cmChannelSetHandle: hsChan=%08X, haChan=%08X.")
TRC_MSG(VT_TRC_CMCHANNELSETNSAPADDRESS_1, "cmChannelSetNSAPAddress=1")
TRC_MSG(VT_TRC_CMCHANNELSETNSAPADDRESS_HSCHAN_LENGTH, "cmChannelSetNSAPAddress: hsChan=%08X, length=%d.")
TRC_MSG(VT_TRC_CMCHANNELSETNSAPADDRESS_NOT_SUPPORTED_RV_H323, "cmChannelSetNSAPAddress() not supported: RV_H323_TRANSPORT_ADDRESS == RV_H323_TRANSPORT_ADDRESS_IPV4_ONLY")
TRC_MSG(VT_TRC_CMCHANNELSETPARAM, "cmChannelSetParam=%d")
TRC_MSG(VT_TRC_CMCHANNELSETPARAM_HSCHAN_EPARAM_VALUE_STRVALUE, "cmChannelSetParam(hsChan=%08X,eParam=%d,value=%d,strValue=%08X")
TRC_MSG(VT_TRC_CMCHANNELSETREDUNDANCYENCODING_1, "cmChannelSetRedundancyEncoding=1")
TRC_MSG(VT_TRC_CMCHANNELSETREDUNDANCYENCODING_HSCHAN_REDENCMETHODID, "cmChannelSetRedundancyEncoding: hsChan=%08X redEncMethodId=[%d] dataTypeHandle = [%d]")
TRC_MSG(VT_TRC_CMCHANNELSETRTCPTRANSPORTADDRESS, "cmChannelSetRtcpTransportAddress=%d")
TRC_MSG(VT_TRC_CMCHANNELSETRTPTRANSPORTADDRESS_1, "cmChannelSetRtpTransportAddress=1")
TRC_MSG(VT_TRC_CMCHANNELSETSOURCE_1, "cmChannelSetSource=1")
TRC_MSG(VT_TRC_CMCHANNELSETSOURCE_HSCHAN_MCUNUMBER, "cmChannelSetSource: hsChan=%08X mcuNumber=[%d] terminalNumber = [%d]")
TRC_MSG(VT_TRC_CMCHANNELSETT120SETUP_1, "cmChannelSetT120Setup=1")
TRC_MSG(VT_TRC_CMCHANNELSETT120SETUP_CHANNEL_DOES_NOT_EXIST, "cmChannelSetT120Setup: channel does not exist")
TRC_MSG(VT_TRC_CMCHANNELSETT120SETUP_HSCHAN, "cmChannelSetT120Setup: hsChan=%08X, cmT120SetupProcedure=%d")
TRC_MSG(VT_TRC_CMCHANNELSETT120SETUP_INVLID_PARAMETER, "cmChannelSetT120Setup: invlid parameter")
TRC_MSG(VT_TRC_CMCHANNELSETTRANSPORTCAPABILITY_1, "cmChannelSetTransportCapability=1")
TRC_MSG(VT_TRC_CMCHANNELSETTRANSPORTCAPABILITY_HSCHAN, "cmChannelSetTransportCapability: hsChan=%08X transpCapId=[%d] ")
TRC_MSG(VT_TRC_CMCHANNELSTATECHANGED, "cmChannelStateChanged: chan = %d, state = %d")
TRC_MSG(VT_TRC_CMCHANNELTSTOCOMMAND, "cmChannelTSTOCommand=%d")
TRC_MSG(VT_TRC_CMCHANNELTSTOCOMMAND_HSCHAN_TRADEOFF, "cmChannelTSTOCommand: hsChan=%08X, tradeoff=%d.")
TRC_MSG(VT_TRC_CMCHANNELTSTOINDICATION, "cmChannelTSTOIndication=%d")
TRC_MSG(VT_TRC_CMCHANNELTSTOINDICATION_HSCHAN_TRADEOFF, "cmChannelTSTOIndication: hsChan=%08X, tradeoff=%d.")
TRC_MSG(VT_TRC_CMCHANNELVIDEOFASTUPDATEGOB, "cmChannelVideoFastUpdateGOB=%d")
TRC_MSG(VT_TRC_CMCHANNELVIDEOFASTUPDATEGOB_HSCHAN_FIRSTGOB, "cmChannelVideoFastUpdateGOB: hsChan=%08X, firstGOB=%d, numberOfGOBs=%d.")
TRC_MSG(VT_TRC_CMCHANNELVIDEOFASTUPDATEMB, "cmChannelVideoFastUpdateMB=%d")
TRC_MSG(VT_TRC_CMCHANNELVIDEOFASTUPDATEMB_HSCHAN_FIRSTGOB_FIRSTMB, "cmChannelVideoFastUpdateMB: hsChan=%08X, firstGOB=%d, firstMB=%d, numberOfMBs=%d.")
TRC_MSG(VT_TRC_CMCREADYEVENT_HCALL_STATE_OUTCAP_INCAP_ISMS, "cmcReadyEvent hCall=%08X: state=%hu, OutCap=%hu, InCap=%hu, IsMS=%hu, IsFSFin=%hu")
TRC_MSG(VT_TRC_CMCREATEH263VIDEOREDMETHOD, "cmCreateH263VideoRedMethod=%d")
TRC_MSG(VT_TRC_CMCREATEH263VIDEOREDMETHOD_HAPP, "cmCreateH263VideoRedMethod: hApp=%08X")
TRC_MSG(VT_TRC_CMCREATENONSTANDARDREDMETHOD, "cmCreateNonStandardRedMethod=%d")
TRC_MSG(VT_TRC_CMCREATENONSTANDARDREDMETHOD_HAPP, "cmCreateNonStandardRedMethod: hApp=%08X")
TRC_MSG(VT_TRC_CMCREATERTPAUDIOREDMETHOD, "cmCreateRtpAudioRedMethod=%d")
TRC_MSG(VT_TRC_CMCREATERTPAUDIOREDMETHOD_HAPP, "cmCreateRtpAudioRedMethod: hApp=%08X")
TRC_MSG(VT_TRC_CMCREATETRANSPCAPABILITY, "cmCreateTranspCapability=%d")
TRC_MSG(VT_TRC_CMCREATETRANSPCAPABILITY_HAPP, "cmCreateTranspCapability: hApp=%08X")
TRC_MSG(VT_TRC_CMCREATETRANSPCAPABILITY_WITH_NONSTANDARD, "cmCreateTranspCapability: with nonStandard=%d")
TRC_MSG(VT_TRC_CMEMENCODE_INVALIDE_NODE_ID, "cmEmEncode: Invalide node id = %d")
TRC_MSG(VT_TRC_CMEVCALLCAPABILITIES, "cmEvCallCapabilities.")
TRC_MSG(VT_TRC_CMEVCALLCAPABILITIESEXT, "cmEvCallCapabilitiesExt.")
TRC_MSG(VT_TRC_CMEVCALLCAPABILITIESEXT_HACALL_HSCALL_CAPDESC, "cmEvCallCapabilitiesExt: haCall=%08X, hsCall=%08X, capDesc=NULL.")
TRC_MSG(VT_TRC_CMEVCALLCAPABILITIESEXT_HACALL_HSCALL_CAPDESC_1, "cmEvCallCapabilitiesExt: haCall=%08X, hsCall=%08X, capDesc=%08X.")
TRC_MSG(VT_TRC_CMEVCALLCAPABILITIESMUXCAP, "cmEvCallCapabilitiesMuxCap.")
TRC_MSG(VT_TRC_CMEVCALLCAPABILITIESMUXCAP_HACALL_HSCALL_CAPDESC, "cmEvCallCapabilitiesMuxCap: haCall=%08X, hsCall=%08X, capDesc=NULL.")
TRC_MSG(VT_TRC_CMEVCALLCAPABILITIESRESPONSE, "cmEvCallCapabilitiesResponse(haCall=%08X, hsCall=%08X, cmCapAccept)")
TRC_MSG(VT_TRC_CMEVCALLCAPABILITIESRESPONSE_1, "cmEvCallCapabilitiesResponse")
TRC_MSG(VT_TRC_CMEVCALLCAPABILITIESRESPONSE_2, "cmEvCallCapabilitiesResponse.")
TRC_MSG(VT_TRC_CMEVCALLCAPABILITIESRESPONSE_HACALL_HSCALL, "cmEvCallCapabilitiesResponse: haCall=%08X, hsCall=%08X, cmCapReject.")
TRC_MSG(VT_TRC_CMEVCALLCAPABILITIES_HACALL_HSCALL_CAPSET, "cmEvCallCapabilities: haCall=%08X, hsCall=%08X, capSet=%08X.")
TRC_MSG(VT_TRC_CMEVCALLCAPABILITIES_HACALL_HSCALL_CAPSET_NULL, "cmEvCallCapabilities: haCall=%08X, hsCall=%08X, capSet=NULL.")
TRC_MSG(VT_TRC_CMEVCALLCONTROLMESSAGE, "cmEvCallControlMessage(hsCall=%08X, hsChan=%08X, message=%d, messageType=%d)")
TRC_MSG(VT_TRC_CMEVCALLCONTROLMESSAGE_1, "cmEvCallControlMessage")
TRC_MSG(VT_TRC_CMEVCALLCONTROLSTATECHANGED, "cmEvCallControlStateChanged")
TRC_MSG(VT_TRC_CMEVCALLFASTSTART, "cmEvCallFastStart(haCall=%08X,hsCall=%08X)")
TRC_MSG(VT_TRC_CMEVCALLFASTSTARTSETUP, "cmEvCallFastStartSetup(haCall=%08X,hsCall=%08X)")
TRC_MSG(VT_TRC_CMEVCALLFASTSTARTSETUP_1, "cmEvCallFastStartSetup")
TRC_MSG(VT_TRC_CMEVCALLFASTSTART_1, "cmEvCallFastStart")
TRC_MSG(VT_TRC_CMEVCALLMASTERSLAVE, "cmEvCallMasterSlave(haCall=%08X, hsCall=%08X, terminalType =%d, statusDeterminationNumber=%d)")
TRC_MSG(VT_TRC_CMEVCALLMASTERSLAVEEXPECTEDSTATUS, "cmEvCallMasterSlaveExpectedStatus")
TRC_MSG(VT_TRC_CMEVCALLMASTERSLAVESTATUS, "cmEvCallMasterSlaveStatus(haCall=%08X, hsCall=%08X, status=error)")
TRC_MSG(VT_TRC_CMEVCALLMASTERSLAVESTATUS_1, "cmEvCallMasterSlaveStatus.")
TRC_MSG(VT_TRC_CMEVCALLMASTERSLAVESTATUS_2, "cmEvCallMasterSlaveStatus")
TRC_MSG(VT_TRC_CMEVCALLMASTERSLAVE_1, "cmEvCallMasterSlave")
TRC_MSG(VT_TRC_CMEVCALLMISCSTATUS, "cmEvCallMiscStatus(haCall=%08X,hsCall=%08X,status=mpModeOn)")
TRC_MSG(VT_TRC_CMEVCALLMISCSTATUS_1, "cmEvCallMiscStatus")
TRC_MSG(VT_TRC_CMEVCALLMISCSTATUS_2, "cmEvCallMiscStatus(haCall=%08X,hsCall=%08X,status=mpModeOff)")
TRC_MSG(VT_TRC_CMEVCALLMULTIPLEXENTRY, "cmEvCallMultiplexEntry.")
TRC_MSG(VT_TRC_CMEVCALLMULTIPLEXENTRYRESPONSE, "cmEvCallMultiplexEntryResponse.")
TRC_MSG(VT_TRC_CMEVCALLMULTIPLEXENTRYRESPONSE_HACALL_HSCALL, "cmEvCallMultiplexEntryResponse: haCall=%08X, hsCall=%08X, timeout.")
TRC_MSG(VT_TRC_CMEVCALLMULTIPLEXENTRYRESPONSE_HACALL_HSCALL_ISACK, "cmEvCallMultiplexEntryResponse: haCall=%08X, hsCall=%08X, isAck=TRUE, entries=%d,nodeId=%d.")
TRC_MSG(VT_TRC_CMEVCALLMULTIPLEXENTRYRESPONSE_HACALL_HSCALL_ISACK_1, "cmEvCallMultiplexEntryResponse: haCall=%08X, hsCall=%08X, isAck=FALSE, entries=%d, nodeId=%d.")
TRC_MSG(VT_TRC_CMEVCALLMULTIPLEXENTRY_ENTER, "cmEvCallMultiplexEntry: haCall=%08X, hsCall=%08X, nodeId=%d.")
TRC_MSG(VT_TRC_CMEVCALLMULTIPLEXENTRY_EXIT, "cmEvCallMultiplexEntry: EXIT")
TRC_MSG(VT_TRC_CMEVCALLMULTIPLEXENTRY_HACALL_HSCALL_NODEID, "cmEvCallMultiplexEntry: haCall=%08X, hsCall=%08X, nodeId=%d.")
TRC_MSG(VT_TRC_CMEVCALLNEWCHANNEL_HACALL_HSCALL, "cmEvCallNewChannel:(for MPC phantomChannel): haCall=%08X, hsCall=%08X. hsChan=%08X")
TRC_MSG(VT_TRC_CMEVCALLNEWCHANNEL_HACHAN, "cmEvCallNewChannel:(for MPC phantomChannel): haChan=%08X.")
TRC_MSG(VT_TRC_CMEVCALLNEWCHANNEL_IN_HACALL_HSCALL, "cmEvCallNewChannel:IN: haCall=%08X, hsCall=%08X. hsChan=%08X")
TRC_MSG(VT_TRC_CMEVCALLNEWCHANNEL_IN_HACHAN, "cmEvCallNewChannel:IN: haChan=%08X.")
TRC_MSG(VT_TRC_CMEVCALLREQUESTMODE, "cmEvCallRequestMode.")
TRC_MSG(VT_TRC_CMEVCALLREQUESTMODE_H263SWITCHVIDEOSIZE, "cmEvCallRequestMode: H.263 switching video size")
TRC_MSG(VT_TRC_CMEVCALLREQUESTMODE_H263SWITCHVIDEOSIZE_RESOLUTION, "cmEvCallRequestMode: H.263 switching video size, Resolution = %d")
TRC_MSG(VT_TRC_CMEVCALLREQUESTMODE_HACALL_HSCALL_CONFIRM_NODEID, "cmEvCallRequestMode: haCall=%08X, hsCall=%08X, confirm, nodeId=%d.")
TRC_MSG(VT_TRC_CMEVCALLREQUESTMODE_HACALL_HSCALL_REJECT_NODEID, "cmEvCallRequestMode: haCall=%08X, hsCall=%08X, reject, nodeId=%d.")
TRC_MSG(VT_TRC_CMEVCALLREQUESTMODE_HACALL_HSCALL_RELEASE, "cmEvCallRequestMode: haCall=%08X, hsCall=%08X, release.")
TRC_MSG(VT_TRC_CMEVCALLREQUESTMODE_HACALL_HSCALL_RELEASE_NODEID, "cmEvCallRequestMode: haCall=%08X, hsCall=%08X, release, nodeId=%d.")
TRC_MSG(VT_TRC_CMEVCALLREQUESTMODE_HACALL_HSCALL_TRANSFER, "cmEvCallRequestMode: haCall=%08X, hsCall=%08X, transfer, nodeId=%d.")
TRC_MSG(VT_TRC_CMEVCALLREQUESTMODE_RESPONSE_ACK, "cmEvCallRequestMode: ACK")
TRC_MSG(VT_TRC_CMEVCALLREQUESTMODE_RESPONSE_REJECT, "cmEvCallRequestMode: REJECT, h263Chan exist = %d, h263 resolution = %d")
TRC_MSG(VT_TRC_CMEVCALLREQUESTMULTIPLEXENTRYRESPONSE_ENTER, "cmEvCallRequestMultiplexEntryResponse: haCall=%08X, hsCall=%08X, isAck=TRUE, entries=%d,nodeId=%d.")
TRC_MSG(VT_TRC_CMEVCALLREQUESTMULTIPLEXENTRYRESPONSE_ENTER2, "cmEvCallMultiplexEntryResponse: haCall=%08X, hsCall=%08X, isAck=FALSE, entries=%d, nodeId=%d.")
TRC_MSG(VT_TRC_CMEVCALLREQUESTMULTIPLEXENTRYRESPONSE_ENTER3, "cmEvCallMultiplexEntryResponse: haCall=%08X, hsCall=%08X, timeout.")
TRC_MSG(VT_TRC_CMEVCALLREQUESTMULTIPLEXENTRYRESPONSE_EXIT, "cmEvCallRequestMultiplexEntryResponse: EXIT")
TRC_MSG(VT_TRC_CMEVCALLROUNDTRIPDELAY, "cmEvCallRoundTripDelay.")
TRC_MSG(VT_TRC_CMEVCALLROUNDTRIPDELAY_HACALL_HSCALL_DELAY, "cmEvCallRoundTripDelay: haCall=%08X, hsCall=%08X, delay=%d.")
TRC_MSG(VT_TRC_CMEVCALLROUNDTRIPDELAY_RTD, "cmEvCallRoundTripDelay: RTD = %d")
TRC_MSG(VT_TRC_CMEVCALLSENDTERMINALCAPABILITYSET_ENTER, "cmEvCallSendTerminalCapabilitySet: haCall=%08X, hsCall=%08X (ENTER)")
TRC_MSG(VT_TRC_CMEVCALLSENDTERMINALCAPABILITYSET_EXIT, "cmEvCallSendTerminalCapabilitySet: EXIT")
TRC_MSG(VT_TRC_CMEVCALLTERMINALNUMBERASSIGN, "cmEvCallTerminalNumberAssign(hsCall=%08X)")
TRC_MSG(VT_TRC_CMEVCALLTERMINALNUMBERASSIGN_0, "cmEvCallTerminalNumberAssign=0")
TRC_MSG(VT_TRC_CMEVCALLUSERINPUT, "cmEvCallUserInput(haCall=%08X,hsCall=%08X,id=%d)")
TRC_MSG(VT_TRC_CMEVCALLUSERINPUT_1, "cmEvCallUserInput")
TRC_MSG(VT_TRC_CMEVCALLVENDORIDENTIFICATION, "cmEvCallVendorIdentification.")
TRC_MSG(VT_TRC_CMEVCALLVENDORIDENTIFICATION_HACALL_HSCALL, "cmEvCallVendorIdentification: haCall=%08X, hsCall=%08X")
TRC_MSG(VT_TRC_CMEVCHANNELFLOWCONTROLTOZERO, "cmEvChannelFlowControlToZero(haChan=%08X,hsChan=%08X)")
TRC_MSG(VT_TRC_CMEVCHANNELFLOWCONTROLTOZERO_1, "cmEvChannelFlowControlToZero")
TRC_MSG(VT_TRC_CMEVCHANNELHANDLE, "cmEvChannelHandle(haChan=%08X, hsChan=%08X, handle=%d, type=%d)")
TRC_MSG(VT_TRC_CMEVCHANNELHANDLE_1, "cmEvChannelHandle.")
TRC_MSG(VT_TRC_CMEVCHANNELMASTERSLAVECONFLICT, "cmEvChannelMasterSlaveConflict(haChan=%08X,hsChan=%08X, conflictType=%d)")
TRC_MSG(VT_TRC_CMEVCHANNELMASTERSLAVECONFLICT_1, "cmEvChannelMasterSlaveConflict=%d")
TRC_MSG(VT_TRC_CMEVCHANNELMASTERSLAVECONFLICT_2, "cmEvChannelMasterSlaveConflict(haChan=%08X,hsChan=%08X,conflictType=%d)")
TRC_MSG(VT_TRC_CMEVCHANNELMASTERSLAVECONFLICT_3, "cmEvChannelMasterSlaveConflict.")
TRC_MSG(VT_TRC_CMEVCHANNELMASTERSLAVECONFLICT_HACHAN_HSCHAN, "cmEvChannelMasterSlaveConflict (Unanswered Proposals): haChan=%08X, hsChan=%08X.")
TRC_MSG(VT_TRC_CMEVCHANNELMASTERSLAVECONFLICT_IS_NULL_NOT, "cmEvChannelMasterSlaveConflict is NULL - not checking conflicts")
TRC_MSG(VT_TRC_CMEVCHANNELMAXSKEW, "cmEvChannelMaxSkew.")
TRC_MSG(VT_TRC_CMEVCHANNELMAXSKEW_HACALL_HSCALL_CHAN1_CHAN2, "cmEvChannelMaxSkew: haCall=%08X, hsCall=%08X, chan1=%08X, chan2=%08X, skew=%d.")
TRC_MSG(VT_TRC_CMEVCHANNELMAXSKEW_SKEW, "cmEvChannelMaxSkew: chan1_id=%d, chan2_id=%d, skew=%u")
TRC_MSG(VT_TRC_CMEVCHANNELMEDIALOOPSTATUS, "cmEvChannelMediaLoopStatus(haChan=%08X,hsChan=%08X,status=reject)")
TRC_MSG(VT_TRC_CMEVCHANNELMEDIALOOPSTATUS_1, "cmEvChannelMediaLoopStatus")
TRC_MSG(VT_TRC_CMEVCHANNELMEDIALOOPSTATUS_2, "cmEvChannelMediaLoopStatus.")
TRC_MSG(VT_TRC_CMEVCHANNELMEDIALOOPSTATUS_3, "cmEvChannelMediaLoopStatus(haChan=%08X,hsChan=%08X,status=off)")
TRC_MSG(VT_TRC_CMEVCHANNELMEDIALOOPSTATUS_HACHAN_HSCHAN_STATUS, "cmEvChannelMediaLoopStatus: haChan=%08X, hsChan=%08X, status=request.")
TRC_MSG(VT_TRC_CMEVCHANNELMEDIALOOPSTATUS_HACHAN_HSCHAN_STATUS_1, "cmEvChannelMediaLoopStatus: haChan=%08X, hsChan=%08X, status=confirm.")
TRC_MSG(VT_TRC_CMEVCHANNELMEDIALOOPSTATUS_HACHAN_HSCHAN_STATUS_2, "cmEvChannelMediaLoopStatus: haChan=%08X, hsChan=%08X, status=off.")
TRC_MSG(VT_TRC_CMEVCHANNELMISCCOMMAND, "cmEvChannelMiscCommand.")
TRC_MSG(VT_TRC_CMEVCHANNELMISCCOMMAND_1, "cmEvChannelMiscCommand(haChan=%08X,hsChan=%08X,type=%d)")
TRC_MSG(VT_TRC_CMEVCHANNELMISCCOMMAND_2, "cmEvChannelMiscCommand")
TRC_MSG(VT_TRC_CMEVCHANNELMISCCOMMAND_HACHAN_HSCHAN_TYPE, "cmEvChannelMiscCommand: haChan=%08X, hsChan=%08X, type=%d")
TRC_MSG(VT_TRC_CMEVCHANNELNEWRATE, "cmEvChannelNewRate.")
TRC_MSG(VT_TRC_CMEVCHANNELNEWRATE_HACHAN_HSCHAN_RATE, "cmEvChannelNewRate: haChan=%08X, hsChan=%08X, rate=%d.")
TRC_MSG(VT_TRC_CMEVCHANNELPARAMETERS, "cmEvChannelParameters.")
TRC_MSG(VT_TRC_CMEVCHANNELPARAMETERS_1, "cmEvChannelParameters(haChan=%08X,hsChan=%08X,channelName=NULL,AppSes=%08X,Ses=%08X,NULL,NULL,rate=-1)")
TRC_MSG(VT_TRC_CMEVCHANNELPARAMETERS_2, "cmEvChannelParameters")
TRC_MSG(VT_TRC_CMEVCHANNELPARAMETERS_HACALL_HSCALL_CHANNELNAME, "cmEvChannelParameters: haCall=%08X, hsCall=%08X, channelName=NULL, NULL, NULL, NULL, NULL, rate=-1.")
TRC_MSG(VT_TRC_CMEVCHANNELRECVMESSAGE, "cmEvChannelRecvMessage(haChan=%08X,hsChan=%08X,msg=%d)")
TRC_MSG(VT_TRC_CMEVCHANNELRECVMESSAGE_1, "cmEvChannelRecvMessage")
TRC_MSG(VT_TRC_CMEVCHANNELREPLACE, "cmEvChannelReplace.")
TRC_MSG(VT_TRC_CMEVCHANNELREPLACE_HACHAN_HSCHAN_HAREPLACECHAN, "cmEvChannelReplace: haChan=%08X, hsChan=%08X, haReplaceChan=%08X, hsReplaceChan=%08X.")
TRC_MSG(VT_TRC_CMEVCHANNELREQUESTCLOSESTATUS, "cmEvChannelRequestCloseStatus.")
TRC_MSG(VT_TRC_CMEVCHANNELREQUESTCLOSESTATUS_HACHAN_HSCHAN_STATUS, "cmEvChannelRequestCloseStatus: haChan=%08X, hsChan=%08X, status=reject.")
TRC_MSG(VT_TRC_CMEVCHANNELREQUESTCLOSESTATUS_HACHAN_HSCHAN_STATUS_1, "cmEvChannelRequestCloseStatus: haChan=%08X, hsChan=%08X, status=request.")
TRC_MSG(VT_TRC_CMEVCHANNELREQUESTCLOSESTATUS_HACHAN_HSCHAN_STATUS_2, "cmEvChannelRequestCloseStatus: haChan=%08X, hsChan=%08X, status=confirm.")
TRC_MSG(VT_TRC_CMEVCHANNELRTPDYNAMICPAYLOADTYPE, "cmEvChannelRTPDynamicPayloadType.")
TRC_MSG(VT_TRC_CMEVCHANNELRTPDYNAMICPAYLOADTYPE_HACALL_HSCALL, "cmEvChannelRTPDynamicPayloadType: haCall=%08X, hsCall=%08X, type=%d.")
TRC_MSG(VT_TRC_CMEVCHANNELSENDMESSAGE, "cmEvChannelSendMessage(haChan=%08X,hsChan=%08X,msg=%d)")
TRC_MSG(VT_TRC_CMEVCHANNELSENDMESSAGE_1, "cmEvChannelSendMessage")
TRC_MSG(VT_TRC_CMEVCHANNELSETADDRESS, "cmEvChannelSetAddress(haChan=%08X,hsChan=%08X,ip=0x%x,port=%d)")
TRC_MSG(VT_TRC_CMEVCHANNELSETADDRESS_1, "cmEvChannelSetAddress")
TRC_MSG(VT_TRC_CMEVCHANNELSETATMVC, "cmEvChannelSetATMVC(haChan=%08X,hsChan=%08X,portNumber=%d)")
TRC_MSG(VT_TRC_CMEVCHANNELSETATMVC_1, "cmEvChannelSetATMVC")
TRC_MSG(VT_TRC_CMEVCHANNELSETNSAPADDRESS, "cmEvChannelSetNSAPAddress(haChan=%08X,hsChan=%08X,addressLength=%d)")
TRC_MSG(VT_TRC_CMEVCHANNELSETNSAPADDRESS_1, "cmEvChannelSetNSAPAddress")
TRC_MSG(VT_TRC_CMEVCHANNELSETROLE, "cmEvChannelSetRole(haChan=%08X,hsChan=%08X)")
TRC_MSG(VT_TRC_CMEVCHANNELSETROLE_1, "cmEvChannelSetRole. Role: %d")
TRC_MSG(VT_TRC_CMEVCHANNELSETRTCPADDRESS, "cmEvChannelSetRTCPAddress.")
TRC_MSG(VT_TRC_CMEVCHANNELSETRTCPADDRESS_HACHAN_HSCHAN_IP_0X, "cmEvChannelSetRTCPAddress: haChan=%08X, hsChan=%08X, ip=0x%x, port=%d.")
TRC_MSG(VT_TRC_CMEVCHANNELSTATECHANGED, "cmEvChannelStateChanged.")
TRC_MSG(VT_TRC_CMEVCHANNELTRANSPORTCAPIND, "cmEvChannelTransportCapInd.")
TRC_MSG(VT_TRC_CMEVCHANNELTRANSPORTCAPIND_HACHAN_HSCHAN_NODEID, "cmEvChannelTransportCapInd: haChan=%08X, hsChan=%08X, (indication), nodeId=%d")
TRC_MSG(VT_TRC_CMEVCHANNELTSTO, "cmEvChannelTSTO.")
TRC_MSG(VT_TRC_CMEVCHANNELTSTO_HACHAN_HSCHAN_ISCOMMAND_VALUE, "cmEvChannelTSTO: haChan=%08X, hsChan=%08X, isCommand=%d (command), value=%d")
TRC_MSG(VT_TRC_CMEVCHANNELVIDEOFASTUPDATEGOB, "cmEvChannelVideoFastUpdateGOB.")
TRC_MSG(VT_TRC_CMEVCHANNELVIDEOFASTUPDATEGOB_HACHAN_HSCHAN_FIRSTGOB, "cmEvChannelVideoFastUpdateGOB: haChan=%08X, hsChan=%08X, firstGOB=%d, #GOBS=%d.")
TRC_MSG(VT_TRC_CMEVCHANNELVIDEOFASTUPDATEMB, "cmEvChannelVideoFastUpdateMB.")
TRC_MSG(VT_TRC_CMEVCHANNELVIDEOFASTUPDATEMB_HACHAN_HSCHAN_FIRSTGOB, "cmEvChannelVideoFastUpdateMB: haChan=%08X, hsChan=%08X, firstGOB=%d, firstMB=%d, #MS=%d.")
TRC_MSG(VT_TRC_CMEVCHANNELVIDEOFASTUPDATEPICTURE, "cmEvChannelVideoFastUpdatePicture(haChan=%08X,hsChan=%08X)")
TRC_MSG(VT_TRC_CMEVCHANNELVIDEOFASTUPDATEPICTURE_1, "cmEvChannelVideoFastUpdatePicture")
TRC_MSG(VT_TRC_CMEVREQUESTMODE_RESET_RM, "cmEvRequestMode: (Reset RequestMode) chan id = %d")
TRC_MSG(VT_TRC_CMFASTSTARTBUILD, "cmFastStartBuild=%d")
TRC_MSG(VT_TRC_CMFASTSTARTBUILD_HSCALL, "cmFastStartBuild: hsCall=%08X")
TRC_MSG(VT_TRC_CMFASTSTARTCHANNELSACK, "cmFastStartChannelsAck=%d")
TRC_MSG(VT_TRC_CMFASTSTARTCHANNELSACKINDEX, "cmFastStartChannelsAckIndex=%d")
TRC_MSG(VT_TRC_CMFASTSTARTCHANNELSACKINDEX_HSCALL_INDEX, "cmFastStartChannelsAckIndex: hsCall=%08X,index = %d")
TRC_MSG(VT_TRC_CMFASTSTARTCHANNELSACKINDEX_OUT_OF_ROOM, "cmFastStartChannelsAckIndex: out of room [-1]")
TRC_MSG(VT_TRC_CMFASTSTARTCHANNELSACK_HSCALL, "cmFastStartChannelsAck: hsCall=%08X")
TRC_MSG(VT_TRC_CMFASTSTARTCHANNELSREADY_1, "cmFastStartChannelsReady=1")
TRC_MSG(VT_TRC_CMFASTSTARTCHANNELSREADY_HSCALL, "cmFastStartChannelsReady: hsCall=%08X")
TRC_MSG(VT_TRC_CMFASTSTARTCHANNELSREFUSE_1, "cmFastStartChannelsRefuse=1")
TRC_MSG(VT_TRC_CMFASTSTARTCHANNELSREFUSE_HSCALL, "cmFastStartChannelsRefuse: hsCall=%08X")
TRC_MSG(VT_TRC_CMFASTSTARTGETBYINDEX, "cmFastStartGetByIndex=%d")
TRC_MSG(VT_TRC_CMFASTSTARTGETBYINDEX_HSCALL, "cmFastStartGetByIndex: hsCall=%08X")
TRC_MSG(VT_TRC_CMFASTSTARTGET_0, "cmFastStartGet=0")
TRC_MSG(VT_TRC_CMFASTSTARTGET_HSCALL, "cmFastStartGet: hsCall=%08X")
TRC_MSG(VT_TRC_CMFASTSTARTOPENCHANNELS, "cmFastStartOpenChannels=%d")
TRC_MSG(VT_TRC_CMFASTSTARTOPENCHANNELS_HSCALL, "cmFastStartOpenChannels: hsCall=%08X")
TRC_MSG(VT_TRC_CMFREECAPABILITY_1, "cmFreeCapability=1")
TRC_MSG(VT_TRC_CMFREECAPABILITY_HSCALL, "cmFreeCapability: hsCall=%08X.")
TRC_MSG(VT_TRC_CMGETCHANNELEVENTHANDLER_0, "cmGetChannelEventHandler=0")
TRC_MSG(VT_TRC_CMGETCHANNELEVENTHANDLER_HAPP_CMCHANNELEVENT, "cmGetChannelEventHandler: hApp=%08X, cmChannelEvent=%08X, size=%d.")
TRC_MSG(VT_TRC_CMGETCONFIGCHANNELDATATYPE, "cmGetConfigChannelDataType=%d")
TRC_MSG(VT_TRC_CMGETCONFIGCHANNELDATATYPE_RETURN, "cmGetConfigChannelDataType: return %d")
TRC_MSG(VT_TRC_CMGETCONFIGCHANNELS, "cmGetConfigChannels=%d")
TRC_MSG(VT_TRC_CMGETCONFIGCHANNELS_HAPP, "cmGetConfigChannels: hApp=%08X")
TRC_MSG(VT_TRC_CMGETCONTROLEVENTHANDLER_0, "cmGetControlEventHandler=0")
TRC_MSG(VT_TRC_CMGETCONTROLEVENTHANDLER_HAPP_CMSESSIONEVENT, "cmGetControlEventHandler: hApp=%08X, cmSessionEvent=%08X, size=%d.")
TRC_MSG(VT_TRC_CMGETCUSTOMFRAMETOTHREADMAPPING, "cmGetCustomFrameToThreadMapping=%d")
TRC_MSG(VT_TRC_CMGETCUSTOMFRAMETOTHREADMAPPING_H263ENCMETHODID, "cmGetCustomFrameToThreadMapping: h263EncMethodId = %d ")
TRC_MSG(VT_TRC_CMGETH245CONFIGURATIONHANDLE, "cmGetH245ConfigurationHandle=%d")
TRC_MSG(VT_TRC_CMGETH245CONFIGURATIONHANDLE_HAPP, "cmGetH245ConfigurationHandle: hApp=%08X.")
TRC_MSG(VT_TRC_CMGETH263REDUNDANCYENCODING, "cmGetH263RedundancyEncoding=%d")
TRC_MSG(VT_TRC_CMGETH263REDUNDANCYENCODING_H263ENCMETHODID, "cmGetH263RedundancyEncoding: h263EncMethodId = %d ")
TRC_MSG(VT_TRC_CMGETREDUNDANCYENCODINGMETHOD_ENCODINGMETHOD, "cmGetRedundancyEncodingMethod: encodingMethod [%d] nodeId [%d].")
TRC_MSG(VT_TRC_CMGETREDUNDANCYENCODINGMETHOD_REDENCMETHODID, "cmGetRedundancyEncodingMethod: redEncMethodId = %d ")
TRC_MSG(VT_TRC_CMGETTRANSPORTCAPABILITIES_CAPID_TRANSPID, "cmGetTransportCapabilities: capId =[%d] transpId = [%d].")
TRC_MSG(VT_TRC_CMGETTRANSPORTCAPABILITIES_HSCALL, "cmGetTransportCapabilities: hsCall=%08X")
TRC_MSG(VT_TRC_CMGETTRANSPORTCAPMEDIA_HAPP_TRANSPID, "cmGetTransportCapMedia: hApp=%08X transpId [%d]")
TRC_MSG(VT_TRC_CMGETTRANSPORTCAPMEDIA_TRANSPID, "cmGetTransportCapMedia: transpId = [%d], mediaChannelCapabilitySize [%d]")
TRC_MSG(VT_TRC_CMGETTRANSPORTCAPNONSTANDARD_HAPP, "cmGetTransportCapNonStandard: hApp=%08X")
TRC_MSG(VT_TRC_CMGETTRANSPORTCAPNONSTANDARD_TRANSPID, "cmGetTransportCapNonStandard: transpId = [%d],nonStandardId = [%d].")
TRC_MSG(VT_TRC_CMGETTRANSPORTCAPQOSPARAMETERS_HAPP_TRANSPID, "cmGetTransportCapQosParameters: hApp=%08X transpId [%d]")
TRC_MSG(VT_TRC_CMGETTRANSPORTCAPQOSPARAMETERS_TRANSPID, "cmGetTransportCapQosParameters: transpId = [%d], cmQOSCapabilitySize [%d]")
TRC_MSG(VT_TRC_CMGETTRANSPORTCAPQOSPARAMETERS_TRANSPID_CHILDS, "cmGetTransportCapQosParameters: transpId = [%d], childs [%d]")
TRC_MSG(VT_TRC_CMIOPENMONAMPCCHANNELS_REMOVING_MPC_H245_CHANNEL, "cmiOpenMonaMPCChannels: Removing MPC H245 channel, lcn = %d (outgoing = %d)")
TRC_MSG(VT_TRC_CMMASTERSLAVEDETERMINE, "cmMasterSlaveDetermine=%d")
TRC_MSG(VT_TRC_CMMASTERSLAVEDETERMINEEXT, "cmMasterSlaveDetermineExt=%d")
TRC_MSG(VT_TRC_CMMASTERSLAVEDETERMINEEXT_HSCALL_TERMINALTYPE, "cmMasterSlaveDetermineExt: hsCall=%08X, terminalType=%d determinationNumber = %d. ")
TRC_MSG(VT_TRC_CMMASTERSLAVEDETERMINE_HSCALL_TERMINALTYPE, "cmMasterSlaveDetermine: hsCall=%08X, terminalType=%d.")
TRC_MSG(VT_TRC_CMREQUESTMODEBUILD, "cmRequestModeBuild=%d")
TRC_MSG(VT_TRC_CMREQUESTMODEBUILD_HAPP, "cmRequestModeBuild: hApp=%08X")
TRC_MSG(VT_TRC_CMREQUESTMODEBUILD_HAPP_ROOT, "cmRequestModeBuild: hApp=%08X, root =%d")
TRC_MSG(VT_TRC_CMREQUESTMODESTRUCTBUILD_HAPP, "cmRequestModeStructBuild: hApp=%08X")
TRC_MSG(VT_TRC_CMREQUESTMODESTRUCTBUILD_HAPP_OVERFLOW, "cmRequestModeStructBuild: hApp=%08X: Overflow")
TRC_MSG(VT_TRC_CMREQUESTMODESTRUCTBUILD_RV_ERROR_UNKNOWN, "cmRequestModeStructBuild: RV_ERROR_UNKNOWN")
TRC_MSG(VT_TRC_CMSETCHANNELEVENTHANDLER_0, "cmSetChannelEventHandler=0")
TRC_MSG(VT_TRC_CMSETCHANNELEVENTHANDLER_HAPP_CMCHANNELEVENT, "cmSetChannelEventHandler: hApp=%08X, cmChannelEvent=%08X, size=%d.")
TRC_MSG(VT_TRC_CMSETSESSIONEVENTHANDLER_0, "cmSetSessionEventHandler=0")
TRC_MSG(VT_TRC_CMSETSESSIONEVENTHANDLER_HAPP_CMSESSIONEVENT, "cmSetSessionEventHandler: hApp=%08X, cmSessionEvent=%08X, size=%d.")
TRC_MSG(VT_TRC_CMUSERINPUTBUILDALPHANUMERIC, "cmUserInputBuildAlphanumeric=%d")
TRC_MSG(VT_TRC_CMUSERINPUTBUILDALPHANUMERIC_HAPP_USERDATA, "cmUserInputBuildAlphanumeric: hApp=%08X, userData=%08X")
TRC_MSG(VT_TRC_CMUSERINPUTBUILDNONSTANDARD, "cmUserInputBuildNonStandard=%d")
TRC_MSG(VT_TRC_CMUSERINPUTBUILDNONSTANDARD_1, "cmUserInputBuildNonStandard=-1")
TRC_MSG(VT_TRC_CMUSERINPUTBUILDNONSTANDARD_HAPP_ID_DATA, "cmUserInputBuildNonStandard: hApp=%08X, id=%08X, data=%08X (%d)")
TRC_MSG(VT_TRC_CMUSERINPUTBUILDWITHGENERICINFORMATION, "cmUserInputBuildWithGenericInformation=%d")
TRC_MSG(VT_TRC_CMUSERINPUTBUILDWITHGENERICINFORMATION_HAPP, "cmUserInputBuildWithGenericInformation: hApp=%08X")
TRC_MSG(VT_TRC_CMUSERINPUTGET, "cmUserInputGet: [1] (nonStandard)")
TRC_MSG(VT_TRC_CMUSERINPUTGETDETAIL, "cmUserInputGetDetail(hApp=%08X,UI id=%d)")
TRC_MSG(VT_TRC_CMUSERINPUTGETGENERICINFORMATION, "cmUserInputGetGenericInformation=%d")
TRC_MSG(VT_TRC_CMUSERINPUTGETGENERICINFORMATION_HAPP, "cmUserInputGetGenericInformation: hApp=%08X")
TRC_MSG(VT_TRC_CMUSERINPUTGETSIGNALUPDATE_HAPP, "cmUserInputGetSignalUpdate: hApp=%08X")
TRC_MSG(VT_TRC_CMUSERINPUTGETSIGNALUPDATE_HAPP_UI_ID, "cmUserInputGetSignalUpdate: hApp=%08X, UI id=%d")
TRC_MSG(VT_TRC_CMUSERINPUTGETSIGNAL_HAPP, "cmUserInputGetSignal: hApp=%08X")
TRC_MSG(VT_TRC_CMUSERINPUTGETSIGNAL_HAPP_UI_ID, "cmUserInputGetSignal: hApp=%08X, UI id=%d")
TRC_MSG(VT_TRC_CMUSERINPUTGET_1, "cmUserInputGet: [1] (alphanumeric)")
TRC_MSG(VT_TRC_CMUSERINPUTGET_2, "cmUserInputGet: [-1] (unknown/unsupported)")
TRC_MSG(VT_TRC_CMUSERINPUTGET_HAPP_UI_ID, "cmUserInputGet: hApp=%08X, UI id=%d")
TRC_MSG(VT_TRC_CMUSERINPUTSIGNALBUILD, "cmUserInputSignalBuild=%d")
TRC_MSG(VT_TRC_CMUSERINPUTSIGNALBUILD_HAPP, "cmUserInputSignalBuild: hApp=%08X")
TRC_MSG(VT_TRC_CMUSERINPUTSIGNALUPDATEBUILD, "cmUserInputSignalUpdateBuild=%d")
TRC_MSG(VT_TRC_CMUSERINPUTSIGNALUPDATEBUILD_HAPP, "cmUserInputSignalUpdateBuild: hApp=%08X")
TRC_MSG(VT_TRC_CMUSERINPUTSUPPORTGET, "cmUserInputSupportGet(hApp=%08X,UI id=%d)")
TRC_MSG(VT_TRC_CMUSERINPUTSUPPORTINDICATIONBUILD, "cmUserInputSupportIndicationBuild(hApp=%08X,userInputSupport=%d)")
TRC_MSG(VT_TRC_CMUSERINPUTSUPPORTINDICATIONBUILD_1, "cmUserInputSupportIndicationBuild=%d")
TRC_MSG(VT_TRC_COMMUNICATIONMODECOMMAND_NO_DATA_TYPE, "communicationModeCommand: no data type.")
TRC_MSG(VT_TRC_COMMUNICATIONMODECOMMAND_UNABLE_TO_ALLOCATE, "communicationModeCommand: Unable to allocate channel")
TRC_MSG(VT_TRC_CONTROLASSEMBLECCSRLSEGMENT_FAILED_BECAUSE, "ControlAssembleCCSRLSegment Failed because the buffer that was suplied is not big enough. control instance: %08X")
TRC_MSG(VT_TRC_CONTROLASSEMBLECCSRLSEGMENT_FAILED_BUFFER_SUPPLIED, "ControlAssembleCCSRLSegment Failed: Buffer supplied is not big enough. control instance: %08X")
TRC_MSG(VT_TRC_CONTROLCREATECCSRLSEGMENT_FAILED_TO_ALLOCATE, "ControlCreateCCSRLSegment Failed to allocate rpool elements. control instance: %08X")
TRC_MSG(VT_TRC_CONTROLCREATECCSRLSEGMENT_TOO_MANY_MESSAGES, "ControlCreateCCSRLSegment - Too many messages are sent simultanyously or max CCSRL size too small")
TRC_MSG(VT_TRC_CONTROLFREEFORMODESWITCHTOWNSRP, "[xSRP] ControlFreeRpoolForModeSwitchToWNSRP: Free NSRP %d")
TRC_MSG(VT_TRC_CONTROLFREERPOOL_PINST_CLEARING_UP_XSRP, "ControlFreeRpool: pinst=%08X Clearing up xSRP %d")
TRC_MSG(VT_TRC_CONTROLFREERPOOL_WNSRP_SEND_SIZE_NOT_ZERO, "[xSRP] ControlFreeRpool: idx=%d, access mark=%d")
TRC_MSG(VT_TRC_CONTROLMSGRECEIVED_AFTER_PROCESS_INCOMING_RA_ELEM, "ControlMsgReceived: After process incoming msg, ra curNumOfElements = %d")
TRC_MSG(VT_TRC_CONTROLMSGRECEIVED_BEFORE_PROCESS_INCOMING_RA_ELEM, "ControlMsgReceived: Before process incoming msg, ra curNumOfElements = %d")
TRC_MSG(VT_TRC_CONTROLMSGRECEIVED_ENTER, "controlMsgReceived: Fail - result = %d")
TRC_MSG(VT_TRC_CONTROLMUXERRELEASEEV_ENTER_RTX_ON_IDLE, "[xSRP][ControlMuxerReleaseEv] Enter Rtx on idle")
TRC_MSG(VT_TRC_CONTROLMUXERRELEASEEV_WNSRP_INFO, "[xSRP] WNSRP Data ptr: %x, start addr: %x, idx=%d")
TRC_MSG(VT_TRC_CONTROLRETRANSMITSELECTEDMUXSDU_RESEND_NSRP_SUCC, "[xSRP][ControlRetransmitSelectedMuxSdu] re-send succ: nsrp, sq = %d, n400 = %d")
TRC_MSG(VT_TRC_CONTROLRETRANSMITSELECTEDMUXSDU_RESEND_WNSRP_SUCC, "[xSRP][ControlRetransmitSelectedMuxSdu] re-send succ: wnsrp, sq = %d, n400 = %d")
TRC_MSG(VT_TRC_CONTROLRETRANSMITSELECTEDMUXSDU_WNSRP_RESEND_AFTER_ACK, "WNSRP has been acked but try to re-send: idx = %hu, fsi = %hu, lsi = %hu")
TRC_MSG(VT_TRC_CONTROLSENDNSRP_ACCESS_MARK, "[xSRP][ControlSendNSRP] access mark %d [Ln:%d]")
TRC_MSG(VT_TRC_CONTROLSENDNSRP_BAD_REASON, "[xSRP]ControlSendNSRP: Bad reason=%d")
TRC_MSG(VT_TRC_CONTROLSENDNSRP_MUXDATAREQUEST_FAIL, "Calling RvH223MuxerMuxDataRequest: status = %d empty packet")
TRC_MSG(VT_TRC_CONTROLSENDNSRP_MUXDATAREQUEST_FAIL_ACK, "Calling RvH223MuxerMuxDataRequest: status = %d, xsrp ack sq = %d")
TRC_MSG(VT_TRC_CONTROLSENDNSRP_MUXDATAREQUEST_FAIL_DATA, "Calling RvH223MuxerMuxDataRequest: status = %d, xsrp sq = %d")
TRC_MSG(VT_TRC_CONTROLSENDNSRP_NSRP_ACK, "[xSRP][ControlSendNSRP][NSRP ACK] -> Ack sq = %hu, ack counter = %hu, N400 Counter = %hu")
TRC_MSG(VT_TRC_CONTROLSENDNSRP_NSRP_DATA, "[xSRP][ControlSendNSRP][NSRP DATA] -> sq = %hu, payload size = %hd, N400 Counter = %hu")
TRC_MSG(VT_TRC_CONTROLSENDNSRP_WNSRP_ACK, "[xSRP][ControlSendNSRP][WNSRP ACK] -> start index = %hu, ack counter = %hu, N400 Counter = %hu")
TRC_MSG(VT_TRC_CONTROLSENDNSRP_WNSRP_DATA, "[xSRP][ControlSendNSRP][WNSRP DATA] -> sq = %hu, payload size = %hd, payload type = %hu")
TRC_MSG(VT_TRC_CONTROLSENDNSRP_WNSRP_DATA2, "[xSRP][ControlSendNSRP][WNSRP DATA] -> sq = %hu, payload size = %hd, SWI = %hu, FSI = %hu, AWI = %hu, Q size = %hu")
TRC_MSG(VT_TRC_CONTROLT401TIMEREV_EXCEED_MAX_TRIALS, "ControlT401TimerEv: Exceed N400 Counter")
TRC_MSG(VT_TRC_CONTROLT401TIMEREV_INFO, "[xSRP][ControlT401TimerEv] INDX = %d")
TRC_MSG(VT_TRC_CONTROLT401TIMEREV_NORTX_FAIL, "ControlT401TimerEv: NoRtx, Fail")
TRC_MSG(VT_TRC_CONTROLT401TIMEREV_NSRP_EXCEED_MAX_TRIALS, "ControlT401TimerEv: NSRP Exceed N400 Counter, FSI = %hu, AckWaiting = %hu, nsrpSendNumber = %hu, controlModeType = %hu")
TRC_MSG(VT_TRC_CONTROLT401TIMEREV_WNSRP_EXCEED_MAX_TRIALS, "ControlT401TimerEv: WNSRP Exceed N400 Counter, IDX =%d, controlModeType = %d")
TRC_MSG(VT_TRC_COTNROLFREERPOOLFORMODESWITCHTONSRP_CTRL_INFO, "[xSRP][ControlFreeRpoolForModeSwitchToNSRP]FSI = %hu, LSI = %hu, SEND Size = %hu")
TRC_MSG(VT_TRC_COTNROLFREERPOOLFORMODESWITCHTOWNSRP_CTRL_INFO, "[xSRP][ControlFreeRpoolForModeSwitchToWNSRP]FSI = %hu, LSI = %hu, SEND Size = %hu")
TRC_MSG(VT_TRC_COTNROLFREERPOOL_CTRL_INFO, "[xSRP][ControlFreeRpool] hdr = %hu, SQ = %hu, PT = %hu, FSI = %hu, ACCESS_MARK = %hu, SEND Size = %hu")
TRC_MSG(VT_TRC_COTNROLMUXERRELEASEEV_CTRL_INFO, "[xSRP][ControlMuxerReleaseEv]Ctrl: sq = %hu, waiting = %hu, Frame HDR = %hu, PT = %hu")
TRC_MSG(VT_TRC_COTNROLMUXERRELEASEEV_PT_DONE, "[xSRP][ControlMuxerReleaseEv]PT = DONE, FSI = %d, ACCESS_MARK = %d")
TRC_MSG(VT_TRC_CREATECCSRLSEG_FREE_PAYLOAD, "[xSRP][Create CCSRL] Free xSRP %x [Ln:%d]")
TRC_MSG(VT_TRC_CREATEH263VIDEOREDMETHOD, "createH263VideoRedMethod=%d")
TRC_MSG(VT_TRC_CREATEH263VIDEOREDMETHOD_HAPP, "createH263VideoRedMethod: hApp=%08X")
TRC_MSG(VT_TRC_CREATEIOCOMPLETIONPORT_FAILURE, "CreateIoCompletionPort failure")
TRC_MSG(VT_TRC_CREATENONSTANDARDREDMETHOD, "createNonStandardRedMethod=%d")
TRC_MSG(VT_TRC_CREATENONSTANDARDREDMETHOD_HAPP, "createNonStandardRedMethod: hApp=%08X")
TRC_MSG(VT_TRC_CREATERTPAUDIOREDMETHOD, "createRtpAudioRedMethod=%d")
TRC_MSG(VT_TRC_CREATERTPAUDIOREDMETHOD_HAPP, "createRtpAudioRedMethod: hApp=%08X")
TRC_MSG(VT_TRC_CREATETRANSPCAPABILITY, "createTranspCapability=%d")
TRC_MSG(VT_TRC_CREATETRANSPCAPABILITY_HAPP, "createTranspCapability: hApp=%08X")
TRC_MSG(VT_TRC_CREATING_KQUEUE_FAILURE, "creating kqueue failure")
TRC_MSG(VT_TRC_CSM_DEACTIVATE_REQ_HDLR_CALL_STATE, "vt_csm_deactivate_req_hdlr: current callMsgState=%d")
TRC_MSG(VT_TRC_CSM_SEND_DEACTIVATE_CNF_CALL_STATE, "vt_csm_send_deactivate_cnf: current callMsgState=%d")
TRC_MSG(VT_TRC_CSR_CONSUME_DL_DATA_CUR_Q_SIZE, "[CSR Q] Current Q size = %d (LN: %d)")
TRC_MSG(VT_TRC_CSR_PUT_DOWNLINK_FAIL_TO_GET_WRITE_BUF, "[CSR->VT] Fail to get write buffer! current Q size = %hu, enq len = %hu (LN: %d)")
TRC_MSG(VT_TRC_CSR_PUT_DOWNLINK_LEN_IS_ZERO, "[CSR->VT] DL Data Len is zero !!!")
TRC_MSG(VT_TRC_CSR_QUEUE_DL_OVERFLOW, "VT-CSR: DL queue overflow")
TRC_MSG(VT_TRC_CSR_QUEUE_DL_STARVATION, "VT-CSR: DL queue startvation")
TRC_MSG(VT_TRC_CSR_QUEUE_UL_OVERFLOW, "VT-CSR: UL queue overflow")
TRC_MSG(VT_TRC_CSR_QUEUE_UL_STARVATION, "VT-CSR: UL queue startvation")
TRC_MSG(VT_TRC_DEBUG_LEVEL, "Debug level: %d")
TRC_MSG(VT_TRC_DECODING_ERROR_OVERFLOW_OF_BUFFER, "Decoding error: Overflow of buffer.")
TRC_MSG(VT_TRC_DECODING_OPEN_TYPE, "Decoding open type.")
TRC_MSG(VT_TRC_DECODING_TAG_LEVEL, "Decoding Tag:%d : Level %d [%d]")
TRC_MSG(VT_TRC_DEMUXACPDATAINDICATION_DEMUX_INSTANCE_SAVING, "DemuxACPDataIndication: demux instance: %08X Saving video data to buffer %08X")
TRC_MSG(VT_TRC_DEMUXACPDATAINDICATION_DEMUX_INSTANCE_VIDEO, "DemuxACPDataIndication: demux instance: %08X Video Data is Lost")
TRC_MSG(VT_TRC_DEMUXEVENTADD_TOO_MANY_DEMUX_EVENTS_IN_CALLS, "DemuxEventAdd: Too many demux events in call's queue %08X")
TRC_MSG(VT_TRC_DEMUXEVENTSHANDLE_CALL_WAS_DELETED_WHILE_HANDLING, "DemuxEventsHandle: Call=%08X was deleted while handling events")
TRC_MSG(VT_TRC_DEMUXREPLAYSAVEDVIDEODATA_DEMUX_INSTANCE_REPLAYING, "DemuxReplaySavedVideoData: demux instance: %08X Replaying buffer %08X (Index=%d)")
TRC_MSG(VT_TRC_DEMUXREPLAYSAVEDVIDEODATA_ENTER, "[MONA]DemuxReplaySavedVideoData: Enter [Total = %d video pkts]")
TRC_MSG(VT_TRC_DEMUXREPLAYSAVEDVIDEODATA_LEAVE, "[MONA]DemuxReplaySavedVideoData: Leave")
TRC_MSG(VT_TRC_DEMUXSAVEVIDEODATA2BUFFERS_DEMUX_INSTANCE_ALL, "DemuxSaveVideoData2Buffers: demux instance: %08X All Buffers Used - Video AL-SDU Lost")
TRC_MSG(VT_TRC_DEMUXSAVEVIDEODATA2BUFFERS_DEMUX_INSTANCE_VIDEO, "DemuxSaveVideoData2Buffers: demux instance: %08X Video Buffering Blocked - Video AL-SDU Lost")
TRC_MSG(VT_TRC_DEMUXSAVEVIDEODATA2BUFFERS_DEMUX_INSTANCE_VIDEO_1, "DemuxSaveVideoData2Buffers: demux instance: %08X Video AL-SDU saved - buffer %08X size %d index %hu")
TRC_MSG(VT_TRC_DEMUX_DEMUXCREATEMPCCHANNELS_MPC_CHANNEL_OPENED, "demux %08X: DemuxCreateMPCChannels: MPC channel %d opened in the demux")
TRC_MSG(VT_TRC_DEMUX_RVH223DEMUXREMOVEMONAMPCCHANNEL_MPC_CHANNEL, "demux %08X: RvH223DemuxRemoveMonaMPCChannel: MPC channel %hu removed (status = %d)")
TRC_MSG(VT_TRC_DETERMINE_MUX_LEVEL_LOST_SYNC,"DetermineMuxLevel: Lost sync [Ln: %d]")
TRC_MSG(VT_TRC_DL_MP4_VOS, "MP4 VOS")
TRC_MSG(VT_TRC_DL_VIDEO_ATTACH_CUR_FRAME_FAIL_BUFF_FULL, "[vt_med_downlink_video_Q][attach_to_cur_frame fail] Buffer full! cpy_size=%u, Current w_idx: %u, r_idx: %u, q_size: %u [Ln:%d]")
TRC_MSG(VT_TRC_DL_VIDEO_GET_FRAME_BUFFER_Q_FULL, "[vt_med_downlink_video_Q][Fail to get frame] Data Buffer Full! Current w_idx: %u, r_idx: %u, q_size: %u [Ln:%d]")
TRC_MSG(VT_TRC_DL_VIDEO_GET_FRAME_META_Q_FULL, "[vt_med_downlink_video_Q][Fail to get frame] DL META Q Full! Current w_idx: %d [Ln:%d]")
TRC_MSG(VT_TRC_DOWNLINK_AUDIO_RAW_DATA, "Downlink/Decode audio raw data")
TRC_MSG(VT_TRC_DOWNLINK_H223_PDU_RAW_DATA, "Downlink H223 pdu raw data")
TRC_MSG(VT_TRC_DOWNLINK_VIDEO_ENQUEUE_NO_MP4_CFG_FIRST_PKT_NOT_CFG, "DL_Video_Enqueue(No_MP4_Cfg): INIT_STATE, Parse first video pkt not Cfg [len=%u, is_New_session?%hu, is_New_frame?%hu, is_Sync=%hu]")
TRC_MSG(VT_TRC_DOWNLINK_VIDEO_ENQUEUE_NO_MP4_CFG_FIRST_PKT_PARSE_ERROR, "DL_Video_Enqueue(No_MP4_Cfg): INIT_STATE, Parse first video pkt error [status:%d]")
TRC_MSG(VT_TRC_DOWNLINK_VIDEO_ENQUEUE_NO_MP4_CFG_FIRST_PKT_PARSE_OK, "DL_Video_Enqueue(No_MP4_Cfg): New MP4 Cfg")
TRC_MSG(VT_TRC_DOWNLINK_VIDEO_Q_ATTACH_TO_CUR_FRAME_BUFF_FULL, "[vt_med_downlink_video_Q] Frame size too large! total=%u, size=%u [Ln:%d]")
TRC_MSG(VT_TRC_DOWNLINK_VIDEO_Q_RECV_I_FRAME_EV, "[DL][Video] Receive I frame event")
TRC_MSG(VT_TRC_DOWNLINK_VIDEO_Q_REQ_I_FRAME, "[DL][Video] Request I frame")
TRC_MSG(VT_TRC_DOWNLINK_VIDEO_Q_RESET, "DL Q Reset")
TRC_MSG(VT_TRC_DOWNLINK_VIDEO_Q_SESSION_ID_MISMATCH, "[DL_Video_Q] expected: %hu, actual: %hu [Ln:%d]")
TRC_MSG(VT_TRC_DOWNLINK_VIDEO_RAW_DATA, "Downlink/Decode video raw data")
TRC_MSG(VT_TRC_EM_INCOMING_CTRL_MSG, "[EM] Incoming Ctrl Msg, sq = %d, isAck = %d")
TRC_MSG(VT_TRC_EM_OUTGOING_CTRL_MSG, "[EM] Outgoing Ctrl Msg, sq = %d, isAck = %d")
TRC_MSG(VT_TRC_ENCODEANDSENDMESSAGE_FAIL_ERROR_ENCODING, "encodeAndSendMessage: Sending Failure - Error Encoding, Msg Id = %d")
TRC_MSG(VT_TRC_ENCODEANDSENDMESSAGE_FAIL_PERERROR_OR_NOTENOUGHROOM, "encodeAndSendMessage: Sending Failure - per error or not enough room")
TRC_MSG(VT_TRC_ENCODEANDSENDMESSAGE_FAIL_TOO_MANY_SEGMENTS, "encodeAndSendMessage: Sending Failure - Too many segments, MsgId = %d")
TRC_MSG(VT_TRC_ENCODEANDSENDMESSAGE_MSG_STATUS, "encodeAndSendMessage: msg id = %d, status = %d (>=0 means sent succ), (Processing: %d/%hu)")
TRC_MSG(VT_TRC_ENCODEANDSENDMESSAGE_NEW_MSG_SENT, "ENCODEANDSENDMSG: New msg sent --> fieldId = %d")
TRC_MSG(VT_TRC_ENCODING_ERROR_OVERFLOW_OF_BUFFER, "Encoding error: Overflow of buffer. perEncNode() return %d")
TRC_MSG(VT_TRC_ENCODING_OPENTYPE_INSERTED_BITS_IN, "Encoding OPENTYPE: inserted %d bits in [%d].")
TRC_MSG(VT_TRC_ENCODING_OPENTYPE_RESERVED_ONE_BYTE_FOR, "Encoding OPENTYPE: reserved one byte for length.")
TRC_MSG(VT_TRC_END_QUERY_ERRONEOUS_RESPONSE_CODE, "end_query(queryId=%d): Erroneous response code (%d)")
TRC_MSG(VT_TRC_ERROR_CANCELING_TIMER, "Error canceling timer(timer=%08X)=%d")
TRC_MSG(VT_TRC_ERROR_READING_CONFIGURATION_PARAMETERS, "Error reading configuration parameters")
TRC_MSG(VT_TRC_ESTABLISHCONFIRMED_REMOVING_MPC_H245_CHANNEL, "establishConfirmed: Removing MPC H245 channel, lcn = %d ")
TRC_MSG(VT_TRC_FAILED_TO_ALLOCATE_REMOVAL_SEMA, "Failed to allocate removal sema")
TRC_MSG(VT_TRC_FAILED_TO_CONSTRUCT_REMOVAL_SEMA, "Failed to construct removal sema")
TRC_MSG(VT_TRC_FAILED_TO_FETCH_REMOVAL_SEMA, "Failed to fetch removal sema")
TRC_MSG(VT_TRC_FAILED_TO_RETRIEVE_NAMES, ": failed to retrieve names")
TRC_MSG(VT_TRC_FAILED_TO_START_TIMERS_FOR_PINST, "Failed to start timers for pinst=%08X")
TRC_MSG(VT_TRC_FAST_UPDATE_TIMER_TIMEOUT, "FastUpdate Timer Timeout")
TRC_MSG(VT_TRC_FDBUCKETHASHCONSTRUCT_FAILURE, "fdBucketHashConstruct failure")
TRC_MSG(VT_TRC_FIXMUXTABLECOMBINATIONS_HAS_NO_DEDICATED_ENTRY, "FixMuxTableCombinations has no dedicated entry for data type %d")
TRC_MSG(VT_TRC_FIXMUXTABLECOMBINATIONS_HAS_NO_UCF_ENTRY_FOR, "FixMuxTableCombinations has no UCF entry for a channel %08X - i=%d")
TRC_MSG(VT_TRC_FLW_DROP_UL_AUDIO, "[FLW] Drop audio packet! frame size = %d, total = %d")
TRC_MSG(VT_TRC_FLW_DROP_VIDEO_PACKET, "[FLW] Drop Video Packet! Type = %d, Used_sdu_q_size = %d")
TRC_MSG(VT_TRC_FLW_ENQUEUE_IN_DROP_STATE, "[FLW] enqueue video in drop state")
TRC_MSG(VT_TRC_FLW_START_DROP_VIDEO, "[FLW] Start FLW. ToggleDropFrame=%d")
TRC_MSG(VT_TRC_FLW_STOP_DROP_VIDEO, "[FLW] Stop FLW. ToggleDropFrame=%d")
TRC_MSG(VT_TRC_GETMATCHINGCAPFORRXONLY, "GetMatchingCapForReceiveOnlyCap: Found?%d, MatchingCapId=%d")
TRC_MSG(VT_TRC_GET_AUDIO_FRAME_CODEC_NOT_READY, "vt_get_audio_frame_send_to_UL: Codec not ready")
TRC_MSG(VT_TRC_GOING_TO_RELEASE_BUFFER_OFFSET, "(1186)going to release buffer: %08X, Offset: %d")
TRC_MSG(VT_TRC_GOING_TO_RELEASE_FIRSTSDU_OFFSET, "(regular ARQ1)going to release firstSdu: %08X, Offset: %d")
TRC_MSG(VT_TRC_H223PARAMSHANDLECONFLICTS, "h223ParamsHandleConflicts: isMaster?%d, conflictType=%d")
TRC_MSG(VT_TRC_H245AUTOCAPSGETGCDCAPABILITYMPEG4_EXCEED_LOCAL_MAX_BIT_RATE, "h245AutoCapsGetGCDCapabilityMpeg4: Exceed Local Max Bit Rate (P=%d/L=%d)")
TRC_MSG(VT_TRC_H245AUTOCAPSOPENCHANNELBYDATATYPE_FAILED_IN, "H245AutoCapsOpenChannelByDataType Failed in finding the GCD of capabilities. H245AutoCaps: 0x%08X")
TRC_MSG(VT_TRC_H245AUTOCAPSOPENCHANNELBYDATATYPE_FAILED_TO, "H245AutoCapsOpenChannelByDataType Failed to find validation functions. H245AutoCaps: 0x%08X")
TRC_MSG(VT_TRC_H245AUTOCAPSOPENCHANNELBYDATATYPE_FAILED_TO_1, "H245AutoCapsOpenChannelByDataType Failed to build pvt node id of capability for the OLC message. H245AutoCaps: 0x%08X")
TRC_MSG(VT_TRC_H245AUTOCAPSOPENCHANNELBYDATATYPE_FAILED_TO_2, "H245AutoCapsOpenChannelByDataType Failed to open channel. H245AutoCaps: 0x%08X")
TRC_MSG(VT_TRC_H245AUTOCAPSVALIDATEALTERNATIVESETCAPS_FAILED, "H245AutoCapsValidateAlternativeSetCaps Failed to find a descriptor in capability table. H245AutoCaps: 0x%08X")
TRC_MSG(VT_TRC_H245AUTOCAPSVALIDATEAL_FAILED_FIND_ADAPTATION, "H245AutoCapsValidateAL Failed find adaptation layer supported on both sides for audio. H245AutoCaps: 0x%08X")
TRC_MSG(VT_TRC_H245AUTOCAPSVALIDATEAL_FAILED_FIND_ADAPTATION_1, "H245AutoCapsValidateAL Failed find adaptation layer supported on both sides for video. H245AutoCaps: 0x%08X")
TRC_MSG(VT_TRC_H245AUTOCAPSVALIDATEMONA_MSG1, "H245AutoCapsValidateMONA: Local does not support ACP")
TRC_MSG(VT_TRC_H245AUTOCAPSVALIDATEMONA_MSG2, "H245AutoCapsValidateMONA: Remote ACP Entry - Audio = %d, Video = %d")
TRC_MSG(VT_TRC_H245AUTOCAPSVALIDATEMONA_MSG3, "H245AutoCapsValidateMONA: Remote does not support MONA")
TRC_MSG(VT_TRC_H245AUTOCAPSVALIDATENEWCAPS_FAILED_TO_BUILD, "H245AutoCapsValidateNewCaps Failed to build matching table from new terminalCapabilitySet message. H245AutoCaps: 0x%08X")
TRC_MSG(VT_TRC_H245AUTOCAPSVALIDATENEWCAPS_FAILED_TO_DROP, "H245AutoCapsValidateNewCaps Failed to drop unsuitable audio channel after new terminalCapabilitySet message has arrived. H245AutoCaps: 0x%08X")
TRC_MSG(VT_TRC_H245AUTOCAPSVALIDATENEWCAPS_FAILED_TO_DROP_1, "H245AutoCapsValidateNewCaps Failed to drop unsuitable video channel after new terminalCapabilitySet message has arrived. H245AutoCaps: 0x%08X")
TRC_MSG(VT_TRC_H245AUTOCAPSVALIDATENEWCAPS_FAILED_TO_FIND, "H245AutoCapsValidateNewCaps Failed to find suitable capabilities for both sides after new terminalCapabilitySet message has arrived. H245AutoCaps: 0x%08X")
TRC_MSG(VT_TRC_H245AUTOCAPSVALIDATENEWCAPS_FAILED_TO_GET_AUDIO, "H245AutoCapsValidateNewCaps Failed to get audio validation functions after new terminalCapabilitySet message has arrived. H245AutoCaps: 0x%08X")
TRC_MSG(VT_TRC_H245AUTOCAPSVALIDATENEWCAPS_FAILED_TO_GET_AUDIO_1, "H245AutoCapsValidateNewCaps Failed to get audio data type from channel after new terminalCapabilitySet message has arrived. H245AutoCaps: 0x%08X")
TRC_MSG(VT_TRC_H245AUTOCAPSVALIDATENEWCAPS_FAILED_TO_GET_H223, "H245AutoCapsValidateNewCaps Failed to get H.223 information from new terminalCapabilitySet message. H245AutoCaps: 0x%08X")
TRC_MSG(VT_TRC_H245AUTOCAPSVALIDATENEWCAPS_FAILED_TO_GET_LOCAL, "H245AutoCapsValidateNewCaps Failed to get local capabilities from new terminalCapabilitySet message. H245AutoCaps: 0x%08X")
TRC_MSG(VT_TRC_H245AUTOCAPSVALIDATENEWCAPS_FAILED_TO_GET_REMOTE, "H245AutoCapsValidateNewCaps Failed to get remote capabilities from new terminalCapabilitySet message. H245AutoCaps: 0x%08X")
TRC_MSG(VT_TRC_H245AUTOCAPSVALIDATENEWCAPS_FAILED_TO_GET_VIDEO, "H245AutoCapsValidateNewCaps Failed to get video validation functions after new terminalCapabilitySet message has arrived. H245AutoCaps: 0x%08X")
TRC_MSG(VT_TRC_H245AUTOCAPSVALIDATENEWCAPS_FAILED_TO_GET_VIDEO_1, "H245AutoCapsValidateNewCaps Failed to get video data type from channel after new terminalCapabilitySet message has arrived. H245AutoCaps: 0x%08X")
TRC_MSG(VT_TRC_H245AUTOCAPSVALIDATENEWCAPS_FAILED_TO_MATCH, "H245AutoCapsValidateNewCaps Failed to match audio capability after new terminalCapabilitySet message has arrived. H245AutoCaps: 0x%08X")
TRC_MSG(VT_TRC_H245AUTOCAPSVALIDATENEWCAPS_FAILED_TO_MATCH_1, "H245AutoCapsValidateNewCaps Failed to match video capability after new terminalCapabilitySet message has arrived. H245AutoCaps: 0x%08X")
TRC_MSG(VT_TRC_H245AUTOCAPSVALIDATENEWCAPS_FAILED_TO_OPEN, "H245AutoCapsValidateNewCaps Failed to open channels after new terminalCapabilitySet message has arrived. H245AutoCaps: 0x%08X")
TRC_MSG(VT_TRC_H245AUTOCAPSVALIDATENEWCAPS_FAILED_TO_VALIDATE, "H245AutoCapsValidateNewCaps Failed to validate adaptation layers from new terminalCapabilitySet message. H245AutoCaps: 0x%08X")
TRC_MSG(VT_TRC_H245AUTOCAPSVALIDATENEWCAPS_PEER_IS_LEGACY, "H245AutoCapsValidateNewCaps: Peer Does not support MONA")
TRC_MSG(VT_TRC_H245CHANNEL_ESTABLISHINDICATION_RTCP_NO_IP, "H245Channel:establishIndication:RTCP: no IP address.")
TRC_MSG(VT_TRC_H245CHANNEL_ESTABLISHINDICATION_RTP_BAD_REVERSE, "H245Channel:establishIndication:RTP: bad reverse IP address.")
TRC_MSG(VT_TRC_H245CHANNEL_ESTABLISHINDICATION_RTP_NO_IP, "H245Channel:establishIndication:RTP: no IP address.")
TRC_MSG(VT_TRC_H245CHANNEL_IN_RELEASED_STATE, "H245Channel %08X in released state. Message discarded")
TRC_MSG(VT_TRC_H245CHANNEL_IN_STATE, "H245Channel %08X in %d state. Message discarded")
TRC_MSG(VT_TRC_H245FUNC_ENTER_SEL_MES, "Rv3G324mCallSendSelectedMultiplexEntryTable (call=%08X)")
TRC_MSG(VT_TRC_H245FUNC_LEAVE_SEL_MES, "Rv3G324mCallSendSelectedMultiplexEntryTable (call=%08X)=%d")
TRC_MSG(VT_TRC_H245PROCESSINCOMINGMESSAGE_MSGID, "### Enter h245ProcessIncomingMessage, msgFieldId=%d")
TRC_MSG(VT_TRC_H245PROCESSINCOMINGMESSAGE_NO_CONTROL, "h245ProcessIncomingMessage: nO control!!!")
TRC_MSG(VT_TRC_H245PROCESSINCOMINGMESSAGE_UNRECOGNIZE_COMMAND_MSG, "h245ProcessIncomingMessages: unrecognize COMMAND msg")
TRC_MSG(VT_TRC_H245PROCESSINCOMINGMESSAGE_UNRECOGNIZE_INDICATION_MSG, "h245ProcessIncomingMessages: unrecognize INDICATION msg")
TRC_MSG(VT_TRC_H245PROCESSINCOMINGMESSAGE_UNRECOGNIZE_MSG, "h245ProcessIncomingMessages: unrecognize msg")
TRC_MSG(VT_TRC_H245PROCESSINCOMINGMESSAGE_UNRECOGNIZE_REQUEST_MSG, "h245ProcessIncomingMessages: unrecognize request msg")
TRC_MSG(VT_TRC_H245PROCESSINCOMINGMESSAGE_UNRECOGNIZE_RESPONSE_MSG, "h245ProcessIncomingMessages: unrecognize RESPONSE msg")
TRC_MSG(VT_TRC_H245PROC_SEL_MES_FAIL_TO_SET_MUX_TABLE, "Rv3G324mCallSendSelectedMultiplexEntryTable: Unable to set mux table for call = %08X")
TRC_MSG(VT_TRC_H245PROC_SEND_UII, "termCallSendAlphaNumericUII: callId=%d, userInput[%hu]=%c, inputLength=%hu")
TRC_MSG(VT_TRC_H245_MESSAGE_NOT_SENTRECEIVED_PROPERLY_PROBABLY, "H.245 message not sent/received properly. Probably timed out")
TRC_MSG(VT_TRC_H324MBUFFERSINIT_FAILED_TO_ADD_LC_BUFFERS_RA, "H324mBuffersInit failed to add LC buffers RA to watchdog.")
TRC_MSG(VT_TRC_H324MBUFFERSINIT_FAILED_TO_CONSTRUCT_RA_FOR, "H324mBuffersInit failed to construct RA for control buffers.")
TRC_MSG(VT_TRC_H324MCALLMULTIPLEXRECONFIGURATION_NEW_MUX_LEVEL, "H324mCallMultiplexReconfiguration: New Mux-Level of call=%08X was equal to the previous one.")
TRC_MSG(VT_TRC_H324MCHANNELSETH223RX_ARQII_ISNT_SUPPORTED, "H324mChannelSetH223Rx: ARQII isn't supported. call=%08X, channel=%08X")
TRC_MSG(VT_TRC_H324MCHANNELSETH223RX_ARQII_MODE_DOES_NOT_SUPPORTED, "H324mChannelSetH223Rx: ARQII mode does not supported in SRS Encoding. call=%08X, channel=%08X")
TRC_MSG(VT_TRC_H324MCHANNELSETH223RX_CONSTRUCT_RXAL_WITH_LCN_0, "H324mChannelSetH223Rx: construct RxAl with lcn 0, data type = %d")
TRC_MSG(VT_TRC_H324MCHANNELSETH223RX_FAILED_TO_OPEN, "H324mChannelSetH223Rx: Failed to open channel=%08X")
TRC_MSG(VT_TRC_H324MCHANNELSETH223RX_INTERLEAVING_IS_NOT_SUPPORTED, "H324mChannelSetH223Rx: Interleaving is not supported in SRS Encoding. call=%08X, channel=%08X")
TRC_MSG(VT_TRC_H324MCHANNELSETH223RX_INVALID_CRC_LENGTH_FOR, "H324mChannelSetH223Rx: Invalid CRC length for RCPC. call=%08X, channel=%08X")
TRC_MSG(VT_TRC_H324MCHANNELSETH223RX_INVALID_CRC_LENGTH_FOR_1, "H324mChannelSetH223Rx: Invalid CRC length for SRS. call=%08X, channel=%08X")
TRC_MSG(VT_TRC_H324MCHANNELSETH223TX_ARQII_MODE_NOT, "H324mChannelSetH223Tx: ARQII mode not supported. channel=%08X")
TRC_MSG(VT_TRC_H324MCHANNELSETH223TX_ARQII_NOT_SUPPORTED_IN, "H324mChannelSetH223Tx: ARQII not supported in SRS. channel=%08X")
TRC_MSG(VT_TRC_H324MCHANNELSETH223TX_CHANNEL_MUST_NOT_BE, "H324mChannelSetH223Tx: Channel=%08X must not be duplex")
TRC_MSG(VT_TRC_H324MCHANNELSETH223TX_CHANNEL_SHOULD_BE, "H324mChannelSetH223Tx: Channel=%08X should be duplex")
TRC_MSG(VT_TRC_H324MCHANNELSETH223TX_FAILED_TO_OPEN, "H324mChannelSetH223Tx: Failed to open channel=%08X")
TRC_MSG(VT_TRC_H324MCHANNELSETH223TX_INTERLEAVING_NOT_SUPPORTED, "H324mChannelSetH223Tx: Interleaving not supported in SRS. channel=%08X")
TRC_MSG(VT_TRC_H324MCHANNELSETH223TX_INVALID_CRC_LENGTH_FOR, "H324mChannelSetH223Tx: Invalid CRC length for RCPC. channel=%08X")
TRC_MSG(VT_TRC_H324MCHANNELSETH223TX_INVALID_CRC_LENGTH_FOR_1, "H324mChannelSetH223Tx: Invalid CRC length for SRS. channel=%08X")
TRC_MSG(VT_TRC_H324MGETBUFFER_FAILED_TO_GET_BUFFER, "H324mGetBuffer Failed to get buffer. status=%d")
TRC_MSG(VT_TRC_H324MGLUECHANNELCONSTRUCT, "H324mGlueChannelConstruct(haChan=%08X,hsChan=%08X)")
TRC_MSG(VT_TRC_H324MGLUECHANNELCONSTRUCT_STATUS, "H324mGlueChannelConstruct() status = %d")
TRC_MSG(VT_TRC_H324MGLUECHANNELDESTRUCT, "H324mGlueChannelDestruct(haChan=%08X,hsChan=%08X)")
TRC_MSG(VT_TRC_H324MGLUECHANNELDESTRUCT_STATUS, "H324mGlueChannelDestruct() status = %d")
TRC_MSG(VT_TRC_H324MGLUECLEARMUXTABLE, "H324mGlueClearMuxtable(haCall=%08X,hsCall=%08X)")
TRC_MSG(VT_TRC_H324MGLUECLEARMUXTABLE_1, "H324mGlueClearMuxtable()=%d")
TRC_MSG(VT_TRC_H324MGLUEDEMUXSETMUXTABLEENTRY, "H324mGlueDemuxSetMuxtableEntry(haCall=%08X,hsCall=%08X,muxEntry=%d)")
TRC_MSG(VT_TRC_H324MGLUEDEMUXSETMUXTABLEENTRY_1, "H324mGlueDemuxSetMuxtableEntry()=%d")
TRC_MSG(VT_TRC_H324MGLUEGENERATEMUXTABLE, "H324mGlueGenerateMuxtable(haCall=%08X,hsCall=%08X)")
TRC_MSG(VT_TRC_H324MGLUEMUXTABLEADDENTRY, "H324mGlueMuxtableAddEntry(haCall=%08X,hsCall=%08X)")
TRC_MSG(VT_TRC_H324MGLUEMUXTABLEADDENTRY_1, "H324mGlueMuxtableAddEntry()=%d")
TRC_MSG(VT_TRC_H324MH223LOGICALCHANNELEV_FAILED_TO_CLOSE, "H324mH223LogicalChannelEv: Failed to close channel=%08X")
TRC_MSG(VT_TRC_H324MH223LOGICALCHANNELEV_FAILED_TO_OPEN_H223, "H324mH223LogicalChannelEv: Failed to open H.223 Rtx logical channel. call=%08X, channel=%08X")
TRC_MSG(VT_TRC_H324MLOSTSYNCTIMER_TIMEOUT, "H324mLostSynchTimer: SyncTimer timeout")
TRC_MSG(VT_TRC_H324MMUXLEVELINDICATIONEV_1, "H324mMuxLevelIndicationEv: peer mux level = %d")
TRC_MSG(VT_TRC_H324MMUXLEVELINDICATIONEV_MUX_LEVEL_OF_CALL, "H324mMuxLevelIndicationEv: Mux-Level of call=%08X was changed to %d")
TRC_MSG(VT_TRC_H324MMUXLEVELINDICATIONEV_START_LOST_SYNC_TIMER, "H324mMuxLevelIndicationEv: Start Lost Sync Timer")
TRC_MSG(VT_TRC_H324MMUXRECONFIGURATIONTIMER_DYNAMIC_CHANGE, "H324mMuxReconfigurationTimer: Dynamic change Mux-Level of call=%08X succeeded. New mux level=%d")
TRC_MSG(VT_TRC_H324MMUXRECONFIGURATIONTIMER_FAILED_TO_DYNAMICLY, "H324mMuxReconfigurationTimer: Failed to dynamicly change Mux-Level of call=%08X")
TRC_MSG(VT_TRC_H324MRELEASEBUFFER_FAILED_TO_DELETE_BUFFER, "H324mReleaseBuffer Failed to delete buffer")
TRC_MSG(VT_TRC_H324MSENDMESSAGE_1, "H324mSendMessage(sent, cur>max[=%hu]): accumulated messages = %hu, EncodeAndSend status = %d, ra curNumOfElements = %d")
TRC_MSG(VT_TRC_H324MSENDMESSAGE_2, "Leave H324mSendMessage(sent, blocksending=FALSE): sent %hu messages, EncodeAndSend status = %d, ra curNumOfElements = %d")
TRC_MSG(VT_TRC_H324MSENDMESSAGE_3, "H324mSendMessage(block send, cur<max[=%hu]): the accumulated messages = %hu, ra curNumOfElem = %d")
TRC_MSG(VT_TRC_H324MSENDMESSAGE_4, "Leave H324mSendMessage(block send, blocksending=TRUE): total msgs = %d, ra curNumOfElem = %d")
TRC_MSG(VT_TRC_H324MSENDMESSAGE_FAILED_SENDING_CONTROL, "H324mSendMessage Failed sending control data. Status = %d, Total Encode size = %d")
TRC_MSG(VT_TRC_H324MSENDMESSAGE_FUNC_ENTRY_CUR_RA_ELEMENTS, "H324mSendMessage: Before sending message (including block sending) ra curNumOfElem = %d")
TRC_MSG(VT_TRC_HANDLEH245MSGRECEIVED, "HandleH245MsgReceived: MsgId = %d")
TRC_MSG(VT_TRC_HANDLEINCOMING_LOCALCAP, "H245AutoCapsHandleIncomingChannel: Cap Type = %d, localCapId = %d")
TRC_MSG(VT_TRC_HANDLEINCOMING_NONSTANDARD, "Call HandleNonStandard [Ln:%d]")
TRC_MSG(VT_TRC_HANDLEMONAPREFERENCEMESSAGE_DEMUX_CRC_ERRORS, "HandleMonaPreferenceMessage: Demux: %08X - CRC errors on MONA preference message")
TRC_MSG(VT_TRC_HANDLEMONAPREFERENCEMESSAGE_SIZE, " HandleMonaPreferenceMessage: size %d")
TRC_MSG(VT_TRC_HANDLEMONPREFERENCEMESSAGE_MSG1, "[MONA]HandleMonaPreferenceMessage: MPC Capability Local Rx-%hu, Tx-%hu; Remote: Rx-%hu, Tx-%hu")
TRC_MSG(VT_TRC_HANDLEMONPREFERENCEMESSAGE_MSG2, "[MONA]HandleMonaPreferenceMessage: muxLevel = %hu, useDoubleFlag = %hu, useOptHdr = %hu")
TRC_MSG(VT_TRC_HANDLEMONPREFERENCEMESSAGE_RECEIVED_PM_RAW_DATA, "[MONA]HandleMonaPreferenceMessage: Received Preference Message")
TRC_MSG(VT_TRC_HANDLENONSTANDARD_OPEN_NEW_CHAN, "HandleNonStandardChannel: type=%hu, OpenNewChan? %hu [Ln:%d]")
TRC_MSG(VT_TRC_HANDLE_ERROR_CLOSING_SOCKET_FOR_SERVER_NO, "handle_error: Closing socket for server no. %d")
TRC_MSG(VT_TRC_HANDLE_NONSTANDARD_IN_CHAN_INFO, "H245AutoCapsHandleNonStandardIncomingChannel: local cap = %d, altCap = %d, status = %d, ln=%d")
TRC_MSG(VT_TRC_HANLENONSTANDARDINCOMINGCHAN_INFO, "handleNonStandardIncomingChan: localCap id = %d, handle = %d, dir = %hu")
TRC_MSG(VT_TRC_INITMPCTERMCHANNEL, "initializeMPCTermChannel: type = %d")
TRC_MSG(VT_TRC_INVOKING_AUTOMATIC_TCS_RESPONSE, "Invoking automatic TCS response %d")
TRC_MSG(VT_TRC_IS_PEER_SUPPORT_NSRP, "Peer Support NSRP? %d")
TRC_MSG(VT_TRC_LC_PARAM_AMR, "Logical Channel Param: Codec = AMR, LCN = %hu, maxSDUSize = %d")
TRC_MSG(VT_TRC_LC_PARAM_G7222, "Logical Channel Param: Codec = G7222, LCN = %hu, maxSDUSize = %d")
TRC_MSG(VT_TRC_LC_PARAM_H263, "Logical Channel Param: Codec = H263, LCN = %hu, maxSDUSize = %d, sqcif = %d, qcif = %d, maxBitRate = %d")
TRC_MSG(VT_TRC_LC_PARAM_MPEG4, "Logical Channel Param: Codec = MPEG4, LCN = %hu, maxSDUSize = %d, maxBitRate = %u")
TRC_MSG(VT_TRC_MEDIALOGICALCHANNELRECEIVEDDATAEXTEV_CRC_ERROR, "MediaLogicalChannelReceivedDataExtEv: CRC Errors, total = %d")
TRC_MSG(VT_TRC_MEDIALOGICALCHANNELRECEIVEDDATAEXTEV_MISSING_LOSS, "MediaLogicalChannelReceivedDataExtEv: Missing Loss, type = %hu, loss = %u, total = %u")
TRC_MSG(VT_TRC_MEDIALOGICALCHANNELRECEIVEDDATAEXTEV_SQ_GAP, "MediaLogicalChannelReceivedDataExtEv: Type=%hu, Expected SQ=%hu, SQ=%hu")
TRC_MSG(VT_TRC_MEDIALOGICALcHANNELRECEIVEDDATAEXTEV_DROP_RECV_VIDEO, "MediaLogicalChannelReceivedDataExtEv: Drop VIDEO, type = %hu, sq = %hu, size = %u, any error = %hu")
TRC_MSG(VT_TRC_MEDIALOGICALcHANNELRECEIVEDDATAEXTEV_RECV_AUDIO, "MediaLogicalChannelReceivedDataExtEv: AUDIO, type = %hu, sq = %hu, size = %u, any error = %hu")
TRC_MSG(VT_TRC_MEDIALOGICALcHANNELRECEIVEDDATAEXTEV_RECV_VIDEO, "MediaLogicalChannelReceivedDataExtEv: VIDEO, type = %hu, sq = %hu, size = %u, any error = %hu")
TRC_MSG(VT_TRC_MED_VIDEO_MISC_CMD_STATUS, "vt_med_video_misc_cmd: vq_option=%hu vt_vq_option_enum, channel=%08X [status:%d]")
TRC_MSG(VT_TRC_MES_MANUAL_RESPONSE_ON, "MES manual response on %08X = %d")
TRC_MSG(VT_TRC_MONA_REPLACE_MPC_CHANNEL, "cmEvChannelStateChanged: replace MONA chan, rxMpcType = %d, txMpcType = %d")
TRC_MSG(VT_TRC_MSD_MANUAL_RESPONSE_ON, "MSD manual response on %08X = %d")
TRC_MSG(VT_TRC_MULTIPLEX_INVALID_AUDIO_SIZE, "Multiplex: Invalid audio size: sizeToWrite = %d, free = %d")
TRC_MSG(VT_TRC_MUXER_CLEANUPMPCLCDESC, "Muxer %08X: CleanupMPCLCDesc %d")
TRC_MSG(VT_TRC_MUXER_MUXERCREATEMONAMPCCHANNELSANDMT_CURRENT, "Muxer %08X: MuxerCreateMonaMPCChannelsAndMT: Current active MPC channels in muxer: %d")
TRC_MSG(VT_TRC_MUXER_MUXERCREATEMONAMPCCHANNELSANDMT_MPC_CHANNEL, "Muxer %08X: MuxerCreateMonaMPCChannelsAndMT: MPC channel type %d opened in muxer")
TRC_MSG(VT_TRC_MUXER_MUXERCREATEMONAMPCCHANNELSANDMT_MPC_CHANNEL_1, "Muxer %08X: MuxerCreateMonaMPCChannelsAndMT: MPC channel type %d removed from muxer")
TRC_MSG(VT_TRC_NEW_MESSAGE_IGNORED, "New message (call %d-%08X) ignored (eventQ)")
TRC_MSG(VT_TRC_NEW_MESSAGE_IGNORED_1, "New message (call %d-%08X) ignored (error)")
TRC_MSG(VT_TRC_NEXT_SERVER_START_WORKING_WITH_SERVER_NO, "next_server: Start working with server no. %d")
TRC_MSG(VT_TRC_NOTIFYSTATE_WE_HAVE_A_LOOP_FOR_HSCALL, "NotifyState: We have a loop for hsCall=%08X")
TRC_MSG(VT_TRC_NOTIFYSTATE_WE_HAVE_A_LOOP_FOR_HSCHAN, "notifyState: We have a loop for hsChan=%08X")
TRC_MSG(VT_TRC_NO_CERTIFICATE_IN_SESSION, ": no certificate in session %08X")
TRC_MSG(VT_TRC_OPENCHANNELBYDATATYPE_INFO1, "H245AutoCapsOpenChannelByDataType: CapId Local %d, Remote %d, non_standard_node=%d, mimic_audio? %hu, mimic_video? %hu")
TRC_MSG(VT_TRC_OPENLOGICALCHANNELEVENT_NO_DATA_TYPE, "openLogicalChannelEvent: no data type.")
TRC_MSG(VT_TRC_OPENLOGICALCHANNEL_REMOVING_MPC_H245_CHANNEL, "openLogicalChannel: Removing MPC H245 channel, lcn = %d ")
TRC_MSG(VT_TRC_OPEN_DEVPOLL_FAILURE, "open /dev/poll failure")
TRC_MSG(VT_TRC_OPEN_SOCKET_ERROR_IN_RVSELECTADD, "open_socket: Error in RvSelectAdd(%d)")
TRC_MSG(VT_TRC_OPEN_SOCKET_ERROR_IN_RVSOCKETCONNECT, "open_socket: Error in RvSocketConnect(%d)")
TRC_MSG(VT_TRC_OPEN_SOCKET_ERROR_IN_RVSOCKETSETBLOCKING, "open_socket: Error in RvSocketSetBlocking(%d)")
TRC_MSG(VT_TRC_PARSEDATA_FAILED_TO_GET_A_BUFFER_DEMUX_LCN, "ParseData: failed to get a buffer : demux: %08X, lcn: %d")
TRC_MSG(VT_TRC_PARSEDATA_FAILED_TO_GET_A_BUFFER_FOR_ACP_VIDEO, "ParseData: failed to get a buffer for ACP Video Buffering: demux: %08X, lcn: %d")
TRC_MSG(VT_TRC_PARSEDATA_ILLEGAL_MUX_TABLE_ENTRY, "ParseData: illegal mux table entry %d (patom=NULL)")
TRC_MSG(VT_TRC_PARSEDATA_ILLEGAL_MUX_TABLE_ENTRY_1, "ParseData: illegal mux table entry %d (pdesc=NULL)")
TRC_MSG(VT_TRC_PARSEDATA_INSUFFICIENT_USER_BUFFERS_SIZE_DEMUX, "ParseData: insufficient user buffer's *size : demux: %08X, pdesc %08X, maxSize: %u, bytesRed: %d")
TRC_MSG(VT_TRC_PARSEDATA_RECEIVED_DATA_VIA_ACP_ON_AUDIO_CHANNEL, "ParseData: Received data via ACP on Audio channel - data Ignored!!")
TRC_MSG(VT_TRC_PARSEDATA_RECEIVED_DATA_VIA_ACP_ON_VIDEO_CHANNEL, "ParseData: Received data via ACP on video channel - out of buffers - data Ignored!!")
TRC_MSG(VT_TRC_PARSEFLAGEMUXLEVEL2_MTK_F_TO_S, "ParseFlagMuxLevel2_mtk: Flag state to Sync state (LINE: %d)")
TRC_MSG(VT_TRC_PARSEFLAGMUXlEVEL2_MTK_1,"parseFlagMuxLevel2_mtk: Discard 1 byte and Enter Sync [ByteProc:%d]")
TRC_MSG(VT_TRC_PARSEHEADER_BAD_PDU_HEADER, "ParseHeader: bad PDU header")
TRC_MSG(VT_TRC_PARSEHEADER_POSSIBLE_BITSTREAM_GAP, "ParseHeader possible bitstream gap. demux instance: %08X")
TRC_MSG(VT_TRC_PARSEHEADER_PROBABLE_SYNCH_LOSS_DUE_TO_MISSING, "ParseHeader probable synch loss due to missing flag. demux instance: %08X")
TRC_MSG(VT_TRC_PERALPHABETBITS_ILLEGAL_PARAMETER_N, "perAlphabetBits: Illegal parameter N=%d.")
TRC_MSG(VT_TRC_PERDECNODE_ILLEGAL_SYNTAX_NODE, "perDecNode: illegal syntax node %d")
TRC_MSG(VT_TRC_PERDECNODE_OPEN_TYPE_FIELD_LENGTH_MISSING, "perDecNode: open type field length missing, fieldId = %d ")
TRC_MSG(VT_TRC_PERDECNODE_VALPARENT_IS_INVALIDE, "perDecNode: valParent is invalid, %d")
TRC_MSG(VT_TRC_PERDECODEINT_EXTRACTING_FAILED, "perDecodeInt: Extracting failed [%d]")
TRC_MSG(VT_TRC_PERDECODELEN_FRAGMENTATION_PROCEDURE_NOT, "perDecodeLen: fragmentation procedure not available [%d]")
TRC_MSG(VT_TRC_PERDECODENUMBER_BUFFER_ALLOCATION_ERROR, "perDecodeNumber: Buffer allocation error.")
TRC_MSG(VT_TRC_PERDECODENUMBER_ENCODING_NOT_SUPPORTED_FOR, "perDecodeNumber: Encoding not supported for %d bits.")
TRC_MSG(VT_TRC_PERDECODENUMBER_NUMBER_TOO_LARGE_TO_DECODE, "perDecodeNumber: Number too large to decode from buffer [len=%d]")
TRC_MSG(VT_TRC_PERDECODENUMBER_PARAMETERS_NOT_ALLOCATED, "perDecodeNumber: parameters (n,dec) not allocated.")
TRC_MSG(VT_TRC_PERDECODESEMICONSTINT_EXTRACTING_FAILED, "perDecodeSemiConstInt: Extracting failed [%d]")
TRC_MSG(VT_TRC_PERDECODESEQUECE_INVALID_PARAMETERS, "perDecodeSequece: Invalid parameters.")
TRC_MSG(VT_TRC_PERDECODE_MSG_IS_INVALIDE, "perDecode: Msg is invalid")
TRC_MSG(VT_TRC_PERDECODE_PER_SCRATCHPAD_CANNOT_BE_OBTAINED, "perDecode: PER scratchpad cannot be obtained.")
TRC_MSG(VT_TRC_PERDECODE_RESOURCE_PROBLEM, "perDecode: out of resource")
TRC_MSG(VT_TRC_PERENCNODE_ENCODING_ERROR,"perEncNode: Encoding error, type = %hu, fieldId = %d, return value = %d")
TRC_MSG(VT_TRC_PERENCNODE_ILLEGAL_SYNTAX_NODE,"perEncNode: illegal syntax node, fieldId = %d")
TRC_MSG(VT_TRC_PERENCNODE_ILLEGAL_VALUE_NODE,"perEncNode: illegal value node, fieldId = %d")
TRC_MSG(VT_TRC_PERENCNODE_TYPE_RESOLVE_IN_RUNTIME_FAIL,"perEncNode: resolve type in run-time failed, fieldId = %d")
TRC_MSG(VT_TRC_PERENCODEBITSTRING_BUFFER_ALLOCATION_ERROR, "perEncodeBitString: fieldId = %d, free = %d, req = %d")
TRC_MSG(VT_TRC_PERENCODEBITSTRING_OUT_OF_RANGE, "perEncodeBitString: fieldId =%d, length not within extension root range: %d<=%d<=%d")
TRC_MSG(VT_TRC_PERENCODECHARSTRING_BUFFER_ALLOCATION_ERROR,"perEncodeCharString: buffer allocation error, fieldId = %d, free = %d, req = %d, perBufsize = %u")
TRC_MSG(VT_TRC_PERENCODECHARSTRING_OUT_OF_RANGE, "perEncodeCharString: fieldId =%d, length not within extension root range: %d<=%d<=%d")
TRC_MSG(VT_TRC_PERENCODECHARSTRING_STRING_CHAR_OUT_OF_ALPHABET, "perEncodeCharString: String character out of alphabet, index = %d")
TRC_MSG(VT_TRC_PERENCODECHOICE_NO_SUCH_EXT_FIELD, "perEncodeChoice: No extension fields for this node")
TRC_MSG(VT_TRC_PERENCODECHOICE_PERENCODEINT_ERROR, "perEncodeChoice: perEncodeInt error")
TRC_MSG(VT_TRC_PERENCODECHOICE_SYNTAX_CHOICE_DOES_NOT_EXIST, "perEncodeChoice: Syntax choice node not exist. CHOICE fieldId = %d")
TRC_MSG(VT_TRC_PERENCODECHOICE_VALUE_NODE_DOES_NOT_EXIST, "perEncodeChoice: Value node not exist, fieldId = %d")
TRC_MSG(VT_TRC_PERENCODELEN_FRAGMENTATION_PROCEDURE_NOT, "perEncodeLen: fragmentation procedure not available [%d]")
TRC_MSG(VT_TRC_PERENCODENORMALLYSMALLINT_LENGTH_ENCODING_FAILED, "perEncodeNormallySmallInt: length encoding failed for '%d'.")
TRC_MSG(VT_TRC_PERENCODENORMALLYSMALLINT_NUMBER_ENCODING_FAILED, "perEncodeNormallySmallInt: number encoding failed for '%d'.")
TRC_MSG(VT_TRC_PERENCODENUMBER_BUFFER_ALLOCATION_ERROR, "perEncodeNumber: Buffer allocation error. [%d bits]")
TRC_MSG(VT_TRC_PERENCODEOCTETSTRING_BUFFER_ALLOCATION_ERROR, "perEncodeOctetString: fieldId = %d, free = %d, req = %d")
TRC_MSG(VT_TRC_PERENCODEOCTETSTRING_OUT_OF_RANGE, "perEncodeOctetString: fieldId =%d, length not within extension root range: %d<=%d<=%d")
TRC_MSG(VT_TRC_PERENCODEOID_BUFFER_ALLOCATION_ERROR, "perEncodeOID: fieldId = %d")
TRC_MSG(VT_TRC_PERENCODEOID_BUFFER_ALLOCATION_ERROR_2, "perEncodeOID: fieldId = %d, free = %d, req = %d")
TRC_MSG(VT_TRC_PERENCODESEQUENCEEXT_CHILD_NOT_ENCODED, "perEncodeSequenceExt: Child not encoded %d.")
TRC_MSG(VT_TRC_PERENCODESEQUENCE_CHILD_NOT_ENCODED, "perEncodeSequence: Child not encoded %d.")
TRC_MSG(VT_TRC_PERENCODESEQUENCE_INVALID_PARAMETER, "perEncodeSequece: Invalid parameter, fieldId = %d")
TRC_MSG(VT_TRC_PERENCODESEQUNCEOF_ILLEGAL_NUM_OF_ELEMENTS, "perEncodeSequeceOF: Illegal number of elements for set, fieldId = %d, numOfComponents = %d")
TRC_MSG(VT_TRC_PERENCODESEQUNCEOF_VALUE_NODE_DOES_NOT_EXIST, "perEncodeSequeceOF: Value node not exist, fieldId = %d")
TRC_MSG(VT_TRC_PERENCODE_BBH_IS_NULL, "perEncode: bbH = NULL, return RV_ERROR_UNKNOWN")
TRC_MSG(VT_TRC_PERENCODE_PER_SCRATCHPAD_CANNOT_BE_OBTAINED, "perEncode: PER scratchpad cannot be obtained. return RV_ERROR_OUTOFRESOURECES")
TRC_MSG(VT_TRC_PERENCODE_VALUE_TREE_ROOT_ID_IS_ILLEGAL, "perEncode: value tree root id is illegal [%d].")
TRC_MSG(VT_TRC_PER_DECODEBOOL_EXTRACTING_FAILED, "per:DecodeBool: Extracting failed")
TRC_MSG(VT_TRC_PER_DECODELEN_ERROR_DECODING_NORMALLY_SMALL, "per:DecodeLen: error decoding normally small length (1st bit)")
TRC_MSG(VT_TRC_PER_DECODELEN_PARAMETERS_NOT_ALLOCATED, "per:DecodeLen: parameters (n,del) not allocated.")
TRC_MSG(VT_TRC_PER_DECODEOID_OBJECT_IDENTIFIER_TOO_LARGE_TO, "per:DecodeOID: Object Identifier too large to decode from buffer [len=%d]")
TRC_MSG(VT_TRC_PER_ENCODEBOOL_BUFFER_ALLOCATION_ERROR, "per:EncodeBool: Buffer allocation error.")
TRC_MSG(VT_TRC_PER_ENCODEINT_BUFFER_ALLOCATION_ERROR, "per:EncodeInt: Buffer allocation error")
TRC_MSG(VT_TRC_PER_ENCODEINT_INTEGER_OUT_OF_RANGE, "per:EncodeInt: Integer out of range [%d <= %d ")
TRC_MSG(VT_TRC_PER_ENCODEINT_INTEGER_OUT_OF_RANGE_1, "per:EncodeInt: Integer out of range [%u <= %u <= %u]")
TRC_MSG(VT_TRC_PER_ENCODEINT_INTEGER_OUT_OF_RANGE_2, "per:EncodeInt: Integer out of range [%u <= %u <= %u]")
TRC_MSG(VT_TRC_PER_ENCODELEN_BUFFER_ALLOCATION_ERROR, "per:EncodeLen: Buffer allocation error.")
TRC_MSG(VT_TRC_PKT_TYPE_H263, "[PKT_TYPE]H263")
TRC_MSG(VT_TRC_PKT_TYPE_MPEG4, "[PKT_TYPE]MPEG4")
TRC_MSG(VT_TRC_PKT_TYPE_SHORT_HEADER, "[PKT_TYPE]short header")
TRC_MSG(VT_TRC_PKT_TYPE_VT_DL_VIDEO_PKT_CONT_FRAME, "[PKT_TYPE]VT_DL_VIDEO_PKT_CONT_FRAME")
TRC_MSG(VT_TRC_PKT_TYPE_VT_DL_VIDEO_PKT_ERROR_FRAME, "[PKT_TYPE]VT_DL_VIDEO_PKT_ERROR_FRAME")
TRC_MSG(VT_TRC_PKT_TYPE_VT_DL_VIDEO_PKT_I_FRAME, "[PKT_TYPE]VT_DL_VIDEO_PKT_I_FRAME")
TRC_MSG(VT_TRC_PKT_TYPE_VT_DL_VIDEO_PKT_NOT_COMPLETE_FRAME, "[PKT_TYPE]VT_DL_VIDEO_PKT_NOT_COMPLETE_FRAME")
TRC_MSG(VT_TRC_PKT_TYPE_VT_DL_VIDEO_PKT_P_FRAME, "[PKT_TYPE]VT_DL_VIDEO_PKT_P_FRAME")
TRC_MSG(VT_TRC_PKT_TYPE_VT_STATE_ERROR, "[PKT_TYPE]VT_STATE_ERROR")
TRC_MSG(VT_TRC_PKT_TYPE_VT_STATE_INIT, "[PKT_TYPE]VT_STATE_INIT")
TRC_MSG(VT_TRC_PKT_TYPE_VT_STATE_NORMAL, "[PKT_TYPE]VT_STATE_NORMAL")
TRC_MSG(VT_TRC_PKT_TYPE_VT_STATE_NOT_COMPLETE, "[PKT_TYPE]VT_STATE_NOT_COMPLETE")
TRC_MSG(VT_TRC_PKT_TYPE_VT_STATE_PAUSE, "[PKT_TYPE]VT_STATE_PAUSE")
TRC_MSG(VT_TRC_PKT_TYPE_VT_STATE_WAIT_I, "[PKT_TYPE]VT_STATE_WAIT_I")
TRC_MSG(VT_TRC_PREFERENCE_MESSAGE_PAYLOADLEN_MPCRX_MPCTX_ACK, "[MONA] --> Preference Message: payloadLen: %hu, mpcRx: %hx, mpcTx: %hx, ack: %hu (%hu) numSent %hu ")
TRC_MSG(VT_TRC_PRIVATE_TAG, "Private tag %d")
TRC_MSG(VT_TRC_PUT_DL_AUDIO_PKT_SET_AV_SKEW, "Recv 1st audio pkt. Set skew = %d")
TRC_MSG(VT_TRC_PUT_DOWNLINK_AUDIO_DATA_DROP_PKT, "vt_put_downlink_audio_data: frame_type = %d, dl_size = %d [Ln:%d]")
TRC_MSG(VT_TRC_PUT_DOWNLINK_AUDIO_DATA_DROP_PKT2, "drop_dl_audio: chan = %x, codecReady? %hu [Ln:%d]")
TRC_MSG(VT_TRC_PUT_DOWNLINK_AUDIO_DATA_ENTER_DROP_FRAME, "Enter SP3GVT_DL_DropSpeechFrame, dl_max_frame_num: %d")
TRC_MSG(VT_TRC_PUT_DOWNLINK_AUDIO_DATA_EXIT_DROP_FRAME, "Exit SP3GVT_DL_DropSpeechFrame, used_frame = %d, max_frame_num = %d")
TRC_MSG(VT_TRC_PUT_UL_AUDIO_DISABLE_ACPSEND, "vt_put_uplink_audio: Set ACPShouldSend to FALSE")
TRC_MSG(VT_TRC_PUT_UPLINK_VIDEO_DATA_FAIL_TO_SEND_VIDEO, "vt_put_uplink_video: Fail to send video [Ln:%d]")
TRC_MSG(VT_TRC_PUT_UPLINK_VIDEO_DATA_INVALID_CHAN, "vt_put_uplink_video: invalid channel")
TRC_MSG(VT_TRC_PVTADD_FAILURE, "pvtAdd Failure: PST Field Id = %d")
TRC_MSG(VT_TRC_PVTADOPTCHILD_HVAL, "pvtAdoptChild: hVal=%08X. Changed to a root=%d")
TRC_MSG(VT_TRC_PVTDELETEALL_CALLED_FOR_HVAL, "pvtDeleteAll: Called for hVal=%08X")
TRC_MSG(VT_TRC_PVTDELETECHILDS_HVAL, "pvtDeleteChilds: hVal=%08X. Cannot delete %d - probably already deleted")
TRC_MSG(VT_TRC_PVTDESTRUCT_NODES_LEFT_IN_DATABASE, "pvtDestruct: %d nodes left in database")
TRC_MSG(VT_TRC_PVTMOVETREE_ERROR_MOVING_THE_TREE, "pvtMoveTree(hVal=%08X,src=%d,dst=%d): error moving the tree")
TRC_MSG(VT_TRC_PVTMOVETREE_HVAL, "pvtMoveTree: hVal=%08X. Attempted to delete shieleded root=%d")
TRC_MSG(VT_TRC_PVTMOVETREE_HVAL_1, "pvtMoveTree: hVal=%08X. root=%d is being moved as a sub-tree")
TRC_MSG(VT_TRC_PVTSHIFTTREE_ERROR_MOVING_THE_TREE, "pvtShiftTree(hVal=%08X,src=%d,dst=%d): error moving the tree")
TRC_MSG(VT_TRC_Q931DECODE_ERROR_DECODING_Q931_MESSAGE, "Q931Decode: Error decoding Q931 message (%d).")
TRC_MSG(VT_TRC_Q931DINTER_BUFFER_SIZE_IS_TOO_SMALL_EXPECTED, "Q931DInter: Buffer size is too small - expected at least %d bits")
TRC_MSG(VT_TRC_Q931DINTER_CHOICE_VALUE_OUT_OF_RANGE, "Q931DInter: Choice value out of range [%d].")
TRC_MSG(VT_TRC_Q931DINTER_MANDATORY_FIELDS_INSIDE_A_Q931_MESSAGE, "Q931DInter: Mandatory fields inside a Q931 message were missing")
TRC_MSG(VT_TRC_Q931DINTER_UNKNOWN_TYPE_DONT_KNOW_HOW_TO, "Q931DInter: Unknown type (node=%d) - don't know how to decode.")
TRC_MSG(VT_TRC_Q931EINTER_BUFFER_TOO_SMALL_TO_ENCODE_THIS, "Q931EInter: Buffer too small to encode this message.")
TRC_MSG(VT_TRC_Q931EINTER_FIELD_TOO_LONG_FOR_TAG, "Q931EInter: Field too long for tag %d.")
TRC_MSG(VT_TRC_Q931EINTER_PRIVATE_TAG_ENCODING_ERROR, "Q931EInter: Private tag encoding error (%d).")
TRC_MSG(VT_TRC_Q931EINTER_UNKNOWN_TYPE_DONT_KNOW_HOW_TO, "Q931EInter: Unknown type (node=%d) - don't know how to encode.")
TRC_MSG(VT_TRC_RAADD_RA_FULL, "raAdd: Array Full (%d elements)")
TRC_MSG(VT_TRC_READ_FROM_DL_QUEUE, "read from VT_CSR_DL_queue r_idx:%d, w_idx:%d distance: %d")
TRC_MSG(VT_TRC_READ_FROM_UL_QUEUE, "read from VT_CSR_UL_queue r_idx:%d, w_idx:%d distance: %d")
TRC_MSG(VT_TRC_READ_TCP_DATA_ERROR_IN, "read_tcp_data: Error in RvSocketReceiveBuffer(status=%d)")
TRC_MSG(VT_TRC_READ_TCP_DATA_INVALID_LENGTH_WORD, "read_tcp_data: Invalid length word(%d)")
TRC_MSG(VT_TRC_READ_UDP_PACKETS_ERROR_IN, "read_udp_packets: Error in RvSocketReceiveBuffer(status=%d)")
TRC_MSG(VT_TRC_RECEIVED_OLC_WHEN_CONTROL_IS_NOT_IN_CONNECTED, "Received OLC when control is not in connected state (haCall=%08X, hsCall=%08X)")
TRC_MSG(VT_TRC_RECV_NSRP_ACK_SN, "[xSRP]<--- Recv NSRP Ack SN - %d (%08X)")
TRC_MSG(VT_TRC_RECV_NSRP_SN, "[xSRP]<--- Recv NSRP SN - %d (%08X)")
TRC_MSG(VT_TRC_RECV_SRP_ACK_SN, "[xSRP]<--- Recv SRP Ack (%08X)")
TRC_MSG(VT_TRC_RECV_WNSRP_ACK_SN, "[xSRP]<--- Recv WNSRP Ack SN - %hu, First -%hu, Waiting - %hu")
TRC_MSG(VT_TRC_RECV_WNSRP_SN, "[xSRP]<--- Recv WNSRP SN - %d")
TRC_MSG(VT_TRC_REMOVING_ALL_TRACES, "Removing all traces")
TRC_MSG(VT_TRC_REQUESTMULTIPLEXENTRYACK_ENTRIES, "RequestMultiplexEntryAck: entries =%d")
TRC_MSG(VT_TRC_REQUESTMULTIPLEXENTRYREJECT_ENTRIES, "RequestMultiplexEntryReject: entries =%d")
TRC_MSG(VT_TRC_REQUESTMULTIPLEXENTRYREJECT_REJECTIONENTRIES, "RequestMultiplexEntryReject: rejectionEntries =%d")
TRC_MSG(VT_TRC_REQUESTMULTIPLEXENTRY_ENTRIES, "requestMultiplexEntry: entries = %d")
TRC_MSG(VT_TRC_REQUESTMULTIPLEXENTRY_VALIDENTRIES, "requestMultiplexEntry: validEntries = %d")
TRC_MSG(VT_TRC_RESOURCES_AT_BEGINNING_OF_RVH324MDESTRUCT, "Resources at beginning of RvH324mDestruct():")
TRC_MSG(VT_TRC_RPOOLALLOC_RET_ADDR, "rpoolAlloc: ret = %x")
TRC_MSG(VT_TRC_RTX_WNSRP, "Rtx WNSRP %d")
TRC_MSG(VT_TRC_RV3G324MCALLADDMULTIPLEXENTRY, "Rv3G324mCallAddMultiplexEntry(call=%08X,a=%d,v=%d,v2=%d,d=%d)")
TRC_MSG(VT_TRC_RV3G324MCALLADDMULTIPLEXENTRY_1, "Rv3G324mCallAddMultiplexEntry(call=%08X)=%d")
TRC_MSG(VT_TRC_RV3G324MCALLBITSHIFTINDICATIONEV, "Rv3G324mCallBitShiftIndicationEv(haCall=%08X, hsCall=%08X, bitShift=%d)")
TRC_MSG(VT_TRC_RV3G324MCALLBITSHIFTINDICATIONEV_1, "Rv3G324mCallBitShiftIndicationEv")
TRC_MSG(VT_TRC_RV3G324MCALLCLEARMULTIPLEXENTRYTABLE, "Rv3G324mCallClearMultiplexEntryTable(call=%08X,bGenerateDefault=%d)")
TRC_MSG(VT_TRC_RV3G324MCALLCLEARMULTIPLEXENTRYTABLE_1, "Rv3G324mCallClearMultiplexEntryTable(call=%08X)=%d")
TRC_MSG(VT_TRC_RV3G324MCALLCONSTRUCT, "Rv3G324mCallConstruct(h3G324m=%08X,appCall=%08X)")
TRC_MSG(VT_TRC_RV3G324MCALLCONSTRUCT_1, "Rv3G324mCallConstruct(appCall=%08X,call=%08X)=%d")
TRC_MSG(VT_TRC_RV3G324MCALLDESTRUCT, "Rv3G324mCallDestruct(call=%08X)")
TRC_MSG(VT_TRC_RV3G324MCALLDESTRUCT_1, "Rv3G324mCallDestruct(call=%08X)=%d")
TRC_MSG(VT_TRC_RV3G324MCALLDESTRUCT_BAD_CALL_STATE_FOR, "Rv3G324mCallDestruct: Bad call state for call=%08X")
TRC_MSG(VT_TRC_RV3G324MCALLDISCONNECTED, "Rv3G324mCallDisconnected(call=%08X)")
TRC_MSG(VT_TRC_RV3G324MCALLDISCONNECTED_1, "Rv3G324mCallDisconnected(call=%08X)=%d")
TRC_MSG(VT_TRC_RV3G324MCALLDISCONNECTED_BAD_CALL_STATE_FOR, "Rv3G324mCallDisconnected: Bad call state for call=%08X")
TRC_MSG(VT_TRC_RV3G324MCALLDROP, "Rv3G324mCallDrop(call=%08X)")
TRC_MSG(VT_TRC_RV3G324MCALLDROP_1, "Rv3G324mCallDrop(call=%08X)=%d")
TRC_MSG(VT_TRC_RV3G324MCALLDROP_BAD_CALL_STATE_FOR_CALL, "Rv3G324mCallDrop: Bad call state for call=%08X")
TRC_MSG(VT_TRC_RV3G324MCALLGETBUFFEREV, "Rv3G324mCallGetBufferEv(hAppCall=%08X,hCall=%08X)")
TRC_MSG(VT_TRC_RV3G324MCALLGETBUFFEREV_1, "Rv3G324mCallGetBufferEv")
TRC_MSG(VT_TRC_RV3G324MCALLGETPARAM, "Rv3G324mCallGetParam(call=%08X, eParam=%d)")
TRC_MSG(VT_TRC_RV3G324MCALLGETPARAM_1, "Rv3G324mCallGetParam(call=%08X, eParam=%d, value=%d, strValue=%08X)")
TRC_MSG(VT_TRC_RV3G324MCALLGETRANDOMNUMBEREV, "Rv3G324mCallGetRandomNumberEv(hApp=%08X, haCall=%08X, hsCall=%08X)")
TRC_MSG(VT_TRC_RV3G324MCALLGETRANDOMNUMBEREV_1, "Rv3G324mCallGetRandomNumberEv")
TRC_MSG(VT_TRC_RV3G324MCALLGETSTATE, "Rv3G324mCallGetState(call=%08X)")
TRC_MSG(VT_TRC_RV3G324MCALLGETSTATE_1, "Rv3G324mCallGetState(call=%08X,state=%d,mode=%d)=%d")
TRC_MSG(VT_TRC_RV3G324MCALLH223GLUESENDCONTROLEV, "Rv3G324mCallH223GlueSendControlEv(haCall=%08X,hsCall=%08X,buffer=%08X,size=%d)")
TRC_MSG(VT_TRC_RV3G324MCALLH223GLUESENDCONTROLEV_1, "Rv3G324mCallH223GlueSendControlEv()=%d")
TRC_MSG(VT_TRC_RV3G324MCALLH223GLUESETEVHANDLERS, "Rv3G324mCallH223GlueSetEvHandlers(h3G324m=%08X,glueEvent=%08X,size=%d)")
TRC_MSG(VT_TRC_RV3G324MCALLH223GLUESETEVHANDLERS_0, "Rv3G324mCallH223GlueSetEvHandlers()=0")
TRC_MSG(VT_TRC_RV3G324MCALLINDICATEMUXLEVEL, "Rv3G324mCallIndicateMuxLevel(Call=%08X,Mux-Level=%d)")
TRC_MSG(VT_TRC_RV3G324MCALLINDICATEMUXLEVEL_1, "Rv3G324mCallIndicateMuxLevel(call=%08X)=%d")
TRC_MSG(VT_TRC_RV3G324MCALLLOGICALCHANNELCLEAR, "Rv3G324mCallLogicalChannelClear(call=%08X,channel=%08X)")
TRC_MSG(VT_TRC_RV3G324MCALLLOGICALCHANNELCLEAR_1, "Rv3G324mCallLogicalChannelClear=%d")
TRC_MSG(VT_TRC_RV3G324MCALLLOGICALCHANNELCLEAR_CHANNEL_NOT, "Rv3G324mCallLogicalChannelClear: Channel %08X not outgoing")
TRC_MSG(VT_TRC_RV3G324MCALLLOGICALCHANNELNOTIFYDRTXEV, "Rv3G324mCallLogicalChannelNotifyDrtxEv(hAppCall=%08X,hCall=%08X)")
TRC_MSG(VT_TRC_RV3G324MCALLLOGICALCHANNELNOTIFYDRTXEV_1, "Rv3G324mCallLogicalChannelNotifyDrtxEv")
TRC_MSG(VT_TRC_RV3G324MCALLLOGICALCHANNELRECEIVEDDATAEV, "Rv3G324mCallLogicalChannelReceivedDataEv(hAppCall=%08X,hCall=%08X,hAppChan=%08X,hChan=%08X,pBuffer=%08X,size=%d)")
TRC_MSG(VT_TRC_RV3G324MCALLLOGICALCHANNELRECEIVEDDATAEV_1, "Rv3G324mCallLogicalChannelReceivedDataEv")
TRC_MSG(VT_TRC_RV3G324MCALLLOGICALCHANNELRECEIVEDDATAEV_AL, "Rv3G324mCallLogicalChannelReceivedDataEv: AL-PDU is lost. call=%08X")
TRC_MSG(VT_TRC_RV3G324MCALLLOGICALCHANNELRECEIVEDDATAEXTEV, "Rv3G324mCallLogicalChannelReceivedDataExtEv(hAppCall=%08X,hCall=%08X,hAppChan=%08X,hChan=%08X,pBuffer=%08X,size=%d,ext=%d)")
TRC_MSG(VT_TRC_RV3G324MCALLLOGICALCHANNELRECEIVEDDATAEXTEV_1, "Rv3G324mCallLogicalChannelReceivedDataExtEv")
TRC_MSG(VT_TRC_RV3G324MCALLLOGICALCHANNELRTXREQUESTEV, "Rv3G324mCallLogicalChannelRtxRequestEv(hAppCall=%08X,hCall=%08X,hAppChan=%08X,hChan=%08X,expSeqNum=%d,recSeqNum=%d)")
TRC_MSG(VT_TRC_RV3G324MCALLLOGICALCHANNELRTXREQUESTEV_1, "Rv3G324mCallLogicalChannelRtxRequestEv()=%d")
TRC_MSG(VT_TRC_RV3G324MCALLLOGICALCHANNELSENDDATAEXT, "Rv3G324mCallLogicalChannelSendDataExt(call=%08X,channel=%08X,pBuffer=%08X,size=%d)")
TRC_MSG(VT_TRC_RV3G324MCALLLOGICALCHANNELSENDDATAEXT_1, "Rv3G324mCallLogicalChannelSendDataExt(pending=%d)=%d")
TRC_MSG(VT_TRC_RV3G324MCALLLOGICALCHANNELSENDDATAEXT_BAD_CALL, "Rv3G324mCallLogicalChannelSendDataExt: Bad call state for call=%08X")
TRC_MSG(VT_TRC_RV3G324MCALLLOGICALCHANNELSENDDATAEXT_CALL, "Rv3G324mCallLogicalChannelSendDataExt: Call %08X failed to send data on the channel %08X, status = %d")
TRC_MSG(VT_TRC_RV3G324MCALLLOGICALCHANNELSENDDATAEXT_CALL_1, "Rv3G324mCallLogicalChannelSendDataExt: Call %08X failed to send data on the channel %08X because the audio payload size %hu is incorrect, status = %d")
TRC_MSG(VT_TRC_RV3G324MCALLLOGICALCHANNELSENDDATAEXT_CALL_2, "Rv3G324mCallLogicalChannelSendDataExt: Call %08X already disconnected by application")
TRC_MSG(VT_TRC_RV3G324MCALLMESSAGESENDINGFAILUREEV, "Rv3G324mCallMessageSendingFailureEv(hApp=%08X, haCall=%08X, hsCall=%08X)")
TRC_MSG(VT_TRC_RV3G324MCALLMESSAGESENDINGFAILUREEV_1, "Rv3G324mCallMessageSendingFailureEv")
TRC_MSG(VT_TRC_RV3G324MCALLMONAMPCCHANNELRECEIVEDDATAEV, "Rv3G324mCallMonaMPCChannelReceivedDataEv(hAppCall=%08X,hCall=%08X,mpcChannel=%d,pBuffer=%08X,size=%d=%d)")
TRC_MSG(VT_TRC_RV3G324MCALLMONAMPCCHANNELRECEIVEDDATAEV_1, "Rv3G324mCallMonaMPCChannelReceivedDataEv")
TRC_MSG(VT_TRC_RV3G324MCALLMONAMPCCHANNELSENDDATA, "Rv3G324mCallMonaMPCChannelSendData(call=%08X,mpcChannel=%d,pBuffer=%08X,size=%d)")
TRC_MSG(VT_TRC_RV3G324MCALLMONAMPCCHANNELSENDDATA_1, "Rv3G324mCallMonaMPCChannelSendData(pending=%d)=%d")
TRC_MSG(VT_TRC_RV3G324MCALLMONAMPCCHANNELSENDDATA_CALL_ALREADY, "Rv3G324mCallMonaMPCChannelSendData: Call %08X already disconnected by application")
TRC_MSG(VT_TRC_RV3G324MCALLMONAMPCCHANNELSENDDATA_CALL_FAILED, "Rv3G324mCallMonaMPCChannelSendData: Call %08X failed to send data on the mpcChannel %d because of NULL Adaptation Layer handle ")
TRC_MSG(VT_TRC_RV3G324MCALLMONAMPCCHANNELSENDDATA_CALL_FAILED_1, "Rv3G324mCallMonaMPCChannelSendData: Call %08X failed to send data on the mpcChannel %hu, status = %d")
TRC_MSG(VT_TRC_RV3G324MCALLMONAMPCCHANNELSENDDATA_CALL_FAILED_2, "Rv3G324mCallMonaMPCChannelSendData: Call %08X failed to send data on the mpcChannel %hu because the audio payload size %hu is incorrect, status = %d")
TRC_MSG(VT_TRC_RV3G324MCALLMONAMPCCHANNELSENDDATA_MSG1,"[MONA]Rv3G324mCallMonaMPCChannelSendData: MPC_Type = %d, size = %d")
TRC_MSG(VT_TRC_RV3G324MCALLMONAREMOVEMPCCHANNEL, "Rv3G324mCallMONARemoveMPCChannel(call=%08X,mpcChannelType=%hu,bIsoutgoing=%hu)")
TRC_MSG(VT_TRC_RV3G324MCALLMONAREMOVEMPCCHANNEL_1, "Rv3G324mCallMONARemoveMPCChannel(call=%08X, status = %d)")
TRC_MSG(VT_TRC_RV3G324MCALLMONASETMPCCHANNELS, "Rv3G324mCallMONASetMPCChannels(call=%08X,supporteRxMPCChannels=%d,supporteTxMPCChannels=%d)")
TRC_MSG(VT_TRC_RV3G324MCALLMONASETMPCCHANNELS_1, "Rv3G324mCallMONASetMPCChannels(call=%08X, supportedRxMPCChannels=%d, supportedTxMPCChannels=%d, status = %d)")
TRC_MSG(VT_TRC_RV3G324MCALLOPEN, "Rv3G324mCallOpen(call=%08X)")
TRC_MSG(VT_TRC_RV3G324MCALLOPEN_1, "Rv3G324mCallOpen(call=%08X)=%d")
TRC_MSG(VT_TRC_RV3G324MCALLOPEN_BAD_CALL_STATE_FOR_CALL, "Rv3G324mCallOpen: Bad call state for call=%08X")
TRC_MSG(VT_TRC_RV3G324MCALLRECEIVE, "Rv3G324mCallReceive(call=%08X,h3G324m=%08X,bytesReceived=%d)")
TRC_MSG(VT_TRC_RV3G324MCALLRECEIVEDRESETREQUESTEV, "Rv3G324mCallReceivedResetRequestEv(hAppCall=%08X,hCall=%08X)")
TRC_MSG(VT_TRC_RV3G324MCALLRECEIVEDRESETREQUESTEV_1, "Rv3G324mCallReceivedResetRequestEv")
TRC_MSG(VT_TRC_RV3G324MCALLRECEIVEMESSAGEEV, "Rv3G324mCallReceiveMessageEv(hAppCall=%08X,hCall=%08X)")
TRC_MSG(VT_TRC_RV3G324MCALLRECEIVEMESSAGEEV_1, "Rv3G324mCallReceiveMessageEv")
TRC_MSG(VT_TRC_RV3G324MCALLRECEIVEMUXPDU, "Rv3G324mCallReceiveMuxPdu(call=%08X,h3G324m=%08X,bytesReceived=%d,closeSegmentable=%d)")
TRC_MSG(VT_TRC_RV3G324MCALLRECEIVEMUXPDU_1, "Rv3G324mCallReceiveMuxPdu(call=%08X,h3G324m=%08X)=%d")
TRC_MSG(VT_TRC_RV3G324MCALLRECEIVE_1, "Rv3G324mCallReceive(call=%08X,h3G324m=%08X)=%d")
TRC_MSG(VT_TRC_RV3G324MCALLRECEIVE_CALL_ALREADY_DISCONNECTED, "Rv3G324mCallReceive: Call %08X already disconnected by application")
TRC_MSG(VT_TRC_RV3G324MCALLRELEASEBUFFEREV, "Rv3G324mCallReleaseBufferEv(hAppCall=%08X,hCall=%08X)")
TRC_MSG(VT_TRC_RV3G324MCALLRELEASEBUFFEREV_1, "Rv3G324mCallReleaseBufferEv")
TRC_MSG(VT_TRC_RV3G324MCALLRELEASESENDBUFFEREV, "Rv3G324mCallReleaseSendBufferEv(hAppCall=%08X,hCall=%08X,pBuffer=%08X,bufSize=%d)")
TRC_MSG(VT_TRC_RV3G324MCALLRELEASESENDBUFFEREV_1, "Rv3G324mCallReleaseSendBufferEv")
TRC_MSG(VT_TRC_RV3G324MCALLRESET, "Rv3G324mCallReset(call=%08X)")
TRC_MSG(VT_TRC_RV3G324MCALLRESET_1, "Rv3G324mCallReset(call=%08X)=%d")
TRC_MSG(VT_TRC_RV3G324MCALLRESET_BAD_CALL_STATE_FOR_CALL, "Rv3G324mCallReset: Bad call state for call=%08X")
TRC_MSG(VT_TRC_RV3G324MCALLSEND, "Rv3G324mCallSend(call=%08X,h3G324m=%08X)")
TRC_MSG(VT_TRC_RV3G324MCALLSENDLH223MULTIPLEXRECONFIGURATION, "Rv3G324mCallSendlH223MultiplexReconfiguration: Bad call state for call=%08X")
TRC_MSG(VT_TRC_RV3G324MCALLSENDLH223MULTIPLEXRECONFIGURATION_1, "Rv3G324mCallSendlH223MultiplexReconfiguration(call=%08X)")
TRC_MSG(VT_TRC_RV3G324MCALLSENDLH223MULTIPLEXRECONFIGURATION_2, "Rv3G324mCallSendlH223MultiplexReconfiguration(call=%08X)=%d")
TRC_MSG(VT_TRC_RV3G324MCALLSENDMAXH223MUXPDUSIZE, "Rv3G324mCallSendMaxH223MuxPduSize(Call=%08X, maxMuxPduSize=%d)")
TRC_MSG(VT_TRC_RV3G324MCALLSENDMAXH223MUXPDUSIZE_1, "Rv3G324mCallSendMaxH223MuxPduSize(call=%08X)=%d")
TRC_MSG(VT_TRC_RV3G324MCALLSENDMESSAGE, "Rv3G324mCallSendMessage(call=%08X, nodeId=%d)")
TRC_MSG(VT_TRC_RV3G324MCALLSENDMESSAGEEV, "Rv3G324mCallSendMessageEv(hAppCall=%08X,hCall=%08X)")
TRC_MSG(VT_TRC_RV3G324MCALLSENDMESSAGEEV_1, "Rv3G324mCallSendMessageEv")
TRC_MSG(VT_TRC_RV3G324MCALLSENDMESSAGE_1, "Rv3G324mCallSendMessage(call=%08X, nodeId=%d)=%d")
TRC_MSG(VT_TRC_RV3G324MCALLSENDMESSAGE_FAILURE_IN_SENDING, "Rv3G324mCallSendMessage: Failure in sending control data for call=%08X")
TRC_MSG(VT_TRC_RV3G324MCALLSENDMESSAGE_FAIL_ERROR_ENCODING, "Rv3G324mCallSendMessage: Sending Failure - Error Encoding")
TRC_MSG(VT_TRC_RV3G324MCALLSENDMESSAGE_FAIL_NETWORK_DISCONNECTED, "Rv3G324mCallSendMessage: Sending Failure - Network Disconnected")
TRC_MSG(VT_TRC_RV3G324MCALLSENDMULTIPLEXENTRYTABLE, "Rv3G324mCallSendMultiplexEntryTable(call=%08X)")
TRC_MSG(VT_TRC_RV3G324MCALLSENDMULTIPLEXENTRYTABLE_1, "Rv3G324mCallSendMultiplexEntryTable(call=%08X)=%d")
TRC_MSG(VT_TRC_RV3G324MCALLSENDMULTIPLEXENTRYTABLE_UNABLE, "Rv3G324mCallSendMultiplexEntryTable: Unable to set multiplexing table for call=%08X")
TRC_MSG(VT_TRC_RV3G324MCALLSENDVENDORIDENTIFICATION, "Rv3G324mCallSendVendorIdentification(Call=%08X, nonStandardId=%08X, productNumber=%08X, versionNumber=%08X,)")
TRC_MSG(VT_TRC_RV3G324MCALLSENDVENDORIDENTIFICATION_1, "Rv3G324mCallSendVendorIdentification(call=%08X)=%d")
TRC_MSG(VT_TRC_RV3G324MCALLSEND_1, "Rv3G324mCallSend(call=%08X,h3G324m=%08X,bytesToSend=%d)=%d")
TRC_MSG(VT_TRC_RV3G324MCALLSEND_CALL_ALREADY_DISCONNECTED, "Rv3G324mCallSend: Call %08X already disconnected by application")
TRC_MSG(VT_TRC_RV3G324MCALLSEND_FAIL_HELPER_OBJ_FAIL, "Rv3G324mCallSend: Sending Failure - helper object fail")
TRC_MSG(VT_TRC_RV3G324MCALLSETEVHANDLERS, "Rv3G324mCallSetEvHandlers(h3G324m=%08X,callEvent=%08X,size=%d)")
TRC_MSG(VT_TRC_RV3G324MCALLSETEVHANDLERS_0, "Rv3G324mCallSetEvHandlers()=0")
TRC_MSG(VT_TRC_RV3G324MCALLSETMUXLEVEL, "Rv3G324mCallSetMuxLevel(h3G324m=%08X,Call=%08X, Mux-Level=%d)")
TRC_MSG(VT_TRC_RV3G324MCALLSETMUXLEVEL_1, "Rv3G324mCallSetMuxLevel(call=%08X)=%d")
TRC_MSG(VT_TRC_RV3G324MCALLSETPARAM, "Rv3G324mCallSetParam(call=%08X, eParam=%d, value=%d, strValue=%08X)")
TRC_MSG(VT_TRC_RV3G324MCALLSETSTREAMINGBUFFER, "Rv3G324mCallSetStreamingBuffer(call=%08X,buffer=%08X,size=%d)")
TRC_MSG(VT_TRC_RV3G324MCALLSETSTREAMINGBUFFER_1, "Rv3G324mCallSetStreamingBuffer(call=%08X)=%d")
TRC_MSG(VT_TRC_RV3G324MCALLSETSTREAMINGBUFFER_BAD_CALL_STATE, "Rv3G324mCallSetStreamingBuffer: Bad call state for call=%08X")
TRC_MSG(VT_TRC_RV3G324MCALLSTATECHANGEDEV, "Rv3G324mCallStateChangedEv.")
TRC_MSG(VT_TRC_RV3G324MCALLSTATECONNECTED, "Rv3G324mCallStateConnected")
TRC_MSG(VT_TRC_RV3G324MCALLSTATECONNECTEDCHANNELS,"Rv3G324mCallStateConnectedChannels")
TRC_MSG(VT_TRC_RV3G324MCALLSTATEDISCONNECTED, "Rv3G324mCallStateDisconnected")
TRC_MSG(VT_TRC_RV3G324MCALLSTATEIDLE,"Rv3G324mCallStateIdle")
TRC_MSG(VT_TRC_RV3G324MCALLSTATELOSTSYNCH,"Rv3G324mCallStateLostSynch")
TRC_MSG(VT_TRC_RV3G324MCALLSTATERESETTING,"Rv3G324mCallStateResetting")
TRC_MSG(VT_TRC_RV3G324MCALLSTATESYNCHRONIZED,"Rv3G324mCallStateSynchronized")
TRC_MSG(VT_TRC_RV3G324MCHANGEN400COUNTER, "[XSRP] Change N400 Counter to %d")
TRC_MSG(VT_TRC_RV3G324MCHANGENSRPTIMER, "[XSRP] Change NSRP T401 to %d")
TRC_MSG(VT_TRC_RV3G324MCONSTRUCT, "Rv3G324mConstruct(ERROR)=%d")
TRC_MSG(VT_TRC_RV3G324MCONSTRUCT_0, "Rv3G324mConstruct(*h3G324m=%08X)=0")
TRC_MSG(VT_TRC_RV3G324MCONSTRUCT_H223_CONSTRUCTION_ERROR, "Rv3G324mConstruct: H223 construction error (%d).")
TRC_MSG(VT_TRC_RV3G324MCONSTRUCT_H245_CONSTRUCTION_ERROR, "Rv3G324mConstruct: H245 construction error (%d).")
TRC_MSG(VT_TRC_RV3G324MDESTRUCT, "Rv3G324mDestruct(h3G324m=%08X)")
TRC_MSG(VT_TRC_RV3G324MDESTRUCT_0, "Rv3G324mDestruct()=0")
TRC_MSG(VT_TRC_RV3G324MGETH245SYNTAX, "Rv3G324mGetH245Syntax() = %08X")
TRC_MSG(VT_TRC_RV3G324MGETH245SYNTAX_H3G324M, "Rv3G324mGetH245Syntax: h3G324m=%08X.")
TRC_MSG(VT_TRC_RV3G324MGETRESOURCECOUNTING, "Rv3G324mGetResourceCounting")
TRC_MSG(VT_TRC_RV3G324MGETRESOURCECOUNTING_BUF_BUFLEN, "Rv3G324mGetResourceCounting: buf=%08X.bufLen=%d")
TRC_MSG(VT_TRC_RV3G324MGETSYNTREEBYROOTNAME_HAPP, "Rv3G324mGetSynTreeByRootName: hApp=%08X.")
TRC_MSG(VT_TRC_RV3G324MGETVALTREE, "Rv3G324mGetValTree() = %08X")
TRC_MSG(VT_TRC_RV3G324MGETVALTREE_H3G324M, "Rv3G324mGetValTree: h3G324m=%08X.")
TRC_MSG(VT_TRC_RV3G324MMONAPREFERENCERECEIVEDEV, "Rv3G324mMONAPreferenceReceivedEv(hAppCall=%08X,hCall=%08X,pMsg=%08X,msgSize=%d)")
TRC_MSG(VT_TRC_RV3G324MMONAPREFERENCERECEIVEDEV_1, "Rv3G324mMONAPreferenceReceivedEv")
TRC_MSG(VT_TRC_RV3G324MMONAPREFERENCESENDEV, "Rv3G324mMONAPreferenceSendEv(hAppCall=%08X,hCall=%08X,lastMessage=%d)")
TRC_MSG(VT_TRC_RV3G324MMONAPREFERENCESENDEV_1, "Rv3G324mMONAPreferenceSendEv")
TRC_MSG(VT_TRC_RVARESCANCELQUERY, "RvAresCancelQuery(engine=%08X,queryId=%d)")
TRC_MSG(VT_TRC_RVARESCANCELQUERY_1, "RvAresCancelQuery(engine=%08X)")
TRC_MSG(VT_TRC_RVARESCANCELQUERY_ARES_CANCEL_QUERY_FAILED, "RvAresCancelQuery: ares_cancel_query failed(status=%d)")
TRC_MSG(VT_TRC_RVARESCONFIGURE, "RvAresConfigure(engine=%08X)")
TRC_MSG(VT_TRC_RVARESCONFIGURE_1, "RvAresConfigure(engine=%08X)=%d")
TRC_MSG(VT_TRC_RVARESCONFIGURE_SUFFIX_AUTOCONFIGURATION_ISNT, "RvAresConfigure: suffix autoconfiguration isn't supported under WCE")
TRC_MSG(VT_TRC_RVARESCONSTRUCT, "RvAresConstruct(engine=%08X)")
TRC_MSG(VT_TRC_RVARESCONSTRUCT_1, "RvAresConstruct(%08X; %d)")
TRC_MSG(VT_TRC_RVARESCONSTRUCT_CACHE_CREATION_FAILED, "RvAresConstruct(%08X,%d), cache creation failed")
TRC_MSG(VT_TRC_RVARESCONSTRUCT_COMPILED_WITHOUT_PLATFORM, "RvAresConstruct (init_winNT): Compiled without Platform SDK")
TRC_MSG(VT_TRC_RVARESCONSTRUCT_COMPILED_WITH_PLATFORM_SDK, "RvAresConstruct (init_win2k): Compiled with Platform SDK")
TRC_MSG(VT_TRC_RVARESCONSTRUCT_CONFIG_NAMESERVER_BY_STRING, "RvAresConstruct (init_win2k): config_nameserver_by_string (status=%d)")
TRC_MSG(VT_TRC_RVARESCONSTRUCT_GAIFUNC, "RvAresConstruct (init_win2k): gaiFunc (status=%d)")
TRC_MSG(VT_TRC_RVARESCONSTRUCT_GPAIFUNC, "RvAresConstruct (init_win2k): gpaiFunc (status=%d)")
TRC_MSG(VT_TRC_RVARESCONSTRUCT_NULL, "RvAresConstruct: NULL")
TRC_MSG(VT_TRC_RVARESDESTRUCT, "RvAresDestruct(engine=%08X)")
TRC_MSG(VT_TRC_RVARESGETPARAMS, "RvAresGetParams(engine=%08X)")
TRC_MSG(VT_TRC_RVARESSENDQUERY, "RvAresSendQuery(%08X; %d)")
TRC_MSG(VT_TRC_RVARESSENDQUERY_1, "RvAresSendQuery(engine=%08X,qid=%d)")
TRC_MSG(VT_TRC_RVARESSENDQUERY_INSUFFICIENT_BUFFER, "RvAresSendQuery(%08X; %d) - INSUFFICIENT_BUFFER")
TRC_MSG(VT_TRC_RVARESSETPARAMS, "RvAresSetParams(engine=%08X,to=%d,nTries=%d,nServers=%d,nDomains=%d)")
TRC_MSG(VT_TRC_RVARESSETPARAMS_1, "RvAresSetParams(%08X; %d)")
TRC_MSG(VT_TRC_RVARESSETPARAMS_2, "RvAresSetParams(engine=%08X)")
TRC_MSG(VT_TRC_RVCALLSETCONTROLBISPEERSUPPORTNSRP, "RvCallSetControlbIsPeerSupportNSRP: support nsrp = %d")
TRC_MSG(VT_TRC_RVCLOCKGET, "RvClockGet(logMgr=%08X,t=%08X)")
TRC_MSG(VT_TRC_RVCLOCKGET_1, "RvClockGet(logMgr=%08X,t=%08X) = %d")
TRC_MSG(VT_TRC_RVCLOCKRESOLUTION, "RvClockResolution(logMgr=%08X,t=%08X)")
TRC_MSG(VT_TRC_RVCLOCKRESOLUTION_1, "RvClockResolution(logMgr=%08X,t=%08X) = %d")
TRC_MSG(VT_TRC_RVCLOCKSET, "RvClockSet(t=%08X,logMgr=%08X)")
TRC_MSG(VT_TRC_RVCLOCKSET_0X, "RvClockSet(t=%08X,logMgr=%08X) = 0x%x")
TRC_MSG(VT_TRC_RVCLOCKSET_T_NULL, "RvClockSet, t == NULL")
TRC_MSG(VT_TRC_RVDNSCALLBACK_CALLING_USER_CB, "rvDnsCallback: calling user CB (queryId=%d,recNum=%d,dataType=%d)")
TRC_MSG(VT_TRC_RVDNSCALLBACK_UNABLE_TO_DECODE_RECORD, "rvDnsCallback: unable to decode record (queryId=%d, status=%d)")
TRC_MSG(VT_TRC_RVDNSCALLBACK_USER_CB_RETURNED, "rvDnsCallback: user CB returned (queryId=%d,status=%d)")
TRC_MSG(VT_TRC_RVEMALOCK, "RvEmaLock(elem=%08X)")
TRC_MSG(VT_TRC_RVFDCONSTRUCT, "RvFdConstruct(fd=%08X,socket=%d,logMgr=%08X)")
TRC_MSG(VT_TRC_RVFDCONSTRUCT_WRONG_INPUT_PARAMETERS, "RvFdConstruct, wrong input parameters")
TRC_MSG(VT_TRC_RVFDDESTRUCT, "RvFdDestruct(fd=%08X)")
TRC_MSG(VT_TRC_RVFDGETSOCKET, "RvFdGetSocket(fd=%08X)")
TRC_MSG(VT_TRC_RVFDPREEMPTIONCALLBACK, "rvFdPreemptionCallback(eng=%08X,fd=%08X,event=%08X,error=%d)")
TRC_MSG(VT_TRC_RVFDPREEMPTIONCALLBACK_READ_FAILURE, "rvFdPreemptionCallback read failure")
TRC_MSG(VT_TRC_RVFDPREEMPTIONCALLBACK_RECEIVED_PREEMPTION, "rvFdPreemptionCallback, received %d preemption message")
TRC_MSG(VT_TRC_RVFDPREEMPTIONCONSTRUCT_FAILURE, "rvFdPreemptionConstruct failure")
TRC_MSG(VT_TRC_RVFDPREEMPT_ERROR_CALLING, "rvFdPreempt: Error calling RvSocketSendBuffer")
TRC_MSG(VT_TRC_RVH223ACPDEMUXREPLAYVIDEOBUFFERS_ENTER, "[MONA]RvH223ACPDemuxReplayVideoBuffers: Enter")
TRC_MSG(VT_TRC_RVH223ADJUSTNSRPT401TIMER_NEW_VALUE, "RvH223AdjustNSRPT401Timer: new T401 is %d")
TRC_MSG(VT_TRC_RVH223ALCONSTRUCT_FAILED_TO_ADD_LC_TO_THE, "RvH223AlConstruct Failed to add LC to the muxer. control instance: %08X")
TRC_MSG(VT_TRC_RVH223ALCONSTRUCT_FAILED_TO_CONSTRUCT_LOCK, "RvH223ALConstruct Failed to construct lock. AL instance: %08X")
TRC_MSG(VT_TRC_RVH223ALDEMUXDATAINDICATION_FAILED_TO_CALCULATE, "RvH223AlDemuxDataIndication Failed to calculate ALxM CRC")
TRC_MSG(VT_TRC_RVH223ALDESTRUCT_FAILED_TO_CLEAR_THE_LC_FROM, "RvH223ALDestruct Failed to clear the LC from the demux. AL instance: %08X")
TRC_MSG(VT_TRC_RVH223ALDESTRUCT_FAILED_TO_DELETE_AL, "RvH223ALDestruct Failed to delete AL instance")
TRC_MSG(VT_TRC_RVH223ALDESTRUCT_FAILED_TO_REMOVE_THE_LC_FROM, "RvH223ALDestruct Failed to remove the LC from the muxer. AL instance: %08X")
TRC_MSG(VT_TRC_RVH223ALXMDEMUXDATAINDICATION_ALLOCATED_BUFFER, "RvH223AlxMDemuxDataIndication: Allocated buffer is too small. AL instance: %08X")
TRC_MSG(VT_TRC_RVH223ALXMDEMUXDATAINDICATION_EGOLAY_INVALID, "RvH223AlxMDemuxDataIndication EGOLAY invalid code")
TRC_MSG(VT_TRC_RVH223ALXMDEMUXDATAINDICATION_NO_MORE_BUFFER, "RvH223AlxMDemuxDataIndication: No more buffer resources. AL instance: %08X")
TRC_MSG(VT_TRC_RVH223ALXMDEMUXDATAINDICATION_SEBCHGOLAY_INVALID, "RvH223AlxMDemuxDataIndication: SEBCH/GOLAY invalid code")
TRC_MSG(VT_TRC_RVH223ALXMDEMUXDATAINDICATION_SEBCH_DECODE, "RvH223AlxMDemuxDataIndication SEBCH decode failed")
TRC_MSG(VT_TRC_RVH223ALXMDEMUXDATAINDICATION_SRS_DECODE, "RvH223AlxMDemuxDataIndication: SRS decode failed")
TRC_MSG(VT_TRC_RVH223CONSTRUCT_FAILED_TO_CONSTRUCT_CONTROL, "RvH223Construct Failed to construct control")
TRC_MSG(VT_TRC_RVH223CONSTRUCT_FAILED_TO_CONSTRUCT_DEMUX, "RvH223Construct Failed to construct demux")
TRC_MSG(VT_TRC_RVH223CONSTRUCT_FAILED_TO_CONSTRUCT_MUXER, "RvH223Construct Failed to construct muxer")
TRC_MSG(VT_TRC_RVH223CONSTRUCT_FAILED_TO_GENERATE_MUXTABLE, "RvH223Construct Failed to generate muxtable")
TRC_MSG(VT_TRC_RVH223CONSTRUCT_FAILED_WHEN_TRYING_TO_ADD_RA, "RvH223Construct Failed when trying to add RA element for the new instance")
TRC_MSG(VT_TRC_RVH223CONTROLCONSTRUCT_FAILED_TO_ADD_LC_TO, "RvH223ControlConstruct Failed to add LC to the muxer, for the control. control instance: %08X")
TRC_MSG(VT_TRC_RVH223CONTROLCONSTRUCT_FAILED_TO_ADD_LC_TO_1, "RvH223ControlConstruct Failed to add LC to the demux, for the control. control instance: %08X")
TRC_MSG(VT_TRC_RVH223CONTROLDEMUXDATAINDICATION_FAILED_IN, "RvH223ControlDemuxDataIndication Failed in crc checking: %08X, target CRC = %hu, actual CRC [1B:%hu,2B: %hu]")
TRC_MSG(VT_TRC_RVH223CONTROLDEMUXDATAINDICATION_MEM_FREE_BY_NSRP,"[xSRP][RvH223ControlDemuxDataIndication]Free pool %x by NSRP ACK, Q size = %hu, FSI = %hu, AWI = %hu")
TRC_MSG(VT_TRC_RVH223CONTROLDEMUXDATAINDICATION_SWITCH_MODE_TO_NSRP,"[xSRP][RvH223ControlDemuxDataIndication]Switch mode to NSRP, [line: %d]")
TRC_MSG(VT_TRC_RVH223CONTROLDEMUXDATAINDICATION_SWITCH_MODE_TO_SRP,"[xSRP][RvH223ControlDemuxDataIndication]Switch mode to SRP, [line: %d]")
TRC_MSG(VT_TRC_RVH223CONTROLDEMUXDATAINDICATION_SWITCH_MODE_TO_WNSRP,"[xSRP][RvH223ControlDemuxDataIndication]Switch mode to WNSRP, [line: %d]")
TRC_MSG(VT_TRC_RVH223CONTROLDEMUXDATAIND_ACCESS_MARK, "[xSRP] ControlDemux: idx=%hu, access mark=%hu [Ln:%d]")
TRC_MSG(VT_TRC_RVH223CONTROLDEMUXDATAIND_IGNORE_NSRP_CMD, "[xSRP] Ignore NSRP CMD %d [Ln:%d]")
TRC_MSG(VT_TRC_RVH223CONTROLDEMUXDATAIND_IGNORE_WNSRP_CMD, "[xSRP] Ignore WNSRP CMD %d [Ln:%d]")
TRC_MSG(VT_TRC_RVH223CONTROLDEMUXDATAIND_NSRP_SQ_WORKAROUND, "NSRP SEQ Workaround: nsrpRcvNum=%d")
TRC_MSG(VT_TRC_RVH223CONTROLDESTRUCT_FAILED_TO_CANCEL_THE, "RvH223ControlDestruct Failed to cancel the nsrp401 timer. control instance: %08X")
TRC_MSG(VT_TRC_RVH223CONTROLDESTRUCT_FAILED_TO_DESTRUCT_THE, "RvH223ControlDestruct Failed to destruct the instance lock. control instance: 0%08X")
TRC_MSG(VT_TRC_RVH223CONTROLDESTRUCT_FAILED_TO_REMOVE_LC_FROM, "RvH223ControlDestruct Failed to remove LC from the muxer. control instance: %08X")
TRC_MSG(VT_TRC_RVH223CONTROLDESTRUCT_FAILED_TO_REMOVE_LC_FROM_1, "RvH223ControlDestruct Failed to remove LC from the demux. control instance: %08X")
TRC_MSG(VT_TRC_RVH223CONTROLINIT_WNSRP_POOL_SIZE, "[rvmem] Construct WNSRP Rpool, Size = %d [Ln:%d]")
TRC_MSG(VT_TRC_RVH223CONTROLSENDDATA_MUTEX_LOCK_FAIL, "RvH223ControlSendData: Mutex Lock failure, return RV_ERROR_HELPER_OBJ_FAILURE")
TRC_MSG(VT_TRC_RVH223CONTROLSENDDATA_MUTEX_UNLOCK_FAIL, "RvH223ControlSendData: Mutex Lock failure, return RV_ERROR_HELPER_OBJ_FAILURE")
TRC_MSG(VT_TRC_RVH223CONTROLSENDDATA_WNSRP_WINDOW_SIZE_IS_FULL, "RvH223ControlSendData: WNSRP Window size is full. Cur Window size = %d, Max Window size = %d")
TRC_MSG(VT_TRC_RVH223DEMUXACPIGNOREDATA_DEMUX_INSTANCE_NO, "RvH223DemuxACPIgnoreData: demux instance: %08X No More Buffers - Video AL-SDU Lost")
TRC_MSG(VT_TRC_RVH223DEMUXACPIGNOREDATA_MSG1, "[MONA]RvH223DemuxACPIgnoreData: Enter [Params: checkBuf? = %d, checkIgnore? = %d]")
TRC_MSG(VT_TRC_RVH223DEMUXACPSETDEFAULTDEMUXTBL_FAILED_TO, "RvH223DemuxACPSetDefaultDemuxTbl: Failed to add Audio LC to the demux. Demux instance: %08X")
TRC_MSG(VT_TRC_RVH223DEMUXACPSETDEFAULTDEMUXTBL_FAILED_TO_1, "RvH223DemuxACPSetDefaultDemuxTbl: Failed to add Video LC to the demux. Demux instance: %08X")
TRC_MSG(VT_TRC_RVH223DEMUXADDLC_DEMUX_INSTANCE_UPDATING, "RvH223DemuxAddLC: demux instance: %08X Updating audioChannel %08X")
TRC_MSG(VT_TRC_RVH223DEMUXADDLC_DEMUX_INSTANCE_UPDATING_1, "RvH223DemuxAddLC: demux instance: %08X Updating videoChannel %08X")
TRC_MSG(VT_TRC_RVH223DEMUXADDLC_FAILED_TO_ADD_RA_ELEMENT_FOR, "RvH223DemuxAddLC Failed to add RA element for new LC descriptor. demux instance: %08X")
TRC_MSG(VT_TRC_RVH223DEMUXADDLC_LCUPDATE, "RvH223DemuxAddLC: LCUpdate=%d, lcn=%hu, entryIndex=%d [Ln:%d]")
TRC_MSG(VT_TRC_RVH223DEMUXADDLC_SUCCEEDED_IN_ADDING_LC, "RvH223DemuxAddLC succeeded in adding LC. demux instance: %08X, LcDesc: %08X")
TRC_MSG(VT_TRC_RVH223DEMUXANNOUNCEDATA_SUCCEEDED_IN_PROCESSING, "RvH223DemuxAnnounceData succeeded in processing the data. demux instance: %08X")
TRC_MSG(VT_TRC_RVH223DEMUXCONSTRUCT_FAILED_TO_CONSTRUCT, "RvH223DemuxConstruct Failed to construct lock. demux instance: %08X")
TRC_MSG(VT_TRC_RVH223DEMUXDATAINDICATION_WINDOW_SIZE_IS_TOO_SMALL, "rvH223DemuxDataIndication: window size is too small, diff = %d, window size = %d ")
TRC_MSG(VT_TRC_RVH223DEMUXDESTRUCT_FAILED_TO_DESTRUCT_A_CHANNEL, "RvH223DemuxDestruct Failed to destruct a channel descriptor. demux instance: %08X, LcDesc: %08X")
TRC_MSG(VT_TRC_RVH223DEMUXDESTRUCT_FAILED_TO_DESTRUCT_THE, "RvH223DemuxDestruct Failed to destruct the instance lock. demux instance: %08X")
TRC_MSG(VT_TRC_RVH223DEMUXREMOVELC_FAILED_TO_DELETE_RA_ELEMENT, "RvH223DemuxRemoveLC Failed to delete RA element of LC descriptor. demux instance: %08X")
TRC_MSG(VT_TRC_RVH223DEMUXREMOVELC_SUCCEEDED_IN_REMOVING, "RvH223DemuxRemoveLC succeeded in removing LC. demux instance: %08X, LcDesc: %08X")
TRC_MSG(VT_TRC_RVH223DEMUXSETMUXTABLEENTRY_RESET_PLC, "RvH223DemuxSetMuxtableEntry: Set ME %u be NULL pLc, patom->plc=%x [Ln:%d]")
TRC_MSG(VT_TRC_RVH223DEMUXSETMUXTABLEENTRY_SUCCEEDED_SETTING, "RvH223DemuxSetMuxtableEntry succeeded setting new entry. demux instance: %08X, muxEntry: %d")
TRC_MSG(VT_TRC_RVH223MUXERADDLC_AUDIO_MUST_BE_NON, "RvH223MuxerAddLC audio must be non-segmentable: %08X")
TRC_MSG(VT_TRC_RVH223MUXERADDLC_BAD_OR_USED_CHANNEL_TYPE_FOR, "RvH223MuxerAddLC Bad or used channel type for mux=%08X")
TRC_MSG(VT_TRC_RVH223MUXERADDLC_FAILED_TO_ADD_ELEMENT_FOR, "RvH223MuxerAddLC Failed to add element for new LC descriptor. demux instance: %08X")
TRC_MSG(VT_TRC_RVH223MUXERADDLC_VIDEO_MUST_BE_SEGMENTABLE, "RvH223MuxerAddLC video must be segmentable: %08X")
TRC_MSG(VT_TRC_RVH223MUXERCLEARMUXTABLE_MEDIA_IS_PENDING, "RvH223MuxerClearMuxtable: Media is pending. pmux=%08X")
TRC_MSG(VT_TRC_RVH223MUXERCONSTRUCT_FAILED_TO_CONSTRUCT_THE, "RvH223MuxerConstruct Failed to construct the instance lock. muxer instance: %08X")
TRC_MSG(VT_TRC_RVH223MUXERDESTRUCT_FAILED_TO_DESTRUCT_LOCK, "RvH223MuxerDestruct Failed to destruct lock muxer instance")
TRC_MSG(VT_TRC_RVH223MUXERGETXUNFO, "[RvH223MuxerGetMuxPdu]: r:%x, p:%x d:%x")
TRC_MSG(VT_TRC_RVH223MUXERMUXDATAREQUEST_NO_ENTRY_FOR_THIS, "RvH223MuxerMuxDataRequest - no entry for this data type. muxer instance: %08X")
TRC_MSG(VT_TRC_RVH223MUXERMUXDATAREQUEST_THERE_ARE_NOT_ENOUGH, "RvH223MuxerMuxDataRequest - there are not enough MUX-SDUS. muxer instance: %08X")
TRC_MSG(VT_TRC_RVH223MUXERMUXTABLEADDENTRY_3_SEGMENTABLE_CHANNELS, "RvH223MuxerMuxtableAddEntry: 3 segmentable channels in an entry")
TRC_MSG(VT_TRC_RVH223MUXERMUXTABLEADDENTRY_ALL_AUDIO_LOOKUP, "RvH223MuxerMuxtableAddEntry: All audio lookup indexes are used")
TRC_MSG(VT_TRC_RVH223MUXERMUXTABLEADDENTRY_ALL_ENTRIES_ARE, "RvH223MuxerMuxtableAddEntry: All entries are used")
TRC_MSG(VT_TRC_RVH223MUXERMUXTABLEADDENTRY_AUDIOSIZE_CAN_BE, "RvH223MuxerMuxtableAddEntry: audioSize can be up to %d")
TRC_MSG(VT_TRC_RVH223MUXERMUXTABLEADDENTRY_INVALID_DATATYPES, "RvH223MuxerMuxtableAddEntry: Invalid dataTypes for ACP")
TRC_MSG(VT_TRC_RVH223MUXERMUXTABLEADDENTRY_NO_DATA_CHANNEL, "RvH223MuxerMuxtableAddEntry: No data channel")
TRC_MSG(VT_TRC_RVH223MUXERMUXTABLEADDENTRY_NO_PRIMARY_VIDEO, "RvH223MuxerMuxtableAddEntry: No primary video channel")
TRC_MSG(VT_TRC_RVH223MUXERMUXTABLEADDENTRY_NO_SECONDARY_VIDEO, "RvH223MuxerMuxtableAddEntry: No secondary video channel")
TRC_MSG(VT_TRC_RVH223MUXERMUXTABLEADDENTRY_ONLY_AUDIO_IS_ALWAYS, "RvH223MuxerMuxtableAddEntry: Only audio is always supported")
TRC_MSG(VT_TRC_RVH223MUXERMUXTABLEADDENTRY_SEGMENTABLE_CHANNELS, "RvH223MuxerMuxtableAddEntry: Segmentable channels can have up to 15 in ratio")
TRC_MSG(VT_TRC_RVH223MUXERREMOVELC_DESCRIPTOR_DOESNT_BELONG, "RvH223MuxerRemoveLC: Descriptor %08X doesn't belong to muxer %08X")
TRC_MSG(VT_TRC_RVH223RECEIVEFIRSTH223PDU_MSG1, "[MONA] RvH223ReceiveFirstH223PDU: Ack Status [%hu], # PM sent [%hu], PM send size [%u], left [%u]")
TRC_MSG(VT_TRC_RVH223RXALCONSTRUCT_FAILED_TO_ADD_LC_TO_THE, "RvH223RxAlConstruct: Failed to add LC to the demux, for the control. control instance: %08X")
TRC_MSG(VT_TRC_RVH223RXALCONSTRUCT_FAILED_TO_CONSTRUCT, "RvH223RxALConstruct Failed to construct lock. AL instance: %08X")
TRC_MSG(VT_TRC_RVH223RXALDESTRUCT_FAILED_TO_DELETE_AL, "RvH223RxALDestruct Failed to delete AL instance")
TRC_MSG(VT_TRC_RVH223RXALDESTRUCT_FAILED_TO_DESTRUCT_THE_INSTANCE, "RvH223RxALDestruct Failed to destruct the instance lock. AL instance: %08X")
TRC_MSG(VT_TRC_RVH223TXALCONSTRUCT_NO_FREE_INSTANCE, "RvH223TxALConstruct: no free instance. lcn = %d")
TRC_MSG(VT_TRC_RVH223TXALMUXDATAREQUEST_INFO, "[RvH223TxAlMuxDataRequest :%d]wIdx = %u, used = %u, depth = %hu")
TRC_MSG(VT_TRC_RVH223TXALXMMUXDATAREQUEST_BLOCK_SIZE_CANT, "RvH223TxAlxMMuxDataRequest: Block size can't be bigger than 255 in non-splitting SRS encode. AL instance: %08X")
TRC_MSG(VT_TRC_RVH223TXALXMMUXDATAREQUEST_NO_MORE_RPOOL, "RvH223TxAlxMMuxDataRequest: No more rpool resources. AL instance: %08X")
TRC_MSG(VT_TRC_RVH223TXALXMMUXDATAREQUEST_NO_MORE_RPOOL_1, "RvH223TxAlxMMuxDataRequest No more rpool resources (Interleaving buffer). AL instance: %08X")
TRC_MSG(VT_TRC_RVH223TXENCODEDATA_NO_MORE_RPOOL_RESOURCES, "RvH223TxEncodeData: No more rpool resources. AL instance: 0x%x")
TRC_MSG(VT_TRC_RVH223TXENCODEDATA_NO_MORE_RPOOL_RESOURCES_1, "RvH223TxEncodeData: No more rpool resources. AL instance: %08X")
TRC_MSG(VT_TRC_RVH245AUTOCAPSOPENCHANNELS_ENTER, "RvH245AutoCapsOpenChannels: Enter [Params: chanType = %d]")
TRC_MSG(VT_TRC_RVH245AUTOCAPSOPENCHANNELS_FAILED_TO_BUILD, "RvH245AutoCapsOpenChannels Failed to build matching table. H245AutoCaps: 0x%08X")
TRC_MSG(VT_TRC_RVH245AUTOCAPSOPENCHANNELS_FAILED_TO_FIND_SUITABLE, "RvH245AutoCapsOpenChannels Failed to find suitable capabilities for both sides. H245AutoCaps: 0x%08X")
TRC_MSG(VT_TRC_RVH245AUTOCAPSOPENCHANNELS_FAILED_TO_GET_H223, "RvH245AutoCapsOpenChannels Failed to get H.223 information from terminalCapabilityMessage. H245AutoCaps: 0x%08X")
TRC_MSG(VT_TRC_RVH245AUTOCAPSOPENCHANNELS_FAILED_TO_GET_LOCAL, "RvH245AutoCapsOpenChannels Failed to get local capabilities. H245AutoCaps: 0x%08X")
TRC_MSG(VT_TRC_RVH245AUTOCAPSOPENCHANNELS_FAILED_TO_GET_REMOTE, "RvH245AutoCapsOpenChannels Failed to get remote capabilities. H245AutoCaps: 0x%08X")
TRC_MSG(VT_TRC_RVH245AUTOCAPSOPENCHANNELS_FAILED_TO_OPEN_CHANNEL, "RvH245AutoCapsOpenChannels Failed to Open Channel - MSD Unknown")
TRC_MSG(VT_TRC_RVH245AUTOCAPSOPENCHANNELS_FAILED_TO_VALIDATE, "RvH245AutoCapsOpenChannels Failed to validate adaptation layers. H245AutoCaps: 0x%08X")
TRC_MSG(VT_TRC_RVH245AUTOCAPSOPENCHANNELS_MSG1, "RvH245AutoCapsOpenChannels: Opened Channels - Audio = %d, Video = %d")
TRC_MSG(VT_TRC_RVHOSTGETIPLIST, "RvHostGetIpList")
TRC_MSG(VT_TRC_RVHOSTGETIPLIST_GETHOSTBYNAME_RETURNED_NULL, "RvHostGetIpList: gethostbyname returned NULL")
TRC_MSG(VT_TRC_RVHOSTGETIPLIST_GETNETIFACECONFIG_RETURNED, "RvHostGetIpList: GetNetIfaceConfig returned error")
TRC_MSG(VT_TRC_RVHOSTLOCALGETADDRESS, "RvHostLocalGetAddress")
TRC_MSG(VT_TRC_RVHOSTLOCALGETADDRESS_NULL_PARAM, "RvHostLocalGetAddress: NULL param(s)")
TRC_MSG(VT_TRC_RVHOSTLOCALGETADDRESS_RVHOSTGETIPLIST, "RvHostLocalGetAddress: RvHostGetIpList")
TRC_MSG(VT_TRC_RVHOSTLOCALGETNAME, "RvHostLocalGetName")
TRC_MSG(VT_TRC_RVHOSTLOCALGETNAME_NAME_BUFFER_IS_TOO_SHORT, "RvHostLocalGetName: Name buffer is too short")
TRC_MSG(VT_TRC_RVHOSTLOCALGETNAME_NULL_PARAM, "RvHostLocalGetName: NULL param(s)")
TRC_MSG(VT_TRC_RVLOCKCONSTRUCT, "RvLockConstruct(lock=%08X)")
TRC_MSG(VT_TRC_RVLOCKCONSTRUCT_NULL_PARAM, "RvLockConstruct: NULL param(s)")
TRC_MSG(VT_TRC_RVLOCKCONSTRUCT_SUCCEED, "RvLockConstruct(lock=%08X) Succeed")
TRC_MSG(VT_TRC_RVLOCKDESTRUCT, "RvLockDestruct(lock=%08X)")
TRC_MSG(VT_TRC_RVLOCKDESTRUCT_NULL_PARAM, "RvLockDestruct: NULL param(s)")
TRC_MSG(VT_TRC_RVLOCKDESTRUCT_SUCCEED, "RvLockDestruct(lock=%08X) Succeed")
TRC_MSG(VT_TRC_RVLOCKGET, "RvLockGet(lock=%08X)")
TRC_MSG(VT_TRC_RVLOCKGET_NULL_PARAM, "RvLockGet: NULL param(s)")
TRC_MSG(VT_TRC_RVLOCKGET_SUCCEED, "RvLockGet(lock=%08X) Succeed")
TRC_MSG(VT_TRC_RVLOCKRELEASE, "RvLockRelease(lock=%08X)")
TRC_MSG(VT_TRC_RVLOCKRELEASE_NULL_PARAM, "RvLockRelease: NULL param(s)")
TRC_MSG(VT_TRC_RVLOCKRELEASE_SUCCEED, "RvLockRelease(lock=%08X) Succeed")
TRC_MSG(VT_TRC_RVLOCKSETATTR, "RvLockSetAttr(attr=%08X,logMgr)")
TRC_MSG(VT_TRC_RVLOCKSETATTR_ATTR_IS_NULL, "RvLockSetAttr(attr=%08X) attr is NULL")
TRC_MSG(VT_TRC_RVMEMORYALLOC_FAILURE, "RvMemoryAlloc failure")
TRC_MSG(VT_TRC_RVMEMORYALLOC_FOR_SELECTENGINE_FDARRAY_OR_SELECTENGINE, "RvMemoryAlloc for selectEngine->fdArray or selectEngine->tmpFdArray failure")
TRC_MSG(VT_TRC_RVMUTEXCONSTRUCT, "RvMutexConstruct(mutex=%08X)")
TRC_MSG(VT_TRC_RVMUTEXCONSTRUCT_NULL_POINTER_INPUT, "RvMutexConstruct NULL pointer input")
TRC_MSG(VT_TRC_RVMUTEXCONSTRUCT_SUCCEED, "RvMutexConstruct(mutex=%08X) Succeed")
TRC_MSG(VT_TRC_RVMUTEXDESTRUCT, "RvMutexDestruct(mutex=%08X)")
TRC_MSG(VT_TRC_RVMUTEXDESTRUCT_MUTEX_IS_NULL_POINTER, "RvMutexDestruct mutex is NULL pointer")
TRC_MSG(VT_TRC_RVMUTEXDESTRUCT_SUCCEED, "RvMutexDestruct(mutex=%08X) Succeed")
TRC_MSG(VT_TRC_RVMUTEXLOCK, "RvMutexLock(mutex=%08X)")
TRC_MSG(VT_TRC_RVMUTEXLOCK_MUTEX_IS_NULL, "RvMutexLock(mutex=%08X) mutex is NULL")
TRC_MSG(VT_TRC_RVMUTEXLOCK_SUCCEED_COUNTER, "RvMutexLock(mutex=%08X) Succeed, counter = %d")
TRC_MSG(VT_TRC_RVMUTEXRELEASE_NULL_POINTER_INPUT, "RvMutexRelease(mutex=%08X,lockCnt=%08X) NULL pointer input")
TRC_MSG(VT_TRC_RVMUTEXRESTORE_NULL_POINTER_INPUT, "RvMutexRestore(mutex=%08X) NULL pointer input")
TRC_MSG(VT_TRC_RVMUTEXSETATTR_ATTR_IS_NULL, "RvMutexSetAttr(attr=%08X) attr is NULL")
TRC_MSG(VT_TRC_RVMUTEXUNLOCK_MUTEX_IS_NULL, "RvMutexUnlock(mutex=%08X) mutex is NULL")
TRC_MSG(VT_TRC_RVMUTEXUNLOCK_NULL_POINTER_INPUT, "RvMutexUnlock(mutex=%08X,lockCnt=%08X) NULL pointer input")
TRC_MSG(VT_TRC_RVPORTRANGECONSTRUCT, "RvPortRangeConstruct(portRange=%08X)")
TRC_MSG(VT_TRC_RVPORTRANGECONSTRUCT_NULL, "RvPortRangeConstruct: NULL")
TRC_MSG(VT_TRC_RVPORTRANGECONSTRUCT_RANGE, "RvPortRangeConstruct: Range(from=%d; to=%d)")
TRC_MSG(VT_TRC_RVPORTRANGECONSTRUCT_RVLOCKCONSTRUCT, "RvPortRangeConstruct: RvLockConstruct=%d")
TRC_MSG(VT_TRC_RVPORTRANGECONSTRUCT_RVMEMORYALLOC, "RvPortRangeConstruct: RvMemoryAlloc")
TRC_MSG(VT_TRC_RVPORTRANGEDESTRUCT, "RvPortRangeDestruct(portRange=%08X)")
TRC_MSG(VT_TRC_RVPORTRANGEDESTRUCT_1, "RvPortRangeDestruct(portRange=%08X; res=%d)")
TRC_MSG(VT_TRC_RVPORTRANGEGETNUMBEROFFREEPORTS, "RvPortRangeGetNumberOfFreePorts(portRange=%08X)")
TRC_MSG(VT_TRC_RVPORTRANGEGETNUMBEROFFREEPORTS_1, "RvPortRangeGetNumberOfFreePorts(portRange=%08X)=%d")
TRC_MSG(VT_TRC_RVPORTRANGEGETPORT, "RvPortRangeGetPort(portRange=%08X)")
TRC_MSG(VT_TRC_RVPORTRANGEGETPORT_1, "RvPortRangeGetPort(portRange=%08X)=%d")
TRC_MSG(VT_TRC_RVPORTRANGEGETPORT_NO_MORE_FREE_PORTS, "RvPortRangeGetPort(portRange=%08X): No more free ports")
TRC_MSG(VT_TRC_RVPORTRANGEGETRANGE, "RvPortRangeGetRange(portRange=%08X)")
TRC_MSG(VT_TRC_RVPORTRANGERELEASEPORT, "RvPortRangeReleasePort(portRange=%08X,%d)")
TRC_MSG(VT_TRC_RVPORTRANGERELEASEPORT_1, "RvPortRangeReleasePort(portRange=%08X)")
TRC_MSG(VT_TRC_RVPORTRANGERELEASEPORT_RANGE, "RvPortRangeReleasePort(portRange=%08X): Range(port=%d)")
TRC_MSG(VT_TRC_RVQUEUECLEAR, "RvQueueClear(queue=%08X)")
TRC_MSG(VT_TRC_RVQUEUECONSTRUCT, "RvQueueConstruct(queue=%08X)")
TRC_MSG(VT_TRC_RVQUEUECONSTRUCT_NULL_PARAM, "RvQueueConstruct: NULL param(s)")
TRC_MSG(VT_TRC_RVQUEUECONSTRUCT_RANGE, "RvQueueConstruct: Range")
TRC_MSG(VT_TRC_RVQUEUECONSTRUCT_RVLOCKCONSTRUCT, "RvQueueConstruct: RvLockConstruct")
TRC_MSG(VT_TRC_RVQUEUECONSTRUCT_RVMEMORYALLOC, "RvQueueConstruct: RvMemoryAlloc")
TRC_MSG(VT_TRC_RVQUEUECONSTRUCT_RVSEMAPHORECONSTRUCT, "RvQueueConstruct: RvSemaphoreConstruct (emptysem)")
TRC_MSG(VT_TRC_RVQUEUECONSTRUCT_RVSEMAPHORECONSTRUCT_1, "RvQueueConstruct: RvSemaphoreConstruct (fullsem)")
TRC_MSG(VT_TRC_RVQUEUEDESTRUCT, "RvQueueDestruct(queue=%08X)")
TRC_MSG(VT_TRC_RVQUEUEISSTOPPED, "RvQueueIsStopped(queue=%08X)")
TRC_MSG(VT_TRC_RVQUEUEITEMS, "RvQueueItems(queue=%08X)")
TRC_MSG(VT_TRC_RVQUEUERECEIVE, "RvQueueReceive(queue=%08X)")
TRC_MSG(VT_TRC_RVQUEUERECEIVE_QUEUE_HAS_BEEN_STOPPED, "RvQueueReceive(queue=%08X): Queue has been stopped")
TRC_MSG(VT_TRC_RVQUEUERECEIVE_QUEUE_IS_EMPTY, "RvQueueReceive(queue=%08X): Queue is empty")
TRC_MSG(VT_TRC_RVQUEUESEND, "RvQueueSend(queue=%08X)")
TRC_MSG(VT_TRC_RVQUEUESEND_QUEUE_HAS_BEEN_STOPPED, "RvQueueSend(queue=%08X): Queue has been stopped")
TRC_MSG(VT_TRC_RVQUEUESEND_QUEUE_IS_FULL, "RvQueueSend(queue=%08X): Queue is full")
TRC_MSG(VT_TRC_RVQUEUESIZE, "RvQueueSize(queue=%08X)")
TRC_MSG(VT_TRC_RVQUEUESTOP, "RvQueueStop(queue=%08X)")
TRC_MSG(VT_TRC_RVQUEUESTOP_QUEUE_IS_ALREADY_STOPPED, "RvQueueStop(queue=%08X): Queue is already stopped")
TRC_MSG(VT_TRC_RVRATIMERCANCEL, "RvRaTimerCancel(tH=%08X,timer=%08X)")
TRC_MSG(VT_TRC_RVRATIMERCANCEL_1, "RvRaTimerCancel(tH=%08X,timer=%08X)=%d")
TRC_MSG(VT_TRC_RVRATIMERCLEAR, "RvRaTimerClear(tH=%08X,timer=%08X)")
TRC_MSG(VT_TRC_RVRATIMERSTARTWITHTYPE, "RvRaTimerStartWithType(tH=%08X,eventHander=%08X,context=%08X)=%08X")
TRC_MSG(VT_TRC_RVSELECTADD, "RvSelectAdd(fd=%d)=%d")
TRC_MSG(VT_TRC_RVSELECTADD_CANT_ADD_FD_WITH, "RvSelectAdd: Can't add fd=%d with %d")
TRC_MSG(VT_TRC_RVSELECTADD_FAILURE_FD_WAS_CLOSED_BY_THE_TCP, "RvSelectAdd failure, FD was closed by the TCP peer")
TRC_MSG(VT_TRC_RVSELECTADD_RANGE_CHECK, "RvSelectAdd: Range check")
TRC_MSG(VT_TRC_RVSELECTCONSTRUCT, "RvSelectConstruct(maxHashSize=%d,maxTimers=%d,logMgr=%08X,eng=%08X)")
TRC_MSG(VT_TRC_RVSELECTCONSTRUCT_1, "RvSelectConstruct(eng=%08X,maxHashSize=%d,logMgr=%08X)")
TRC_MSG(VT_TRC_RVSELECTCONSTRUCT_ENGINE_EXISTS_STATUS, "RvSelectConstruct engine exists (status=%d")
TRC_MSG(VT_TRC_RVSELECTCONSTRUCT_FAILED_TO_ALLOCATE_SELECT, "RvSelectConstruct failed to allocate select engine")
TRC_MSG(VT_TRC_RVSELECTCONSTRUCT_FAILED_TO_ALLOCATE_THREAD, "RvSelectConstruct failed to allocate thread wrapper")
TRC_MSG(VT_TRC_RVSELECTCONSTRUCT_FAILED_TO_ASSOCIATE_THREAD, "RvSelectConstruct failed to associate thread wrapper to thread")
TRC_MSG(VT_TRC_RVSELECTCONSTRUCT_LOCK_CONSTRUCT_FAILURE, "RvSelectConstruct lock construct failure")
TRC_MSG(VT_TRC_RVSELECTCONSTRUCT_RVTHREADGETVAR_FAILED, "RvSelectConstruct RvThreadGetVar failed")
TRC_MSG(VT_TRC_RVSELECTDESTRUCT, "RvSelectDestruct(eng=%08X)")
TRC_MSG(VT_TRC_RVSELECTDESTRUCT_1, "RvSelectDestruct(eng=%08X)=%d")
TRC_MSG(VT_TRC_RVSELECTDESTRUCT_RVTHREADGETVAR_FAILURE, "RvSelectDestruct, RvThreadGetVar failure")
TRC_MSG(VT_TRC_RVSELECTDESTRUCT_RVTHREADSETVAR_FAILURE, "RvSelectDestruct, RvThreadSetVar failure")
TRC_MSG(VT_TRC_RVSELECTDESTRUCT_TRYING_TO_DESTRUCT_SELECT, "RvSelectDestruct, trying to destruct select engine from thread other than thread where it was constructed")
TRC_MSG(VT_TRC_RVSELECTFINDFD, "RvSelectFindFd(eng=%08X,socket=%d)")
TRC_MSG(VT_TRC_RVSELECTFINDFD_1, "RvSelectFindFd(eng=%08X,socket=%d)=%08X")
TRC_MSG(VT_TRC_RVSELECTGETEVENTS, "RvSelectGetEvents(fd=%08X)")
TRC_MSG(VT_TRC_RVSELECTGETPOLLFDS_FD_IS_OUT_OF_RANGE, "RvSelectGetPollFds FD is out of range")
TRC_MSG(VT_TRC_RVSELECTGETTHREADENGINE, "RvSelectGetThreadEngine(logMgr=%08X,selectEngine=%08X)")
TRC_MSG(VT_TRC_RVSELECTGETTHREADENGINE_RVTHREADGETVAR, "RvSelectGetThreadEngine RvThreadGetVar failed")
TRC_MSG(VT_TRC_RVSELECTGETTHREADENGINE_WRONG_INPUT_PARAMETER, "RvSelectGetThreadEngine, wrong input parameter, selectEngine == NULL")
TRC_MSG(VT_TRC_RVSELECTGETTIMEOUTINFO, "RvSelectGetTimeoutInfo(eng=%08X,callback=%08X,tqueue=%08X)")
TRC_MSG(VT_TRC_RVSELECTGETTIMEOUTINFO_1, "RvSelectGetTimeoutInfo(eng=%08X,callback=%08X,tqueue=%08X)=%d")
TRC_MSG(VT_TRC_RVSELECTKQUEUEGROUPSCONSTRUCT, "rvSelectKqueueGroupsConstruct(eng=%08X)")
TRC_MSG(VT_TRC_RVSELECTKQUEUEGROUPSCONSTRUCT_1, "rvSelectKqueueGroupsConstruct(eng=%08X;kqueueIdLow=%d;kqueueIdHigh=%d)")
TRC_MSG(VT_TRC_RVSELECTKQUEUEGROUPSCONSTRUCT_CREATING_HIGH, "rvSelectKqueueGroupsConstruct: creating high priority kqueue failure")
TRC_MSG(VT_TRC_RVSELECTKQUEUEGROUPSCONSTRUCT_CREATING_LOW, "rvSelectKqueueGroupsConstruct: creating low priority kqueue failure")
TRC_MSG(VT_TRC_RVSELECTKQUEUEGROUPSCONSTRUCT_RVMEMORYALLOC, "rvSelectKqueueGroupsConstruct: RvMemoryAlloc failure")
TRC_MSG(VT_TRC_RVSELECTKQUEUEHIGHCB, "rvSelectKqueueHighCB(eng=%08X)")
TRC_MSG(VT_TRC_RVSELECTKQUEUELOWCB, "rvSelectKqueueLowCB(eng=%08X)")
TRC_MSG(VT_TRC_RVSELECTKQUEUESETRATIO, "RvSelectKqueueSetRatio(eng=%08X;ratioLow=%d;ratioHigh=%d)")
TRC_MSG(VT_TRC_RVSELECTKQUEUESETRATIO_RATIOLOW_OR_RATIOHIGH, "RvSelectKqueueSetRatio: ratioLow or ratioHigh equal 0")
TRC_MSG(VT_TRC_RVSELECTMOPILOGDEBUG_NUMRESULTS, "RvSelectMopiLogDebug: numResults=%d")
TRC_MSG(VT_TRC_RVSELECTPSOSSELECT_NOT_SETTING_IN_THE_READ, "RvSelectPsosSelect: not setting in the read mask fd %d (its sharing failed)")
TRC_MSG(VT_TRC_RVSELECTPSOSSELECT_NOT_SETTING_IN_THE_WRITE, "RvSelectPsosSelect: not setting in the write mask fd %d (its sharing failed)")
TRC_MSG(VT_TRC_RVSELECTREMOVE, "RvSelectRemove(fd=%d)")
TRC_MSG(VT_TRC_RVSELECTREMOVELOGMGR, "RvSelectRemoveLogMgr(eng=%08X,logMgr=%08X)")
TRC_MSG(VT_TRC_RVSELECTREMOVE_1, "RvSelectRemove(fd=%d)=%d")
TRC_MSG(VT_TRC_RVSELECTREMOVE_CANT_REMOVE_FD, "RvSelectRemove: Can't remove fd=%d")
TRC_MSG(VT_TRC_RVSELECTSETPREEMPTIONCB, "RvSelectSetPreemptionCb(eng=%08X,callback=%08X,ctx=%08X)")
TRC_MSG(VT_TRC_RVSELECTSETPREEMPTIONCB_1, "RvSelectSetPreemptionCb(eng=%08X,callback=%08X,ctx=%08X)=%d")
TRC_MSG(VT_TRC_RVSELECTSETTIMEOUT, "RvSelectSetTimeOut(eng=%08X,currentTime=<%d,%d>, nsecTimeout=<%d,%d>, logMgr=%08X)")
TRC_MSG(VT_TRC_RVSELECTSETTIMEOUTINFO, "RvSelectSetTimeoutInfo(eng=%08X,callback=%08X)")
TRC_MSG(VT_TRC_RVSELECTSETTIMEOUTINFO_1, "RvSelectSetTimeoutInfo(eng=%08X,callback=%08X)=%d")
TRC_MSG(VT_TRC_RVSELECTSETTIMEOUT_1, "RvSelectSetTimeOut(eng=%08X,currentTime=<%d, %d>, nsecTimeout=<%d, %d>, logMgr=%08X)")
TRC_MSG(VT_TRC_RVSELECTSETTIMEOUT_GENERAL_ERROR, "RvSelectSetTimeOut - General error")
TRC_MSG(VT_TRC_RVSELECTSETTIMEOUT_NO_UPDATE, "RvSelectSetTimeOut(eng=%08X,currentTime=<%d, %d>, nsecTimeout=<%d, %d>, logMgr=%08X) No update")
TRC_MSG(VT_TRC_RVSELECTSTOPWAITING, "RvSelectStopWaiting(eng=%08X,message=%d)")
TRC_MSG(VT_TRC_RVSELECTSTOPWAITING_1, "RvSelectStopWaiting(eng=%08X,message=%d)=%d")
TRC_MSG(VT_TRC_RVSELECTUPDATE, "RvSelectUpdate(fd=%d)=%d")
TRC_MSG(VT_TRC_RVSELECTUPDATE_CANT_UPDATE_FD_WITH, "RvSelectUpdate: Can't update fd=%d with %d")
TRC_MSG(VT_TRC_RVSELECTUPDATE_FAILURE_FD_WAS_CLOSED_BY_THE, "RvSelectUpdate failure, FD was closed by the TCP peer")
TRC_MSG(VT_TRC_RVSELECTUPDATE_FAILURE_FD_WAS_NOT_PREVIOUSLY, "RvSelectUpdate failure: fd was not previously registered")
TRC_MSG(VT_TRC_RVSELECTUPDATE_UPDATING_FD_WITH_FD, "RvSelectUpdate: Updating fd=%d with fd=%d.")
TRC_MSG(VT_TRC_RVSELECTWAITANDBLOCK_ENGINE_NUMFDS_TIMEOUT, "RvSelectWaitAndBlock(select): engine=%08X,numFds=%d,timeout=%d.%d sec")
TRC_MSG(VT_TRC_RVSELECTWAITANDBLOCK_ENGINE_NUMFDS_TIMEOUT_1, "RvSelectWaitAndBlock(poll): engine=%08X,numFds=%d,timeout=%d msec")
TRC_MSG(VT_TRC_RVSELECTWAITANDBLOCK_ENGINE_NUMFDS_TIMEOUT_2, "RvSelectWaitAndBlock(/dev/poll): engine=%08X,numFds=%d,timeout=%d msec")
TRC_MSG(VT_TRC_RVSELECTWAITANDBLOCK_ENGINE_TIMEOUT_MSEC, "RvSelectWaitAndBlock(kqueue): engine=%08X,timeout=%d msec")
TRC_MSG(VT_TRC_RVSELECTWAITANDBLOCK_GOT_ERROR, "RvSelectWaitAndBlock: Got error %d")
TRC_MSG(VT_TRC_RVSELECTWAITANDBLOCK_NUMRESULTS, "RvSelectWaitAndBlock: numResults=%d")
TRC_MSG(VT_TRC_RVSELECTWAITANDBLOCK_RVLOCKRELEASE_ERROR, "RvSelectWaitAndBlock: RvLockRelease error")
TRC_MSG(VT_TRC_RVSEMAPHORECONSTRUCT, "RvSemaphoreConstruct(sem=%08X)")
TRC_MSG(VT_TRC_RVSEMAPHORECONSTRUCT_FOR_DEVPOLLWRITE, "RvSemaphoreConstruct for devPollWrite failed")
TRC_MSG(VT_TRC_RVSEMAPHORECONSTRUCT_NULL_PARAM, "RvSemaphoreConstruct: NULL param(s)")
TRC_MSG(VT_TRC_RVSEMAPHORECONSTRUCT_SUCCEED, "RvSemaphoreConstruct(sem=%08X) Succeed")
TRC_MSG(VT_TRC_RVSEMAPHOREDESTRUCT, "RvSemaphoreDestruct(sem=%08X)")
TRC_MSG(VT_TRC_RVSEMAPHOREDESTRUCT_NULL_PARAM, "RvSemaphoreDestruct: NULL param(s)")
TRC_MSG(VT_TRC_RVSEMAPHOREDESTRUCT_SUCCEED, "RvSemaphoreDestruct(sem=%08X) Succeed")
TRC_MSG(VT_TRC_RVSEMAPHOREPOST, "RvSemaphorePost(sem=%08X)")
TRC_MSG(VT_TRC_RVSEMAPHOREPOST_NULL_PARAM, "RvSemaphorePost: NULL param(s)")
TRC_MSG(VT_TRC_RVSEMAPHOREPOST_SUCCEED, "RvSemaphorePost(sem=%08X) Succeed")
TRC_MSG(VT_TRC_RVSEMAPHORESETATTR, "RvSemaphoreSetAttr(attr=%08X,logMgr=%08X)")
TRC_MSG(VT_TRC_RVSEMAPHORESETATTR_ATTR_IS_NULL, "RvSemaphoreSetAttr(attr=%08X) attr is NULL")
TRC_MSG(VT_TRC_RVSEMAPHORETRYWAIT, "RvSemaphoreTryWait(sem=%08X)")
TRC_MSG(VT_TRC_RVSEMAPHORETRYWAIT_NULL_PARAM, "RvSemaphoreTryWait: NULL param(s)")
TRC_MSG(VT_TRC_RVSEMAPHORETRYWAIT_SUCCEED, "RvSemaphoreTryWait(sem=%08X) Succeed")
TRC_MSG(VT_TRC_RVSEMAPHORETRYWAIT_TRY_AGAIN, "RvSemaphoreTryWait(sem=%08X), try again")
TRC_MSG(VT_TRC_RVSEMAPHOREWAIT, "RvSemaphoreWait(sem=%08X)")
TRC_MSG(VT_TRC_RVSEMAPHOREWAIT_NULL_PARAM, "RvSemaphoreWait: NULL param(s)")
TRC_MSG(VT_TRC_RVSEMAPHOREWAIT_SUCCEED, "RvSemaphoreWait(sem=%08X) Succeed")
TRC_MSG(VT_TRC_RVSYMSELECTCONSTRUCT_FAILURE, "RvSymSelectConstruct failure")
TRC_MSG(VT_TRC_RVTHREADCONSTRUCT, "RvThreadConstruct(thread=%08X)")
TRC_MSG(VT_TRC_RVTHREADCONSTRUCTFROMUSERTHREAD, "RvThreadConstructFromUserThread(thread=%08X)")
TRC_MSG(VT_TRC_RVTHREADCONSTRUCTFROMUSERTHREAD_1, "RvThreadConstructFromUserThread(thread=%08X): RvThreadConstruct")
TRC_MSG(VT_TRC_RVTHREADCONSTRUCT_NULL_PARAM, "RvThreadConstruct: NULL param(s)")
TRC_MSG(VT_TRC_RVTHREADCONSTRUCT_RVLOCKCONSTRUCT, "RvThreadConstruct(thread=%08X): RvLockConstruct")
TRC_MSG(VT_TRC_RVTHREADCONSTRUCT_RVSEMAPHORECONSTRUCT, "RvThreadConstruct(thread=%08X): RvSemaphoreConstruct")
TRC_MSG(VT_TRC_RVTHREADCONSTRUCT_RVTHREADSETSTACK, "RvThreadConstruct(thread=%08X): RvThreadSetStack")
TRC_MSG(VT_TRC_RVTHREADCREATE, "RvThreadCreate(thread=%08X)")
TRC_MSG(VT_TRC_RVTHREADCREATEVAR, "RvThreadCreateVar")
TRC_MSG(VT_TRC_RVTHREADCREATEVAR_NO_VARIABLES, "RvThreadCreateVar: No variables")
TRC_MSG(VT_TRC_RVTHREADCREATE_NOT_SUPPORTED, "RvThreadCreate(thread=%08X): Not supported")
TRC_MSG(VT_TRC_RVTHREADCREATE_RVADTHREADCREATE, "RvThreadCreate(thread=%08X): RvAdThreadCreate")
TRC_MSG(VT_TRC_RVTHREADCREATE_RVLOCKRELEASE, "RvThreadCreate(thread=%08X): RvLockRelease")
TRC_MSG(VT_TRC_RVTHREADCREATE_RVTHREADSETUPSTACK, "RvThreadCreate(thread=%08X): RvThreadSetupStack")
TRC_MSG(VT_TRC_RVTHREADCREATE_THREAD_HAS_NOT_BEEN, "RvThreadCreate(thread=%08X): Thread has not been constructed")
TRC_MSG(VT_TRC_RVTHREADCREATE_UNABLE_TO_LOCK_DATALOCK, "RvThreadCreate(thread=%08X): Unable to lock datalock")
TRC_MSG(VT_TRC_RVTHREADDELETE, "RvThreadDelete(thread=%08X)")
TRC_MSG(VT_TRC_RVTHREADDELETEVAR, "RvThreadDeleteVar(index=%d)")
TRC_MSG(VT_TRC_RVTHREADDELETEVAR_1, "RvThreadDeleteVar")
TRC_MSG(VT_TRC_RVTHREADDESTRUCT, "RvThreadDestruct(thread=%08X)")
TRC_MSG(VT_TRC_RVTHREADDESTRUCT_APPLICATION_THREAD, "RvThreadDestruct(thread=%08X): Application thread")
TRC_MSG(VT_TRC_RVTHREADDESTRUCT_DESTROYED_ALREADY, "RvThreadDestruct(thread=%08X): Destroyed already")
TRC_MSG(VT_TRC_RVTHREADDESTRUCT_DESTRUCTING_ALREADY, "RvThreadDestruct(thread=%08X): Destructing already")
TRC_MSG(VT_TRC_RVTHREADDESTRUCT_RVTHREADDELETE, "RvThreadDestruct(thread=%08X): RvThreadDelete")
TRC_MSG(VT_TRC_RVTHREADFINDVAR, "RvThreadFindVar")
TRC_MSG(VT_TRC_RVTHREADFINDVAR_NOT_FOUND, "RvThreadFindVar: Not found")
TRC_MSG(VT_TRC_RVTHREADGETATTR, "RvThreadGetAttr(thread=%08X)")
TRC_MSG(VT_TRC_RVTHREADGETATTR_RVLOCKRELEASE, "RvThreadGetAttr(thread=%08X): RvLockRelease")
TRC_MSG(VT_TRC_RVTHREADGETATTR_UNABLE_TO_LOCK_DATALOCK, "RvThreadGetAttr(thread=%08X): Unable to lock datalock")
TRC_MSG(VT_TRC_RVTHREADGETVAR, "RvThreadGetVar(index=%d)")
TRC_MSG(VT_TRC_RVTHREADGETVAR_1, "RvThreadGetVar")
TRC_MSG(VT_TRC_RVTHREADGETVAR_INVALID_THREAD, "RvThreadGetVar: Invalid thread")
TRC_MSG(VT_TRC_RVTHREADNANOSLEEP_NOT_SUPPORTED, "RvThreadNanosleep: Not supported")
TRC_MSG(VT_TRC_RVTHREADNANOSLEEP_RANGE, "RvThreadNanosleep: Range")
TRC_MSG(VT_TRC_RVTHREADSETATTR, "RvThreadSetAttr(thread=%08X)")
TRC_MSG(VT_TRC_RVTHREADSETATTR_APPLICATION_THREAD, "RvThreadSetAttr(thread=%08X): Application thread")
TRC_MSG(VT_TRC_RVTHREADSETATTR_RVLOCKRELEASE, "RvThreadSetAttr(thread=%08X): RvLockRelease")
TRC_MSG(VT_TRC_RVTHREADSETAUTODELETE, "RvThreadSetAutoDelete(thread=%08X; autoDelete=%d)")
TRC_MSG(VT_TRC_RVTHREADSETAUTODELETE_1, "RvThreadSetAutoDelete(thread=%08X)")
TRC_MSG(VT_TRC_RVTHREADSETAUTODELETE_NOT_SUPPORTED, "RvThreadSetAutoDelete(thread=%08X): Not supported")
TRC_MSG(VT_TRC_RVTHREADSETAUTODELETE_RVLOCKRELEASE, "RvThreadSetAutoDelete(thread=%08X): RvLockRelease")
TRC_MSG(VT_TRC_RVTHREADSETAUTODELETE_THREAD_HAS_NOT_BEEN, "RvThreadSetAutoDelete(thread=%08X): Thread has not been constructed")
TRC_MSG(VT_TRC_RVTHREADSETAUTODELETE_UNABLE_TO_LOCK, "RvThreadSetAutoDelete(thread=%08X): Unable to lock datalock")
TRC_MSG(VT_TRC_RVTHREADSETEXITFUNC, "RvThreadSetExitFunc(thread=%08X; func=%08X)")
TRC_MSG(VT_TRC_RVTHREADSETNAME, "RvThreadSetName(thread=%08X)")
TRC_MSG(VT_TRC_RVTHREADSETNAME_RVLOCKRELEASE, "RvThreadSetName(thread=%08X): RvLockRelease")
TRC_MSG(VT_TRC_RVTHREADSETNAME_THREAD_HAS_NOT_BEEN, "RvThreadSetName(thread=%08X): Thread has not been constructed")
TRC_MSG(VT_TRC_RVTHREADSETNAME_UNABLE_TO_LOCK_DATALOCK, "RvThreadSetName(thread=%08X): Unable to lock datalock")
TRC_MSG(VT_TRC_RVTHREADSETPRIORITY, "RvThreadSetPriority(thread=%08X; priority=%d)")
TRC_MSG(VT_TRC_RVTHREADSETPRIORITY_1, "RvThreadSetPriority(thread=%08X)")
TRC_MSG(VT_TRC_RVTHREADSETPRIORITY_APPLICATION_THREAD, "RvThreadSetPriority(thread=%08X): Application thread")
TRC_MSG(VT_TRC_RVTHREADSETPRIORITY_RVLOCKRELEASE, "RvThreadSetPriority(thread=%08X): RvLockRelease")
TRC_MSG(VT_TRC_RVTHREADSETPRIORITY_SETTHREADPRIORITY, "RvThreadSetPriority(thread=%08X): SetThreadPriority")
TRC_MSG(VT_TRC_RVTHREADSETPRIORITY_THREAD_DESTRUCTED, "RvThreadSetPriority(thread=%08X): Thread destructed")
TRC_MSG(VT_TRC_RVTHREADSETPRIORITY_UNABLE_TO_LOCK_DATALOCK, "RvThreadSetPriority(thread=%08X): Unable to lock datalock")
TRC_MSG(VT_TRC_RVTHREADSETSTACK, "RvThreadSetStack(thread=%08X; stacksize=%d)")
TRC_MSG(VT_TRC_RVTHREADSETSTACK_1, "RvThreadSetStack(thread=%08X)")
TRC_MSG(VT_TRC_RVTHREADSETSTACK_BAD_PARAM, "RvThreadSetStack(thread=%08X): Bad param(stackaddr != NULL)")
TRC_MSG(VT_TRC_RVTHREADSETSTACK_NOT_SUPPORTED, "RvThreadSetStack(thread=%08X): Not supported")
TRC_MSG(VT_TRC_RVTHREADSETSTACK_RANGE, "RvThreadSetStack(thread=%08X): Range(stacksize < 0)")
TRC_MSG(VT_TRC_RVTHREADSETSTACK_RVLOCKRELEASE, "RvThreadSetStack(thread=%08X): RvLockRelease")
TRC_MSG(VT_TRC_RVTHREADSETSTACK_THREAD_HAS_NOT_BEEN, "RvThreadSetStack(thread=%08X): Thread has not been constructed")
TRC_MSG(VT_TRC_RVTHREADSETSTACK_UNABLE_TO_LOCK_DATALOCK, "RvThreadSetStack(thread=%08X): Unable to lock datalock")
TRC_MSG(VT_TRC_RVTHREADSETVAR, "RvThreadSetVar(index=%d)")
TRC_MSG(VT_TRC_RVTHREADSETVAR_1, "RvThreadSetVar")
TRC_MSG(VT_TRC_RVTHREADSETVAR_INVALID_THREAD, "RvThreadSetVar: Invalid thread")
TRC_MSG(VT_TRC_RVTHREADSLEEP, "RvThreadSleep(t=%d:%d)")
TRC_MSG(VT_TRC_RVTHREADSLEEP_1, "RvThreadSleep")
TRC_MSG(VT_TRC_RVTHREADSLEEP_NOT_SUPPORTED, "RvThreadSleep: Not supported")
TRC_MSG(VT_TRC_RVTHREADSTART, "RvThreadStart(thread=%08X)")
TRC_MSG(VT_TRC_RVTHREADSTART_RVLOCKRELEASE, "RvThreadStart(thread=%08X): RvLockRelease")
TRC_MSG(VT_TRC_RVTHREADSTART_THREAD_HAS_NOT_BEEN, "RvThreadStart(thread=%08X): Thread has not been constructed")
TRC_MSG(VT_TRC_RVTHREADSTART_THREAD_HAS_NOT_BEEN_CREATED, "RvThreadStart(thread=%08X): Thread has not been created")
TRC_MSG(VT_TRC_RVTHREADSTART_UNABLE_TO_LOCK_DATALOCK, "RvThreadStart(thread=%08X): Unable to lock datalock")
TRC_MSG(VT_TRC_RVTIMERCANCEL, "RvTimerCancel(tqueue=%08X)")
TRC_MSG(VT_TRC_RVTIMERCANCEL_TIMER_IS_NOT_VALID, "RvTimerCancel(tqueue=%08X): Timer is not valid")
TRC_MSG(VT_TRC_RVTIMERCANCEL_UNABLE_TO_LOCK_TQUEUE_LOCK, "RvTimerCancel(tqueue=%08X): Unable to lock tqueue lock")
TRC_MSG(VT_TRC_RVTIMERGETREMAININGTIME, "RvTimerGetRemainingTime(tqueue=%08X)")
TRC_MSG(VT_TRC_RVTIMERQUEUEADDSIZE, "RvTimerQueueAddSize(tqueue=%08X)")
TRC_MSG(VT_TRC_RVTIMERQUEUEADDSIZE_FAILED, "RvTimerQueueAddSize failed")
TRC_MSG(VT_TRC_RVTIMERQUEUEADDSIZE_UNABLE_TO_LOCK_TQUEUE, "RvTimerQueueAddSize(tqueue=%08X): Unable to lock tqueue lock")
TRC_MSG(VT_TRC_RVTIMERQUEUECONSTRUCT, "RvTimerQueueConstruct(tqueue=%08X)")
TRC_MSG(VT_TRC_RVTIMERQUEUECONSTRUCT_FAILURE, "RvTimerQueueConstruct failure")
TRC_MSG(VT_TRC_RVTIMERQUEUECONSTRUCT_INVALID_TYPE_ID, "RvTimerQueueConstruct: Invalid type id")
TRC_MSG(VT_TRC_RVTIMERQUEUECONSTRUCT_NULL_PARAM, "RvTimerQueueConstruct: NULL param(s)")
TRC_MSG(VT_TRC_RVTIMERQUEUECONSTRUCT_RVLOCKCONSTRUCT, "RvTimerQueueConstruct: RvLockConstruct")
TRC_MSG(VT_TRC_RVTIMERQUEUECONSTRUCT_RVOBJPOOLADDITEMS, "RvTimerQueueConstruct: RvObjPoolAddItems")
TRC_MSG(VT_TRC_RVTIMERQUEUECONSTRUCT_RVOBJPOOLCONSTRUCT, "RvTimerQueueConstruct: RvObjPoolConstruct")
TRC_MSG(VT_TRC_RVTIMERQUEUECONSTRUCT_RVPQUEUECONSTRUCT, "RvTimerQueueConstruct: RvPQueueConstruct")
TRC_MSG(VT_TRC_RVTIMERQUEUECONSTRUCT_RVSEMAPHORECONSTRUCT, "RvTimerQueueConstruct: RvSemaphoreConstruct")
TRC_MSG(VT_TRC_RVTIMERQUEUEDESTRUCT, "RvTimerQueueDestruct(tqueue=%08X)")
TRC_MSG(VT_TRC_RVTIMERQUEUEDESTRUCT_RVOBJPOOLDESTRUCT, "RvTimerQueueDestruct(tqueue=%08X): RvObjPoolDestruct")
TRC_MSG(VT_TRC_RVTIMERQUEUEDESTRUCT_UNABLE_TO_LOCK_TQUEUE, "RvTimerQueueDestruct(tqueue=%08X): Unable to lock tqueue lock")
TRC_MSG(VT_TRC_RVTIMERQUEUEGETSIZE, "RvTimerQueueGetSize(tqueue=%08X)")
TRC_MSG(VT_TRC_RVTIMERQUEUEGETSIZE_UNABLE_TO_LOCK_TQUEUE, "RvTimerQueueGetSize(tqueue=%08X): Unable to lock tqueue lock")
TRC_MSG(VT_TRC_RVTIMERQUEUENEXTEVENT, "RvTimerQueueNextEvent(tqueue=%08X)")
TRC_MSG(VT_TRC_RVTIMERQUEUENEXTEVENT_PQUEUE_IS_EMPTY, "RvTimerQueueNextEvent(tqueue=%08X): PQueue is empty")
TRC_MSG(VT_TRC_RVTIMERQUEUENEXTEVENT_UNABLE_TO_LOCK_TQUEUE, "RvTimerQueueNextEvent(tqueue=%08X): Unable to lock tqueue lock")
TRC_MSG(VT_TRC_RVTIMERQUEUESERVICE, "RvTimerQueueService(tqueue=%08X)")
TRC_MSG(VT_TRC_RVTIMERQUEUESERVICE_TIMER_EXPIRED, "RvTimerQueueService: timer expired(tqueue=%08X; event=%08X)")
TRC_MSG(VT_TRC_RVTIMERQUEUESERVICE_TIMER_QUEUE_IS_FULL, "RvTimerQueueService(tqueue=%08X): Timer queue is full")
TRC_MSG(VT_TRC_RVTIMERQUEUESERVICE_UNABLE_TO_LOCK_TQUEUE, "RvTimerQueueService(tqueue=%08X): Unable to lock tqueue lock")
TRC_MSG(VT_TRC_RVTIMERRESOLUTION, "RvTimerResolution(logMgr=%08X)")
TRC_MSG(VT_TRC_RVTIMERSTART, "RvTimerStart(tqueue=%08X; timer=%08X)")
TRC_MSG(VT_TRC_RVTIMERSTART_EVENT_ALLOCATED, "RvTimerStart: event allocated(tqueue=%08X; timer=%08X; event=%08X)")
TRC_MSG(VT_TRC_RVTIMERSTART_RANGE, "RvTimerStart(tqueue=%08X): Range")
TRC_MSG(VT_TRC_RVTIMERSTART_RVOBJPOOLGETITEM, "RvTimerStart(tqueue=%08X): RvObjPoolGetItem")
TRC_MSG(VT_TRC_RVTIMERSTART_RVPQUEUEPUT, "RvTimerStart(tqueue=%08X): RvPQueuePut")
TRC_MSG(VT_TRC_RVTIMERSTART_UNABLE_TO_LOCK_TQUEUE_LOCK, "RvTimerStart(tqueue=%08X): Unable to lock tqueue lock")
TRC_MSG(VT_TRC_RVTIMESTAMPGET, "RvTimestampGet")
TRC_MSG(VT_TRC_RVTIMESTAMPRESOLUTION, "RvTimestampResolution")
TRC_MSG(VT_TRC_RVTLSENGINEADDAUTORITYCERTIFICATE, "RvTLSEngineAddAutorityCertificate(tlsEng=%08X,cert=%08X,certLen=%d,mtx=%08X,logMgr=%08X)")
TRC_MSG(VT_TRC_RVTLSENGINEADDAUTORITYCERTIFICATE_1, "RvTLSEngineAddAutorityCertificate(tlsEng=%08X,cert=%08X,certLen=%d,mtx=%08X,logMgr=%08X)=%d")
TRC_MSG(VT_TRC_RVTLSENGINEADDAUTORITYCERTIFICATE_ENGINE_FAILED, "RvTLSEngineAddAutorityCertificate: engine (0x%x), failed to convert ASN1 certificate to X509 format")
TRC_MSG(VT_TRC_RVTLSENGINEADDAUTORITYCERTIFICATE_ENGINE_FAILED_1, "RvTLSEngineAddAutorityCertificate: engine (0x%x), failed to convert add X509 certificate to the engine")
TRC_MSG(VT_TRC_RVTLSENGINEADDCERTIFICATE, "RvTLSEngineAddCertificate(tlsEng=%08X,cert=%08X,certLen=%d,mtx=%08X,logMgr=%08X)")
TRC_MSG(VT_TRC_RVTLSENGINEADDCERTIFICATE_1, "RvTLSEngineAddCertificate(tlsEng=%08X,cert=%08X,certLen=%d,mtx=%08X,logMgr=%08X)=%d")
TRC_MSG(VT_TRC_RVTLSENGINEADDCERTIFICATE_ENGINE_FAILED_TO, "RvTLSEngineAddCertificate: engine (0x%x), failed to convert ASN1 certificate to X509 format")
TRC_MSG(VT_TRC_RVTLSENGINEADDCERTIFICATE_ENGINE_FAILED_TO_1, "RvTLSEngineAddCertificate: engine (0x%x), failed to add X509 certificate to the chain")
TRC_MSG(VT_TRC_RVTLSENGINECHECKPRIVATEKEY, "RvTLSEngineCheckPrivateKey(tlsEngine=%08X,mtx=%08X,logMgr=%08X)")
TRC_MSG(VT_TRC_RVTLSENGINECHECKPRIVATEKEY_1, "RvTLSEngineCheckPrivateKey(tlsEngine=%08X,mtx=%08X,logMgr=%08X)=%d")
TRC_MSG(VT_TRC_RVTLSENGINECHECKPRIVATEKEY_ENGINE_FAILED_TO, "RvTLSEngineCheckPrivateKey: engine (0x%x), failed to add X509 certificate to the chain")
TRC_MSG(VT_TRC_RVTLSENGINECONSTRUCT, "RvTLSEngineConstruct(method=%d,privKey=%08X,keyType=%d,keyLen=%d,cert=%08X,certLen=%d,certDepth=%d,mtx=%08X,logMgr=%08X,tlsEng=%08X)")
TRC_MSG(VT_TRC_RVTLSENGINECONSTRUCT_1, "RvTLSEngineConstruct(method=%d,privKey=%08X,keyType=%d,keyLen=%d,cert=%08X,certLen=%d,certDepth=%d,mtx=%08X,logMgr=%08X,tlsEng=%08X)=%d")
TRC_MSG(VT_TRC_RVTLSENGINECONSTRUCT_ENGINE_FAILED_TO_CREATE, "RvTLSEngineConstruct: engine (0x%x) failed to create OpenSSL context")
TRC_MSG(VT_TRC_RVTLSENGINECONSTRUCT_ENGINE_FAILED_TO_LOAD, "RvTLSEngineConstruct: engine (0x%x) failed to load private key")
TRC_MSG(VT_TRC_RVTLSENGINECONSTRUCT_ENGINE_FAILED_TO_LOAD_1, "RvTLSEngineConstruct: engine (0x%x) failed to load local certificate")
TRC_MSG(VT_TRC_RVTLSENGINECONSTRUCT_ENGINE_INVALID_METHOD, "RvTLSEngineConstruct: engine (0x%x) invalid method (%d)")
TRC_MSG(VT_TRC_RVTLSENGINECONSTRUCT_ENGINE_MUTEX_LOCK, "RvTLSEngineConstruct: engine (0x%x) mutex lock error")
TRC_MSG(VT_TRC_RVTLSENGINECONSTRUCT_ENGINE_WRONG_PRIVATE_KEY, "RvTLSEngineConstruct: engine (0x%x) wrong private key type (%d)")
TRC_MSG(VT_TRC_RVTLSENGINEDESTRUCT, "RvTLSEngineDestruct(tlsEng=%08X,mtx=%08X,logMgr=%08X)")
TRC_MSG(VT_TRC_RVTLSENGINEDESTRUCT_1, "RvTLSEngineDestruct(tlsEng=%08X,mtx=%08X,logMgr=%08X)=%d")
TRC_MSG(VT_TRC_RVTLSENGINEDESTRUCT_ENGINE_FAILED_TO_DESTRUCT, "RvTLSEngineDestruct: engine (0x%x), failed to destruct, wrong OpenSSL context")
TRC_MSG(VT_TRC_RVTLSENGINEEXPOSE, "RvTLSEngineExpose(tlsEng=%08X,mtx=%08X,logMgr=%08X,underlying=%08X)")
TRC_MSG(VT_TRC_RVTLSENGINEEXPOSE_1, "RvTLSEngineExpose(tlsEng=%08X,mtx=%08X,logMgr=%08X,*underlying=%08X)")
TRC_MSG(VT_TRC_RVTLSSESSIONCHECKCERTAGAINSTNAME_SESSION_FAILED, "RvTLSSessionCheckCertAgainstName: session (0x%x) failed to retrieve peer certificate")
TRC_MSG(VT_TRC_RVTLSSESSIONCHECKCERTAGAINSTNAME_SESSION_NAME, "RvTLSSessionCheckCertAgainstName: session (0x%x) name does not match certificate")
TRC_MSG(VT_TRC_RVTLSSESSIONCLIENTHANDSHAKE, "RvTLSSessionClientHandshake(tlsSession=%08X,certCB=%08X,sock=%d,mtx=%08X,logMgr=%08X)")
TRC_MSG(VT_TRC_RVTLSSESSIONCLIENTHANDSHAKE_1, "RvTLSSessionClientHandshake(tlsSession=%08X,certCB=%08X,sock=%d,mtx=%08X,logMgr=%08X)=%d")
TRC_MSG(VT_TRC_RVTLSSESSIONCLIENTHANDSHAKE_SESSION_GENERAL, "RvTLSSessionClientHandshake: session (0x%x) general eError")
TRC_MSG(VT_TRC_RVTLSSESSIONCLIENTHANDSHAKE_SESSION_SSL_RET, "RvTLSSessionClientHandshake: session (0x%x) SSL_RET_WANT_READ failure")
TRC_MSG(VT_TRC_RVTLSSESSIONCLIENTHANDSHAKE_SESSION_SSL_RET_1, "RvTLSSessionClientHandshake: session (0x%x) SSL_RET_WANT_WRITE failure")
TRC_MSG(VT_TRC_RVTLSSESSIONCONSTRUCT, "RvTLSSessionConstruct(tlsEng=%08X,mtxEng=%08X,mtxSession=%08X,logMgr=%08X,tlsSession=%08X)")
TRC_MSG(VT_TRC_RVTLSSESSIONCONSTRUCT_1, "RvTLSSessionConstruct(tlsEng=%08X,mtxEng=%08X,mtxSession=%08X,logMgr=%08X,tlsSession=%08X)=%d")
TRC_MSG(VT_TRC_RVTLSSESSIONCONSTRUCT_ENGINE_SESSION_ENGINE, "RvTLSSessionConstruct: engine (0x%x), session (0x%x) engine lock failure")
TRC_MSG(VT_TRC_RVTLSSESSIONCONSTRUCT_ENGINE_SESSION_GENERAL, "RvTLSSessionConstruct: engine (0x%x) session (0x%x) general eError")
TRC_MSG(VT_TRC_RVTLSSESSIONCONSTRUCT_ENGINE_SESSION_SESSION, "RvTLSSessionConstruct: engine (0x%x), session (0x%x) session lock failure")
TRC_MSG(VT_TRC_RVTLSSESSIONDESTRUCT, "RvTLSSessionDestruct(tlsSession=%08X,mtx=%08X,logMgr=%08X)")
TRC_MSG(VT_TRC_RVTLSSESSIONDESTRUCT_1, "RvTLSSessionDestruct(tlsSession=%08X,mtx=%08X,logMgr=%08X)=%d")
TRC_MSG(VT_TRC_RVTLSSESSIONEXPOSE, "RvTLSSessionExpose(tlsSession=%08X,mtx=%08X,logMgr=%08X,underlying=%08X)")
TRC_MSG(VT_TRC_RVTLSSESSIONEXPOSE_1, "RvTLSSessionExpose(tlsSession=%08X,mtx=%08X,logMgr=%08X,*underlying=%08X)=%d")
TRC_MSG(VT_TRC_RVTLSSESSIONGETCERTIFICATE, "RvTLSSessionGetCertificate(tlsSession=%08X,mtx=%08X,logMgr=%08X,cert=%08X)")
TRC_MSG(VT_TRC_RVTLSSESSIONGETCERTIFICATELENGTH, "RvTLSSessionGetCertificateLength(tlsSession=%08X,mtx=%08X,logMgr=%08X,certLen=%08X)")
TRC_MSG(VT_TRC_RVTLSSESSIONGETCERTIFICATELENGTH_1, "RvTLSSessionGetCertificateLength(tlsSession=%08X,mtx=%08X,logMgr=%08X,certLen=%d)=%d")
TRC_MSG(VT_TRC_RVTLSSESSIONGETCERTIFICATELENGTH_SESSION_FAILED, "RvTLSSessionGetCertificateLength: session (0x%x) failed to retrieve peer certificate")
TRC_MSG(VT_TRC_RVTLSSESSIONGETCERTIFICATE_1, "RvTLSSessionGetCertificate(tlsSession=%08X,mtx=%08X,logMgr=%08X,cert=%08X)=%d")
TRC_MSG(VT_TRC_RVTLSSESSIONGETCERTIFICATE_SESSION_FAILED_TO, "RvTLSSessionGetCertificate: session (0x%x) failed to convert X509 certificate to ASN1")
TRC_MSG(VT_TRC_RVTLSSESSIONGETCERTIFICATE_SESSION_FAILED_TO_1, "RvTLSSessionGetCertificate: session (0x%x) failed to retrieve peer certificate")
TRC_MSG(VT_TRC_RVTLSSESSIONRECEIVEBUFFER, "RvTLSSessionReceiveBuffer(tlsSession=%08X,receiveBuf=%08X,mtx=%08X,logMgr=%08X,bufLen=%d)")
TRC_MSG(VT_TRC_RVTLSSESSIONRECEIVEBUFFER_1, "RvTLSSessionReceiveBuffer(tlsSession=%08X,receiveBuf=%08X,mtx=%08X,logMgr=%08X,bufLen=%d)=%d")
TRC_MSG(VT_TRC_RVTLSSESSIONRECEIVEBUFFER_SESSION_GENERAL, "RvTLSSessionReceiveBuffer: session (0x%x) general error.")
TRC_MSG(VT_TRC_RVTLSSESSIONRECEIVEBUFFER_SESSION_RECEIVED, "RvTLSSessionReceiveBuffer: session (0x%x) received %d bytes")
TRC_MSG(VT_TRC_RVTLSSESSIONRECEIVEBUFFER_SESSION_SHUTDOWN, "RvTLSSessionReceiveBuffer: session (0x%x) shutdown request received.")
TRC_MSG(VT_TRC_RVTLSSESSIONRECEIVEBUFFER_SESSION_SSL_RET_WANT, "RvTLSSessionReceiveBuffer: session (0x%x) SSL_RET_WANT_READ failure.")
TRC_MSG(VT_TRC_RVTLSSESSIONRECEIVEBUFFER_SESSION_SSL_RET_WANT_1, "RvTLSSessionReceiveBuffer: session (0x%x) SSL_RET_WANT_WRITE failure.")
TRC_MSG(VT_TRC_RVTLSSESSIONRECEIVEBUFFER_SESSION_SSL_RET_ZERO, "RvTLSSessionReceiveBuffer: session (0x%x) SSL_RET_ZERO_RETURN failure.")
TRC_MSG(VT_TRC_RVTLSSESSIONSENDBUFFER, "RvTLSSessionSendBuffer(tlsSession=%08X,sendBuf=%08X,bufLen=%d,mtx=%08X,logMgr=%08X)")
TRC_MSG(VT_TRC_RVTLSSESSIONSENDBUFFER_1, "RvTLSSessionSendBuffer(tlsSession=%08X,sendBuf=%08X,bufLen=%d,mtx=%08X,logMgr=%08X)=%d")
TRC_MSG(VT_TRC_RVTLSSESSIONSENDBUFFER_SESSION_SENT_GENERAL, "RvTLSSessionSendBuffer: session (0x%x) sent general error")
TRC_MSG(VT_TRC_RVTLSSESSIONSENDBUFFER_SESSION_SENT_OUT_OF, "RvTLSSessionSendBuffer: session (0x%x) sent %d out of %d bytes")
TRC_MSG(VT_TRC_RVTLSSESSIONSENDBUFFER_SESSION_SENT_SSL_RET, "RvTLSSessionSendBuffer: session (0x%x) sent SSL_RET_WANT_READ failure.")
TRC_MSG(VT_TRC_RVTLSSESSIONSENDBUFFER_SESSION_SENT_SSL_RET_1, "RvTLSSessionSendBuffer: session (0x%x) sent SSL_RET_WANT_WRITE failure.")
TRC_MSG(VT_TRC_RVTLSSESSIONSENDBUFFER_SESSION_SENT_SSL_RET_2, "RvTLSSessionSendBuffer: session (0x%x) sent SSL_RET_ZERO_RETURN failure.")
TRC_MSG(VT_TRC_RVTLSSESSIONSENDBUFFER_SESSION_SHUTDOWN_REQUEST, "RvTLSSessionSendBuffer: session (0x%x) shutdown request received.")
TRC_MSG(VT_TRC_RVTLSSESSIONSERVERHANDSHAKE, "RvTLSSessionServerHandshake(tlsSession=%08X,certCB=%08X,sock=%d,mtx=%08X,logMgr=%08X)")
TRC_MSG(VT_TRC_RVTLSSESSIONSERVERHANDSHAKE_1, "RvTLSSessionServerHandshake(tlsSession=%08X,certCB=%08X,sock=%d,mtx=%08X,logMgr=%08X)=%d")
TRC_MSG(VT_TRC_RVTLSSESSIONSERVERHANDSHAKE_SESSION_GENERAL, "RvTLSSessionServerHandshake: session (0x%x) general error")
TRC_MSG(VT_TRC_RVTLSSESSIONSERVERHANDSHAKE_SESSION_SSL_RET, "RvTLSSessionServerHandshake: session (0x%x) SSL_RET_WANT_WRITE failure")
TRC_MSG(VT_TRC_RVTLSSESSIONSHUTDOWN, "RvTLSSessionShutdown(tlsSession=%08X,mtx=%08X,logMgr=%08X)")
TRC_MSG(VT_TRC_RVTLSSESSIONSHUTDOWN_1, "RvTLSSessionShutdown(tlsSession=%08X,mtx=%08X,logMgr=%08X)=%d")
TRC_MSG(VT_TRC_RVTLSSESSIONSHUTDOWN_SESSION_SHUTDOWN, "RvTLSSessionShutdown: session (0x%x) shutdown succeed")
TRC_MSG(VT_TRC_RVTLSSESSIONSHUTDOWN_SESSION_SHUTDOWN_1, "RvTLSSessionShutdown: session (0x%x) shutdown incomplete")
TRC_MSG(VT_TRC_RVTLSSESSIONSHUTDOWN_SESSION_SHUTDOWN_GENERAL, "RvTLSSessionShutdown: session (0x%x) shutdown general failure.")
TRC_MSG(VT_TRC_RVTLSSESSIONSHUTDOWN_SESSION_SHUTDOWN_UNKNOWN, "RvTLSSessionShutdown: session (0x%x) shutdown unknown general failure.")
TRC_MSG(VT_TRC_RVTLSSESSIONSHUTDOWN_SESSION_SSL_RET_WANT_READ, "RvTLSSessionShutdown: session (0x%x) SSL_RET_WANT_READ failure.")
TRC_MSG(VT_TRC_RVTLSSESSIONSHUTDOWN_SESSION_SSL_RET_WANT_WRITE, "RvTLSSessionShutdown: session (0x%x) SSL_RET_WANT_WRITE failure.")
TRC_MSG(VT_TRC_RVTLSTRANSLATESELECTEVENTS, "RvTLSTranslateSelectEvents(tlsSession=%08X,selEvents=%x,mtx=%08X,logMgr=%08X,tlsEvents=%08X)")
TRC_MSG(VT_TRC_RVTLSTRANSLATESELECTEVENTS_1, "RvTLSTranslateSelectEvents(tlsSession=%08X,selEvents=%x,mtx=%08X,logMgr=%08X,tlsEvents=%x)=%d")
TRC_MSG(VT_TRC_RVTLSTRANSLATETLSEVENTS, "RvTLSTranslateTLSEvents(tlsSession=%08X,tlsEvents=%x,mtx=%08X,logMgr=%08X,selEvents=%08X)")
TRC_MSG(VT_TRC_RVTLSTRANSLATETLSEVENTS_1, "RvTLSTranslateTLSEvents(tlsSession=%08X,tlsEvents=%x,mtx=%08X,logMgr=%08X,selEvents=%x)")
TRC_MSG(VT_TRC_RVTMASCTIME, "RvTmAsctime")
TRC_MSG(VT_TRC_RVTMASCTIME_ASCTIME, "RvTmAsctime: asctime")
TRC_MSG(VT_TRC_RVTMASCTIME_BUFFER_SIZE_TOO_SMALL, "RvTmAsctime: Buffer size too small")
TRC_MSG(VT_TRC_RVTMASCTIME_NULL_PARAM, "RvTmAsctime: NULL param(s)")
TRC_MSG(VT_TRC_RVTMCONSTRUCTLOCAL, "RvTmConstructLocal")
TRC_MSG(VT_TRC_RVTMCONSTRUCTLOCAL_LOCALTIME, "RvTmConstructLocal: localtime")
TRC_MSG(VT_TRC_RVTMCONSTRUCTLOCAL_LOCALTIME_R, "RvTmConstructLocal: localtime_r")
TRC_MSG(VT_TRC_RVTMCONSTRUCTLOCAL_NULL_PARAM, "RvTmConstructLocal: NULL param(s)")
TRC_MSG(VT_TRC_RVTMCONSTRUCTLOCAL_RVLOCALTIME_R, "RvTmConstructLocal: RvLocaltime_r")
TRC_MSG(VT_TRC_RVTMCONSTRUCTUTC, "RvTmConstructUtc")
TRC_MSG(VT_TRC_RVTMCONSTRUCTUTC_GMTIME, "RvTmConstructUtc: gmtime")
TRC_MSG(VT_TRC_RVTMCONSTRUCTUTC_GMTIME_R, "RvTmConstructUtc: gmtime_r")
TRC_MSG(VT_TRC_RVTMCONSTRUCTUTC_NULL_PARAM, "RvTmConstructUtc: NULL param(s)")
TRC_MSG(VT_TRC_RVTMCONSTRUCTUTC_RVGMTIME_R, "RvTmConstructUtc: RvGmtime_r")
TRC_MSG(VT_TRC_RVTMCONVERTTOTIME, "RvTmConvertToTime")
TRC_MSG(VT_TRC_RVTMCONVERTTOTIME_MKTIME, "RvTmConvertToTime: mktime")
TRC_MSG(VT_TRC_RVTMCONVERTTOTIME_NOT_SUPPORTED, "RvTmConvertToTime: Not supported")
TRC_MSG(VT_TRC_RVTMCONVERTTOTIME_NULL_PARAM, "RvTmConvertToTime: NULL param(s)")
TRC_MSG(VT_TRC_RVTMSTRFTIME, "RvTmStrftime")
TRC_MSG(VT_TRC_RVTMSTRFTIME_NULL_PARAM, "RvTmStrftime: NULL param(s)")
TRC_MSG(VT_TRC_RXALHANDLELEVEL2INDICATION_FAILED_TO_CALCULATE, "RxAlHandleLevel2Indication: Failed to calculate crc 8")
TRC_MSG(VT_TRC_RXALHANDLELEVEL2INDICATION_RECEIVED_EMPTY, "RxAlHandleLevel2Indication: Received empty packet")
TRC_MSG(VT_TRC_RXALHANDLELEVEL2INDICATION_SN_ERROR, "RxAlHandleLevel2Indication: SN error(expected %u, actual %u)")
TRC_MSG(VT_TRC_RXALHANDLELEVEL2INDICATION_SUCCESS_TO_CALCULATE, "RxAlHandleLevel2Indication: Success to calculate crc 8")
TRC_MSG(VT_TRC_RXALHANDLELEVEL3INDICATION_FAILED_TO_CALCULATE, "RxAlHandleLevel3Indication: Failed to calculate crc 16")
TRC_MSG(VT_TRC_RXALHANDLELEVEL3INDICATION_RECEIVED_EMPTY, "RxAlHandleLevel3Indication: Received empty packet")
TRC_MSG(VT_TRC_RXALHANDLELEVEL3INDICATION_SN_ERROR, "RxAlHandleLevel3Indication: SN error(expected %u, actual %u)")
TRC_MSG(VT_TRC_SAVED_VIDEO_BUFFER_DIFFERENT_THEN_NEXTBUFFER, "Saved video buffer %08X different then nextBuffer to save %08X")
TRC_MSG(VT_TRC_SELECTCB, "selectCb(engine=%08X)")
TRC_MSG(VT_TRC_SEND_REQUESTMULTIPLEXENTRY_ENTRY, "Send RequestMultiplexEntry: entry = %d")
TRC_MSG(VT_TRC_SEND_WNSRP_ACK, "Send WNSRP Ack %d")
TRC_MSG(VT_TRC_SETMONAPREFERENCEMESSAGEBUFFER_MSG1, "[MONA]SetMonaPreferenceMessageBuffer: Stop Sending Mona PM [%d Msgs sent]")
TRC_MSG(VT_TRC_SETMONAPREFERENCEMESSAGEBUFFER_TX_PM_RAW_DATA, "[MONA]SetMonaPreferenceMessageBuffer: TX Preference Message")
TRC_MSG(VT_TRC_SETMONZMPCCHANNELEV_SET_MP4_DEC_CFG, "SetMonaMPCChannel: MPC MPEG4 - hdr size = %d")
TRC_MSG(VT_TRC_SETTIMER_FAILURE, "SetTimer failure")
TRC_MSG(VT_TRC_SP3GVT_DL_INFO, "SP3GVT DL size=%u, Buffer: %hx, %hx %hx, error: %hu")
TRC_MSG(VT_TRC_SP3GVT_UL_GETSPEECHFRAME, "SP3GVT_UL_GetSpeechFrame(%x,%d), line: %d")
TRC_MSG(VT_TRC_START_CALL_KEEPER_IN_INVALID_STATE, "Start call keeper when it is running")
TRC_MSG(VT_TRC_START_CALL_KEEPER_TIMER, "Start call keeper")
TRC_MSG(VT_TRC_START_FAST_UPDATE_TIMER, "Start FastUpdate Timer: isRunning? %d")
TRC_MSG(VT_TRC_STOP_CALL_KEEPER_TIMER, "Stop call keeper")
TRC_MSG(VT_TRC_STOP_FAST_UPDATE_TIMER, "Stop FastUpdate Timer: isRunning? %d")
TRC_MSG(VT_TRC_SYNCHRONIZEMUXLEVEL2_DROP_PACKET, "SynchronizeMuxLevel2: Discard %d bytes (LINE: %d)")
TRC_MSG(VT_TRC_SYNCHRONIZE_1,"synchronize: ReadingState -%hu, inSession-%hu, MuxLevel-%hu, outsyncCount: %u, bytesProc: %u")
TRC_MSG(VT_TRC_SYNCHRONIZE_2,"synchronize: Lost sync [Ln: %d]")
TRC_MSG(VT_TRC_TCS_MANUAL_RESPONSE_ON, "TCS manual response on %08X = %d")
TRC_MSG(VT_TRC_TERMCALLADDMONACAPABILITY_MSG1_ADD_CAP_FAIL, "[MONA] termCallAddMONACapability: add Capability Fail !! [LINE: %d]")
TRC_MSG(VT_TRC_TERMCALLDIAL_READ_FILE_ERROR, "termCallDial: Read File Error")
TRC_MSG(VT_TRC_TERMCALLDROPTXMONAMPCCHANNELS_AUDIO, "termCallDropTxMonaMPCChannels: Remove Audio")
TRC_MSG(VT_TRC_TERMCALLDROPTXMONAMPCCHANNELS_VIDEO, "termCallDropTxMonaMPCChannels: Remove Video")
TRC_MSG(VT_TRC_TERMCALLINITMONAMPCCHANNELS_ENTER, "[MONA]termCallInitMonaMPCChannels: Call_mpcMediaTypes Rx = %hu; Tx = %hu; ReceiveOnly? %hu")
TRC_MSG(VT_TRC_TERMCALLINITMONAMPCCHANNELS_MSG1, "[EarlySend]termCallInitMonaMPCChannels: Remove Audio chan; type = %d")
TRC_MSG(VT_TRC_TERMCALLINITMONAMPCCHANNELS_MSG2, "[EarlySend] termCallInitMonaMPCChannels: Remove Video chan; type = %d")
TRC_MSG(VT_TRC_TERMCALLINITMONAMPCCHANNELS_MSG3, "[EarlySend]termCallInitMonaMPCChannels: Keep Audio chan; type = %d")
TRC_MSG(VT_TRC_TERMCALLINITMONAMPCCHANNELS_MSG5, "[EarlySend]termCallInitMonaMPCChannels: Keep Video chan; type = %d")
TRC_MSG(VT_TRC_TERMCALLINITMONAMPCCHANNELS_MSG6, "[MONA]termCallInitMonaMPCChannels: Init AMR Channel, isTx? %d")
TRC_MSG(VT_TRC_TERMCALLINITMONAMPCCHANNELS_MSG7, "[MONA]termCallInitMonaMPCChannels: Init MPEG4 Channel, isTx? %d")
TRC_MSG(VT_TRC_TERMCALLINITMONAMPCCHANNELS_MSG8, "[MONA]termCallInitMonaMPCChannels: Init H.263 Channel, isTx? %d")
TRC_MSG(VT_TRC_TERMCALLINITMONMPCCHANNELS_INIT_FAIL, "termCallInitMonaMPCChannels: MPC channel NULL")
TRC_MSG(VT_TRC_TERMCALLREMOVEMONACAPABILITY, "termCallRemoveMONACapability: Remove MONA Cap")
TRC_MSG(VT_TRC_TERMCALLREMOVEMONAMPCCHANNELS_ENTER, "termCallRemoveMonaMPCChannels: Enter")
TRC_MSG(VT_TRC_TERMFILEREAD_END_OF_FILE, "call:Log %d {Finished reading file}")
TRC_MSG(VT_TRC_TERMFILEREAD_NULL_BUFFER, "termFileRead: NULL Buffer")
TRC_MSG(VT_TRC_TERMH245AUTOCAPSCHANNELOPEN_ENTER, "termH245AutoCapsChannelOpen: MPC Chan existed? Audio: %d, Video: %d")
TRC_MSG(VT_TRC_TERMH245AUTOCAPSCHANNELOPEN_MSG1, "termH245AutoCapsChannelOpen: Tx Audio Channel has already opened")
TRC_MSG(VT_TRC_TERMH245AUTOCAPSCHANNELOPEN_MSG2, "termH245AutoCapsChannelOpen: Tx Video Channel has already opened")
TRC_MSG(VT_TRC_TERMH245AUTOCAPSCREATEONECHANNEL, "termH245AutoCapsCreateOneChannel: channel type = %d")
TRC_MSG(VT_TRC_TERMH245AUTOCAPSCREATEONECHAN_CHAN_INFO, "termH245AutoCapsCreateOneChannel: chanType=%hu, isBiDir=%hu, isNullData=%hu [LN:%d]")
TRC_MSG(VT_TRC_TERMH245AUTOCAPSUPDATECAPINFO_REMOTE_VIDEO_CAP, "termH245AutoCapsUpdateCapInfo: remote video cap = %d, type = %d")
TRC_MSG(VT_TRC_TERMH245AUTOCAPSUPDATECAPINFO_REMOVE_CIF16_RESOLUTION_IN_OLC, "termH245AutoCapsUpdateCapInfo: remove cif16 resolution in OLC")
TRC_MSG(VT_TRC_TERMH245AUTOCAPSUPDATECAPINFO_REMOVE_CIF4_RESOLUTION_IN_OLC, "termH245AutoCapsUpdateCapInfo: remove cif4 resolution in OLC")
TRC_MSG(VT_TRC_TERMH245AUTOCAPSUPDATECAPINFO_REMOVE_CIF_RESOLUTION_IN_OLC, "termH245AutoCapsUpdateCapInfo: remove cif resolution in OLC")
TRC_MSG(VT_TRC_TERMH245AUTOCAPSUPDATECAPINFO_REMOVE_QCIF_RESOLUTION_IN_OLC, "termH245AutoCapsUpdateCapInfo: remove qcif resolution in OLC")
TRC_MSG(VT_TRC_TERMH245AUTOCAPSUPDATECAPINFO_REMOVE_SQCIF_RESOLUTION_IN_OLC, "termH245AutoCapsUpdateCapInfo: remove sqcif resolution in OLC")
TRC_MSG(VT_TRC_TERMINALCAPABILITYSET_MISSING_NSRP_NODE_MSG, "terminalCapabilitySet: Missing nsrp information")
TRC_MSG(VT_TRC_TIMERCB, "timerCb(engine=%08X)")
TRC_MSG(VT_TRC_TREE_TOO_DEEP_TO_WORK_WITH, "Tree too deep to work with")
TRC_MSG(VT_TRC_UNABLE_TO_ALLOCATE_CHANNEL, "Unable to allocate channel")
TRC_MSG(VT_TRC_UNKNOWNTYPE_INCOMING_CONNECTED, "INCOMING UNKNOWNTYPE LC is connected")
TRC_MSG(VT_TRC_UNKNOWNTYPE_OUTGOING_CONNECTED, "Outgoing UNKNOWNTYPE LC is connected")
TRC_MSG(VT_TRC_UNKNOWNTYPE_OUTGOING_INCOMING_CONNECTED, "Outgoing Incoming UNKNOWNTYPE LC is connected")
TRC_MSG(VT_TRC_UPDATE_AV_SKEW, "update A/V Skew: new_skew=%d [Ln:%d]")
TRC_MSG(VT_TRC_UPLINK_H223_PDU_RAW_DATA, "Uplink H223 pdu raw data")
TRC_MSG(VT_TRC_UPLINK_VIDEO_RAW_DATA, "Uplink/Encode video raw data")
TRC_MSG(VT_TRC_UPLINK_AUDIO_RAW_DATA, "Uplink/Encode audio raw data")
TRC_MSG(VT_TRC_VALIDATEINCOMINGCHANNEL_ADDDATATYPETOCAPTABLE, "addDTtoCap = %d, Incap not in TCS = %d")
TRC_MSG(VT_TRC_VALIDATEINCOMINGCHANNEL_VALIDATEDESCCAPS, "ValidateDesc: remoteVideo = %d remoteAudio = %d, localVideo = %d, localAudio = %d")
TRC_MSG(VT_TRC_VALIDATENEWCAP_CHAN_STATUS, "ValidateNewCap: hAudioChan=%x, hVideoChan=%x [Ln: %d]")
TRC_MSG(VT_TRC_VALIDATENEWCAP_NEW_CHAN_INFO, "ValidateNewCap: NewAudio? %hu, newVideo? %hu, hAudioChan=%x, hVideoChan=%x [Ln: %d]")
TRC_MSG(VT_TRC_VALIDATENEWCAP_OPEN_NEW_CHAN, "ValidateNewCap: Open New Video Channel [Ln:%d]")
TRC_MSG(VT_TRC_VALIDATEOCTETSTRING_MISMATCH, "H245AutoCapsValidateOctetString: Video decode Cfg not match [Ln:%d]")
TRC_MSG(VT_TRC_VALIDATEREMOATEONLYSIMULTANEOUSCAP_MTK_FOUND_REMOTE_PREFER, "ValidateRxOnly: Video Cap Found, entry=%u, CapId=%d [Ln:%d]")
TRC_MSG(VT_TRC_VALIDATESIMULTANEOUSCAPS_ALTCAPS_FOUND, "ValidateSimultCaps: AudioCapFound? %hu, VideoCapFound? %hu, MasterCapId = %d, SlaveCapId = %d[Ln:%d]")
TRC_MSG(VT_TRC_VIDEO2_INCOMING_CONNECTED, "INCOMING Video2 LC is connected")
TRC_MSG(VT_TRC_VIDEO2_OUTGOING_CONNECTED, "Outgoing Video2 LC is connected")
TRC_MSG(VT_TRC_VIDEO2_OUTGOING_INCOMING_CONNECTED, "Outgoing Incoming Video2 LC is connected")
TRC_MSG(VT_TRC_VIDEO_CODEC_UNSUPPORT, "Video codec unsupport")
TRC_MSG(VT_TRC_VIDEO_DL_COSUME_FRAME, "[vt_med_downlink_video_Q]MED cosume video frame, w_idx: %u, r_idx: %u, line:%d")
TRC_MSG(VT_TRC_VIDEO_DL_FRAME_DURATION, "[vt_med_downlink_video_q]Parse video frame duration: %d line:%d")
TRC_MSG(VT_TRC_VIDEO_DL_GET_NEW_FRAME, "[vt_med_downlink_video_Q]get new frame to write, w_idx: %u, r_idx: %u, line:%d")
TRC_MSG(VT_TRC_VIDEO_DL_GET_NEW_FRAME2, "[vt_med_downlink_video_Q]get new frame, buff w_idx: %u, r_idx: %u, q_size: %u, line:%d")
TRC_MSG(VT_TRC_VIDEO_DL_Q_STARVATION, "[vt_med_downlink_video_Q]vt_med_downlink_video_Q starvated, w_idx: %u, r_idx: %u, line:%d")
TRC_MSG(VT_TRC_VIDEO_INCOMING_CONNECTED, "INCOMING Video LC is connected")
TRC_MSG(VT_TRC_VIDEO_OUTGOING_CONNECTED, "Outgoing Video LC is connected")
TRC_MSG(VT_TRC_VIDEO_OUTGOING_INCOMING_CONNECTED, "Outgoing/Incoming Video LC is connected")
TRC_MSG(VT_TRC_VOS_NO_REPLACE, "no replace in VOS")
TRC_MSG(VT_TRC_VOS_REPLACE, "replace in VOS")
TRC_MSG(VT_TRC_VTADDSYB_RTADDBROTHER_FAILURE, "vtAddSyn Failure: rtAddBrother fail for PST Id = %d")
TRC_MSG(VT_TRC_VTADDSYB_RTADDTAIL_FAILURE, "vtAddSyn Failure: rtAddTail fail for PST Id = %d")
TRC_MSG(VT_TRC_VTADDSYB_VTRESOLVESYNNODEID_FAILURE, "vtAddSyn Failure: vtResolveSynNodeId fail for PST Id = %d")
TRC_MSG(VT_TRC_VTADDSYN_PROBABLE_INTEGRITY_FAILIURE_IN_VT, "vtAddSyn: probable integrity failiure in vt %08X.")
TRC_MSG(VT_TRC_VTADDTREEFUNC_STRING_ALLOCATION_FAILED_FOR, "vtAddTreeFunc: String allocation failed for '%d' (%d).")
TRC_MSG(VT_TRC_VTDELETEFUNC_FAILED_TO_FREE_STRING_FROM, "vtDeleteFunc:%d: Failed to free string from pool [%08X].")
TRC_MSG(VT_TRC_VTH245GETPREFERREDAL_FAIL_TO_ADD_NODE, "vtGetPreferredAl: Fail TO ADD NODE (LINE: %d)")
TRC_MSG(VT_TRC_VTH245GETPREFERREDAL_FUNC_ENTER, "vtGetPreferredAl: Enter!")
TRC_MSG(VT_TRC_VTH245GETPREFERREDAL_INVALIDE_AL, "vtGetPreferredAl: Invalid AL (LINE: %d)")
TRC_MSG(VT_TRC_VTH245GETPREFERREDAL_RETURN_OK, "vtGetPreferredAl: Get Preferred AL Successfully!")
TRC_MSG(VT_TRC_VTH245RMBUILD_DTH263_BAD_PARAMS, "vtH245RMBuildDataTypeNodeFromModeElemH263: Bad Params! (LINE: %d)")
TRC_MSG(VT_TRC_VTH245RMBUILD_DTH263_FAIL_TO_ADD_NODE, "vtH245RMBuildDataTypeNodeFromModeElemH263: Fail To Add Node! (LINE: %d)")
TRC_MSG(VT_TRC_VTH245RMBUILD_DTH263_FUNC_ENTER, "vtH245RMBuildDataTypeNodeFromModeElemH263: Enter!")
TRC_MSG(VT_TRC_VTH245RMBUILD_DTH263_INVALID_CAPID, "vtH245RMBuildDataTypeNodeFromModeElemH263: Invalid CapId!")
TRC_MSG(VT_TRC_VTH245RMBUILD_DTH263_INVALID_MODEID, "vtH245RMBuildDataTypeNodeFromModeElemH263: Invalid ModeId!")
TRC_MSG(VT_TRC_VTH245RMBUILD_DTH263_NOT_H263, "vtH245RMBuildDataTypeNodeFromModeElemH263: Not H263!")
TRC_MSG(VT_TRC_VTH245RMBUILD_DTH263_REMOVE_CIF, "vtH245RMBuildDataTypeNodeFromModeElemH263: Remove SQCIF!")
TRC_MSG(VT_TRC_VTH245RMBUILD_DTH263_REMOVE_CIF16, "vtH245RMBuildDataTypeNodeFromModeElemH263: Remove QCIF!")
TRC_MSG(VT_TRC_VTH245RMBUILD_DTH263_REMOVE_CIF4, "vtH245RMBuildDataTypeNodeFromModeElemH263: Remove QCIF!")
TRC_MSG(VT_TRC_VTH245RMBUILD_DTH263_REMOVE_QCIF, "vtH245RMBuildDataTypeNodeFromModeElemH263: Remove QCIF!")
TRC_MSG(VT_TRC_VTH245RMBUILD_DTH263_REMOVE_SQCIF, "vtH245RMBuildDataTypeNodeFromModeElemH263: Remove SQCIF!")
TRC_MSG(VT_TRC_VTH245RMBUILD_DTH263_RETURN_OK, "vtH245RMBuildDataTypeNodeFromModeElemH263: Build Successfully!")
TRC_MSG(VT_TRC_VTSAVECHANNELPARAMS_CAPABILITY_DOES_NOT_EXIST, "vtSaveChannelParams: Requested Capability (%d) Does Not Exist!")
TRC_MSG(VT_TRC_VTSAVECHANNELPARAMS_FAIL_TO_RETRIEVE_REVERSE_PARAMS, "vtSaveChannelParams: Fail to retrieve reverse parameters!")
TRC_MSG(VT_TRC_VTSAVECHANNELPARAMS_FAIL_TO_SAVE_REVERSE_PARAMS, "vtSaveChannelParams: Fail to save reverse parameters! (LINE: %d")
TRC_MSG(VT_TRC_VTSAVECHANNELPARAMS_FUNC_ENTER, "vtSaveChannelParams: Enter!")
TRC_MSG(VT_TRC_VTSAVECHANNELPARAMS_RETURN_OK, "vtSaveChannelParams: Save Channel Parameters Successfully!")
TRC_MSG(VT_TRC_VT_EM_UPDATE_HDLR_EM_STATUS, "[EM][vt_em_update_hdlr] vt_em_enable = %d")
TRC_MSG(VT_TRC_VT_PUT_UPLINK_VIDEO_DATA_FAIL_TO_SEND_VIDEO, "vt_put_uplink_video_data: Fail to send video data")
TRC_MSG(VT_TRC_VT_SEND_EM_MSG, "[EM][vt_send_em_msg]")
TRC_MSG(VT_TRC_VT_SET_MTK_CHL_CAP_FAIL_TO_GET_MP4_SESSION_HDR, "vt_set_mtk_chl_cap: Fail to get MPEG4 Session Header")
TRC_MSG(VT_TRC_VT_SET_MTK_CHL_CAP_MP4_SESSION_HDR_LEN, "vt_set_mtk_chl_cap: MPEG4 Session Header length = %d")
TRC_MSG(VT_TRC_VT_VIDEO_PUT_OUTGOING_DATA_EX_SESSION_MISMATCH, "[Drop UPLINK VIDEO]vt_video_put_outgoing_data_ex: session mismatch: session id = %d, cur session id =%d ")
TRC_MSG(VT_TRC_VT_VIDEO_PUT_OUTGOING_DATA_EX_UPLINK_DATA_INFO, "[UPLINK VIDEO]vt_video_put_outgoing_data_ex: size = %u, pkt type = %hu, session id = %hu")
TRC_MSG(VT_TRC_WATCHDOG_INFO, "[WATCHDOG] [csr num:%d size:%d] [UL AUD num:%d size:%d] [UL VID num:%d size:%d] [DROP VID num:%d size:%d][DL VID num:%d size:%d]")
TRC_MSG(VT_TRC_WORKING_ON, "Working on ")
TRC_MSG(VT_TRC_WRITE_TCP_DATA_ERROR_IN_RVSELECTUPDATE, "write_tcp_data: Error in RvSelectUpdate(status=%d)")
TRC_MSG(VT_TRC_WRITE_TCP_DATA_ERROR_IN_RVSOCKETSENDBUFFER, "write_tcp_data: Error in RvSocketSendBuffer(status=%d)")
TRC_MSG(VT_TRC_WRITE_TCP_DATA_ERROR_IN_WRITEV, "write_tcp_data: Error in writev(errno=%d)")
TRC_MSG(VT_TRC_WRITE_TO_DL_QUEUE, "write to VT_CSR_DL_queue r_idx:%d, w_idx:%d distance: %d")
TRC_MSG(VT_TRC_WRITE_TO_UL_QUEUE, "write to VT_CSR_UL_queue r_idx:%d, w_idx:%d distance: %d")
TRC_MSG(VT_WAIT_EVT_TRC, "VT Wait Event: %d, %d")
TRC_MSG(VT_CLEAR_BUFFER, "VT clear buffer: %d")
TRC_MSG(VT_TERM_DROP_FLOW, "term drop: file = %d, param1 = %d, param2 = %d, param3 = %d, param4 = %d")
TRC_MSG(VT_TRC_END_OF_TRC, "")

END_TRACE_MAP(MOD_VT)
 
#endif

